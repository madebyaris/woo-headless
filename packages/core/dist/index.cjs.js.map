{"version":3,"file":"index.cjs.js","sources":["../src/types/result.ts","../src/types/errors.ts","../src/types/commerce.ts","../src/types/config.ts","../src/core/client.ts","../src/core/auth.ts","../src/core/config.ts","../src/core/cache.ts","../src/modules/products/index.ts","../src/types/cart.ts","../src/test/utils.ts","../src/modules/cart/sync.ts","../src/modules/cart/index.ts","../src/types/search.ts","../src/modules/search/index.ts","../src/types/user.ts","../src/modules/user/email-verification.ts","../src/modules/user/download-management.ts","../src/modules/user/index.ts","../src/modules/reviews/index.ts","../src/types/checkout.ts","../src/modules/checkout/address.ts","../src/modules/checkout/shipping.ts","../src/modules/checkout/payment.ts","../src/modules/checkout/validation.ts","../src/modules/checkout/flow.ts","../src/modules/checkout/order.ts","../src/modules/checkout/index.ts","../src/index.ts","../src/woo-headless.ts"],"sourcesContent":["/**\n * Result type for comprehensive error handling\n * Following the enhanced unified-10x-dev framework\n */\n\nexport interface Success<T> {\n  readonly success: true;\n  readonly data: T;\n}\n\nexport interface Failure<E> {\n  readonly success: false;\n  readonly error: E;\n}\n\nexport type Result<T, E> = Success<T> | Failure<E>;\n\n/**\n * Create a successful result\n */\nexport function Ok<T>(data: T): Success<T> {\n  return { success: true, data };\n}\n\n/**\n * Create a failed result\n */\nexport function Err<E>(error: E): Failure<E> {\n  return { success: false, error };\n}\n\n/**\n * Check if result is successful\n */\nexport function isOk<T, E>(result: Result<T, E>): result is Success<T> {\n  return result.success;\n}\n\n/**\n * Check if result is failed\n */\nexport function isErr<T, E>(result: Result<T, E>): result is Failure<E> {\n  return !result.success;\n}\n\n/**\n * Get data from successful result or throw\n */\nexport function unwrap<T, E>(result: Result<T, E>): T {\n  if (isOk(result)) {\n    return result.data;\n  }\n  throw new Error(`Called unwrap on Err: ${JSON.stringify(result.error)}`);\n}\n\n/**\n * Get error from failed result or throw\n */\nexport function unwrapErr<T, E>(result: Result<T, E>): E {\n  if (isErr(result)) {\n    return result.error;\n  }\n  throw new Error(`Called unwrapErr on Ok: ${JSON.stringify(result.data)}`);\n}\n\n/**\n * Get data from successful result or return default\n */\nexport function unwrapOr<T, E>(result: Result<T, E>, defaultValue: T): T {\n  return isOk(result) ? result.data : defaultValue;\n}\n\n/**\n * Map successful result to new type\n */\nexport function map<T, U, E>(\n  result: Result<T, E>,\n  fn: (data: T) => U\n): Result<U, E> {\n  return isOk(result) ? Ok(fn(result.data)) : result;\n}\n\n/**\n * Map error to new type\n */\nexport function mapErr<T, E, F>(\n  result: Result<T, E>,\n  fn: (error: E) => F\n): Result<T, F> {\n  return isErr(result) ? Err(fn(result.error)) : result;\n}\n\n/**\n * Chain operations on successful results\n */\nexport function andThen<T, U, E>(\n  result: Result<T, E>,\n  fn: (data: T) => Result<U, E>\n): Result<U, E> {\n  return isOk(result) ? fn(result.data) : result;\n} ","/**\n * WooCommerce Headless SDK Error Types\n * Following the enhanced unified-10x-dev framework\n */\n\n/**\n * Base error interface with mandatory fields\n */\nexport interface WooError {\n  readonly code: WooErrorCode;\n  readonly message: string;\n  readonly details?: unknown;\n  readonly timestamp: Date;\n  readonly statusCode?: number;\n  readonly retryable?: boolean;\n}\n\n/**\n * Specific error codes for different failure scenarios\n */\nexport type WooErrorCode =\n  | 'NETWORK_ERROR'\n  | 'AUTH_ERROR'\n  | 'VALIDATION_ERROR'\n  | 'API_ERROR'\n  | 'RATE_LIMIT_ERROR'\n  | 'TIMEOUT_ERROR'\n  | 'CONFIGURATION_ERROR'\n  | 'PRODUCT_NOT_FOUND'\n  | 'CART_ERROR'\n  | 'CHECKOUT_ERROR'\n  | 'PAYMENT_ERROR'\n  | 'SUBSCRIPTION_ERROR'\n  | 'CACHE_ERROR';\n\n/**\n * Network-related errors\n */\nexport class NetworkError extends Error implements WooError {\n  readonly code = 'NETWORK_ERROR' as const;\n  readonly timestamp: Date;\n  readonly retryable = true;\n  readonly statusCode?: number;\n\n  constructor(\n    message: string,\n    public readonly details?: unknown,\n    statusCode?: number\n  ) {\n    super(message);\n    this.name = 'NetworkError';\n    this.timestamp = new Date();\n    if (statusCode !== undefined) {\n      this.statusCode = statusCode;\n    }\n  }\n}\n\n/**\n * Authentication and authorization errors\n */\nexport class AuthError extends Error implements WooError {\n  readonly code = 'AUTH_ERROR' as const;\n  readonly timestamp: Date;\n  readonly retryable = false;\n  readonly statusCode?: number;\n\n  constructor(\n    message: string,\n    public readonly details?: unknown,\n    statusCode?: number\n  ) {\n    super(message);\n    this.name = 'AuthError';\n    this.timestamp = new Date();\n    if (statusCode !== undefined) {\n      this.statusCode = statusCode;\n    }\n  }\n}\n\n/**\n * Input validation errors\n */\nexport class ValidationError extends Error implements WooError {\n  readonly code = 'VALIDATION_ERROR' as const;\n  readonly timestamp: Date;\n  readonly retryable = false;\n\n  constructor(\n    message: string,\n    public readonly details?: unknown\n  ) {\n    super(message);\n    this.name = 'ValidationError';\n    this.timestamp = new Date();\n  }\n}\n\n/**\n * API-related errors from WooCommerce\n */\nexport class ApiError extends Error implements WooError {\n  readonly code = 'API_ERROR' as const;\n  readonly timestamp: Date;\n  readonly retryable: boolean;\n\n  constructor(\n    message: string,\n    public readonly statusCode: number,\n    public readonly details?: unknown\n  ) {\n    super(message);\n    this.name = 'ApiError';\n    this.timestamp = new Date();\n    // Retry on 5xx errors, not on 4xx\n    this.retryable = statusCode >= 500;\n  }\n}\n\n/**\n * Rate limiting errors\n */\nexport class RateLimitError extends Error implements WooError {\n  readonly code = 'RATE_LIMIT_ERROR' as const;\n  readonly timestamp: Date;\n  readonly retryable = true;\n\n  constructor(\n    message: string,\n    public readonly retryAfter?: number,\n    public readonly details?: unknown\n  ) {\n    super(message);\n    this.name = 'RateLimitError';\n    this.timestamp = new Date();\n  }\n}\n\n/**\n * Timeout errors\n */\nexport class TimeoutError extends Error implements WooError {\n  readonly code = 'TIMEOUT_ERROR' as const;\n  readonly timestamp: Date;\n  readonly retryable = true;\n\n  constructor(\n    message: string,\n    public readonly timeout: number,\n    public readonly details?: unknown\n  ) {\n    super(message);\n    this.name = 'TimeoutError';\n    this.timestamp = new Date();\n  }\n}\n\n/**\n * Configuration errors\n */\nexport class ConfigurationError extends Error implements WooError {\n  readonly code = 'CONFIGURATION_ERROR' as const;\n  readonly timestamp: Date;\n  readonly retryable = false;\n\n  constructor(\n    message: string,\n    public readonly details?: unknown\n  ) {\n    super(message);\n    this.name = 'ConfigurationError';\n    this.timestamp = new Date();\n  }\n}\n\n/**\n * Product-specific errors\n */\nexport class ProductNotFoundError extends Error implements WooError {\n  readonly code = 'PRODUCT_NOT_FOUND' as const;\n  readonly timestamp: Date;\n  readonly retryable = false;\n\n  constructor(\n    public readonly productId: number | string,\n    public readonly details?: unknown\n  ) {\n    super(`Product with ID ${productId} not found`);\n    this.name = 'ProductNotFoundError';\n    this.timestamp = new Date();\n  }\n}\n\n/**\n * Cart-related errors\n */\nexport class CartError extends Error implements WooError {\n  readonly code = 'CART_ERROR' as const;\n  readonly timestamp: Date;\n  readonly retryable = false;\n\n  constructor(\n    message: string,\n    public readonly details?: unknown\n  ) {\n    super(message);\n    this.name = 'CartError';\n    this.timestamp = new Date();\n  }\n}\n\n/**\n * Checkout process errors\n */\nexport class CheckoutError extends Error implements WooError {\n  readonly code = 'CHECKOUT_ERROR' as const;\n  readonly timestamp: Date;\n  readonly retryable = false;\n\n  constructor(\n    message: string,\n    public readonly details?: unknown\n  ) {\n    super(message);\n    this.name = 'CheckoutError';\n    this.timestamp = new Date();\n  }\n}\n\n/**\n * Payment processing errors\n */\nexport class PaymentError extends Error implements WooError {\n  readonly code = 'PAYMENT_ERROR' as const;\n  readonly timestamp: Date;\n  readonly retryable = false;\n  readonly statusCode?: number;\n\n  constructor(\n    message: string,\n    public readonly details?: unknown,\n    statusCode?: number\n  ) {\n    super(message);\n    this.name = 'PaymentError';\n    this.timestamp = new Date();\n    if (statusCode !== undefined) {\n      this.statusCode = statusCode;\n    }\n  }\n}\n\n/**\n * Error factory for creating typed errors\n */\nexport class ErrorFactory {\n  static networkError(message: string, details?: unknown, statusCode?: number): NetworkError {\n    return new NetworkError(message, details, statusCode);\n  }\n\n  static authError(message: string, details?: unknown, statusCode?: number): AuthError {\n    return new AuthError(message, details, statusCode);\n  }\n\n  static validationError(message: string, details?: unknown): ValidationError {\n    return new ValidationError(message, details);\n  }\n\n  static apiError(message: string, statusCode: number, details?: unknown): ApiError {\n    return new ApiError(message, statusCode, details);\n  }\n\n  static rateLimitError(message: string, retryAfter?: number, details?: unknown): RateLimitError {\n    return new RateLimitError(message, retryAfter, details);\n  }\n\n  static timeoutError(message: string, timeout: number, details?: unknown): TimeoutError {\n    return new TimeoutError(message, timeout, details);\n  }\n\n  static configurationError(message: string, details?: unknown): ConfigurationError {\n    return new ConfigurationError(message, details);\n  }\n\n  static productNotFoundError(productId: number | string, details?: unknown): ProductNotFoundError {\n    return new ProductNotFoundError(productId, details);\n  }\n\n  static cartError(message: string, details?: unknown): CartError {\n    return new CartError(message, details);\n  }\n\n  static checkoutError(message: string, details?: unknown): CheckoutError {\n    return new CheckoutError(message, details);\n  }\n\n  static paymentError(message: string, details?: unknown, statusCode?: number): PaymentError {\n    return new PaymentError(message, details, statusCode);\n  }\n\n  static cacheError(message: string, details?: unknown): CacheError {\n    return new CacheError(message, details);\n  }\n\n  static notImplementedError(message: string, details?: unknown): ConfigurationError {\n    return new ConfigurationError(`Not implemented: ${message}`, details);\n  }\n\n  static persistenceError(message: string, details?: unknown): CacheError {\n    return new CacheError(`Persistence error: ${message}`, details);\n  }\n}\n\n/**\n * Cache-related errors\n */\nexport class CacheError extends Error implements WooError {\n  readonly code = 'CACHE_ERROR' as const;\n  readonly timestamp: Date;\n  readonly retryable = false;\n\n  constructor(\n    message: string,\n    public readonly details?: unknown\n  ) {\n    super(message);\n    this.name = 'CacheError';\n    this.timestamp = new Date();\n  }\n}\n\n/**\n * Type guard for WooError\n */\nexport function isWooError(error: unknown): error is WooError {\n  return (\n    error !== null &&\n    typeof error === 'object' &&\n    'code' in error &&\n    'message' in error &&\n    'timestamp' in error\n  );\n} ","/**\n * WooCommerce API Types\n * Following the WooCommerce REST API v3 specification\n */\n\nimport { z } from 'zod';\n\n/**\n * Product status enumeration\n */\nexport type ProductStatus = 'draft' | 'pending' | 'private' | 'publish';\n\n/**\n * Product catalog visibility\n */\nexport type ProductCatalogVisibility = 'visible' | 'catalog' | 'search' | 'hidden';\n\n/**\n * Product type enumeration\n */\nexport type ProductType = 'simple' | 'grouped' | 'external' | 'variable';\n\n/**\n * Order status enumeration\n */\nexport type OrderStatus =\n  | 'pending'\n  | 'processing'\n  | 'on-hold'\n  | 'completed'\n  | 'cancelled'\n  | 'refunded'\n  | 'failed'\n  | 'trash';\n\n/**\n * Image dimensions\n */\nexport interface ImageDimensions {\n  readonly width: number;\n  readonly height: number;\n}\n\n/**\n * Product image interface\n */\nexport interface ProductImage {\n  readonly id: number;\n  readonly date_created: string;\n  readonly date_created_gmt: string;\n  readonly date_modified: string;\n  readonly date_modified_gmt: string;\n  readonly src: string;\n  readonly name: string;\n  readonly alt: string;\n  readonly position: number;\n}\n\n/**\n * Product category interface\n */\nexport interface ProductCategory {\n  readonly id: number;\n  readonly name: string;\n  readonly slug: string;\n}\n\n/**\n * Product tag interface\n */\nexport interface ProductTag {\n  readonly id: number;\n  readonly name: string;\n  readonly slug: string;\n}\n\n/**\n * Product attribute interface\n */\nexport interface ProductAttribute {\n  readonly id: number;\n  readonly name: string;\n  readonly position: number;\n  readonly visible: boolean;\n  readonly variation: boolean;\n  readonly options: readonly string[];\n}\n\n/**\n * Price range for variable products\n */\nexport interface PriceRange {\n  readonly min: string;\n  readonly max: string;\n}\n\n/**\n * Product dimensions\n */\nexport interface ProductDimensions {\n  readonly length: string;\n  readonly width: string;\n  readonly height: string;\n}\n\n/**\n * Meta data interface\n */\nexport interface MetaData {\n  readonly id: number;\n  readonly key: string;\n  readonly value: string;\n}\n\n/**\n * Core product interface matching WooCommerce API\n */\nexport interface WooCommerceProduct {\n  readonly id: number;\n  readonly name: string;\n  readonly slug: string;\n  readonly permalink: string;\n  readonly date_created: string;\n  readonly date_created_gmt: string;\n  readonly date_modified: string;\n  readonly date_modified_gmt: string;\n  readonly type: ProductType;\n  readonly status: ProductStatus;\n  readonly featured: boolean;\n  readonly catalog_visibility: ProductCatalogVisibility;\n  readonly description: string;\n  readonly short_description: string;\n  readonly sku: string;\n  readonly price: string;\n  readonly regular_price: string;\n  readonly sale_price: string;\n  readonly date_on_sale_from?: string;\n  readonly date_on_sale_from_gmt?: string;\n  readonly date_on_sale_to?: string;\n  readonly date_on_sale_to_gmt?: string;\n  readonly price_html: string;\n  readonly on_sale: boolean;\n  readonly purchasable: boolean;\n  readonly total_sales: number;\n  readonly virtual: boolean;\n  readonly downloadable: boolean;\n  readonly downloads: readonly unknown[];\n  readonly download_limit: number;\n  readonly download_expiry: number;\n  readonly external_url: string;\n  readonly button_text: string;\n  readonly tax_status: 'taxable' | 'shipping' | 'none';\n  readonly tax_class: string;\n  readonly manage_stock: boolean;\n  readonly stock_quantity?: number;\n  readonly stock_status: 'instock' | 'outofstock' | 'onbackorder';\n  readonly backorders: 'no' | 'notify' | 'yes';\n  readonly backorders_allowed: boolean;\n  readonly backordered: boolean;\n  readonly sold_individually: boolean;\n  readonly weight: string;\n  readonly dimensions: ProductDimensions;\n  readonly shipping_required: boolean;\n  readonly shipping_taxable: boolean;\n  readonly shipping_class: string;\n  readonly shipping_class_id: number;\n  readonly reviews_allowed: boolean;\n  readonly average_rating: string;\n  readonly rating_count: number;\n  readonly related_ids: readonly number[];\n  readonly upsell_ids: readonly number[];\n  readonly cross_sell_ids: readonly number[];\n  readonly parent_id: number;\n  readonly purchase_note: string;\n  readonly categories: readonly ProductCategory[];\n  readonly tags: readonly ProductTag[];\n  readonly images: readonly ProductImage[];\n  readonly attributes: readonly ProductAttribute[];\n  readonly default_attributes: readonly unknown[];\n  readonly variations: readonly number[];\n  readonly grouped_products: readonly number[];\n  readonly menu_order: number;\n  readonly meta_data: readonly MetaData[];\n}\n\n/**\n * Product variation interface\n */\nexport interface ProductVariation {\n  readonly id: number;\n  readonly date_created: string;\n  readonly date_created_gmt: string;\n  readonly date_modified: string;\n  readonly date_modified_gmt: string;\n  readonly description: string;\n  readonly permalink: string;\n  readonly sku: string;\n  readonly price: string;\n  readonly regular_price: string;\n  readonly sale_price: string;\n  readonly date_on_sale_from?: string;\n  readonly date_on_sale_from_gmt?: string;\n  readonly date_on_sale_to?: string;\n  readonly date_on_sale_to_gmt?: string;\n  readonly on_sale: boolean;\n  readonly status: ProductStatus;\n  readonly purchasable: boolean;\n  readonly virtual: boolean;\n  readonly downloadable: boolean;\n  readonly downloads: readonly unknown[];\n  readonly download_limit: number;\n  readonly download_expiry: number;\n  readonly tax_status: 'taxable' | 'shipping' | 'none';\n  readonly tax_class: string;\n  readonly manage_stock: boolean;\n  readonly stock_quantity?: number;\n  readonly stock_status: 'instock' | 'outofstock' | 'onbackorder';\n  readonly backorders: 'no' | 'notify' | 'yes';\n  readonly backorders_allowed: boolean;\n  readonly backordered: boolean;\n  readonly weight: string;\n  readonly dimensions: ProductDimensions;\n  readonly shipping_class: string;\n  readonly shipping_class_id: number;\n  readonly image: ProductImage;\n  readonly attributes: readonly ProductAttribute[];\n  readonly menu_order: number;\n  readonly meta_data: readonly MetaData[];\n}\n\n/**\n * Billing address interface\n */\nexport interface BillingAddress {\n  readonly first_name: string;\n  readonly last_name: string;\n  readonly company: string;\n  readonly address_1: string;\n  readonly address_2: string;\n  readonly city: string;\n  readonly state: string;\n  readonly postcode: string;\n  readonly country: string;\n  readonly email: string;\n  readonly phone: string;\n}\n\n/**\n * Shipping address interface\n */\nexport interface ShippingAddress {\n  readonly first_name: string;\n  readonly last_name: string;\n  readonly company: string;\n  readonly address_1: string;\n  readonly address_2: string;\n  readonly city: string;\n  readonly state: string;\n  readonly postcode: string;\n  readonly country: string;\n}\n\n/**\n * Order line item interface\n */\nexport interface OrderLineItem {\n  readonly id: number;\n  readonly name: string;\n  readonly product_id: number;\n  readonly variation_id: number;\n  readonly quantity: number;\n  readonly tax_class: string;\n  readonly subtotal: string;\n  readonly subtotal_tax: string;\n  readonly total: string;\n  readonly total_tax: string;\n  readonly taxes: readonly unknown[];\n  readonly meta_data: readonly MetaData[];\n  readonly sku: string;\n  readonly price: string;\n}\n\n/**\n * Order interface\n */\nexport interface WooCommerceOrder {\n  readonly id: number;\n  readonly parent_id: number;\n  readonly status: OrderStatus;\n  readonly currency: string;\n  readonly version: string;\n  readonly prices_include_tax: boolean;\n  readonly date_created: string;\n  readonly date_modified: string;\n  readonly discount_total: string;\n  readonly discount_tax: string;\n  readonly shipping_total: string;\n  readonly shipping_tax: string;\n  readonly cart_tax: string;\n  readonly total: string;\n  readonly total_tax: string;\n  readonly customer_id: number;\n  readonly order_key: string;\n  readonly billing: BillingAddress;\n  readonly shipping: ShippingAddress;\n  readonly payment_method: string;\n  readonly payment_method_title: string;\n  readonly transaction_id: string;\n  readonly customer_ip_address: string;\n  readonly customer_user_agent: string;\n  readonly created_via: string;\n  readonly customer_note: string;\n  readonly date_completed?: string;\n  readonly date_paid?: string;\n  readonly cart_hash: string;\n  readonly number: string;\n  readonly meta_data: readonly MetaData[];\n  readonly line_items: readonly OrderLineItem[];\n  readonly tax_lines: readonly unknown[];\n  readonly shipping_lines: readonly unknown[];\n  readonly fee_lines: readonly unknown[];\n  readonly coupon_lines: readonly unknown[];\n  readonly refunds: readonly unknown[];\n  readonly set_paid: boolean;\n}\n\n/**\n * Customer interface\n */\nexport interface WooCommerceCustomer {\n  readonly id: number;\n  readonly date_created: string;\n  readonly date_created_gmt: string;\n  readonly date_modified: string;\n  readonly date_modified_gmt: string;\n  readonly email: string;\n  readonly first_name: string;\n  readonly last_name: string;\n  readonly role: string;\n  readonly username: string;\n  readonly billing: BillingAddress;\n  readonly shipping: ShippingAddress;\n  readonly is_paying_customer: boolean;\n  readonly avatar_url: string;\n  readonly meta_data: readonly MetaData[];\n}\n\n/**\n * WooCommerce coupon interface following REST API v3\n */\nexport interface WooCommerceCoupon {\n  readonly id: number;\n  readonly code: string;\n  readonly amount: string;\n  readonly date_created: string;\n  readonly date_created_gmt: string;\n  readonly date_modified: string;\n  readonly date_modified_gmt: string;\n  readonly discount_type: 'percent' | 'fixed_cart' | 'fixed_product';\n  readonly description: string;\n  readonly date_expires?: string;\n  readonly date_expires_gmt?: string;\n  readonly usage_count: number;\n  readonly individual_use: boolean;\n  readonly product_ids: readonly number[];\n  readonly excluded_product_ids: readonly number[];\n  readonly usage_limit?: number;\n  readonly usage_limit_per_user?: number;\n  readonly limit_usage_to_x_items?: number;\n  readonly free_shipping: boolean;\n  readonly product_categories: readonly number[];\n  readonly excluded_product_categories: readonly number[];\n  readonly exclude_sale_items: boolean;\n  readonly minimum_amount: string;\n  readonly maximum_amount: string;\n  readonly email_restrictions: readonly string[];\n  readonly used_by: readonly string[];\n  readonly meta_data: readonly MetaData[];\n}\n\n/**\n * Zod schemas for validation\n */\nexport const ProductSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  slug: z.string(),\n  status: z.enum(['draft', 'pending', 'private', 'publish']),\n  featured: z.boolean(),\n  catalog_visibility: z.enum(['visible', 'catalog', 'search', 'hidden']),\n  description: z.string(),\n  short_description: z.string(),\n  price: z.string(),\n  regular_price: z.string(),\n  sale_price: z.string(),\n  on_sale: z.boolean(),\n  stock_status: z.enum(['instock', 'outofstock', 'onbackorder']),\n  manage_stock: z.boolean(),\n  stock_quantity: z.number().optional(),\n  categories: z.array(z.object({\n    id: z.number(),\n    name: z.string(),\n    slug: z.string()\n  })),\n  images: z.array(z.object({\n    id: z.number(),\n    src: z.string(),\n    name: z.string(),\n    alt: z.string()\n  }))\n});\n\nexport const OrderSchema = z.object({\n  id: z.number(),\n  status: z.enum(['pending', 'processing', 'on-hold', 'completed', 'cancelled', 'refunded', 'failed', 'trash']),\n  currency: z.string(),\n  total: z.string(),\n  customer_id: z.number(),\n  billing: z.object({\n    first_name: z.string(),\n    last_name: z.string(),\n    email: z.string(),\n    phone: z.string()\n  }),\n  line_items: z.array(z.object({\n    id: z.number(),\n    name: z.string(),\n    product_id: z.number(),\n    quantity: z.number(),\n    total: z.string()\n  }))\n});\n\n/**\n * Type guards\n */\nexport function isWooCommerceProduct(data: unknown): data is WooCommerceProduct {\n  try {\n    ProductSchema.parse(data);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isWooCommerceOrder(data: unknown): data is WooCommerceOrder {\n  try {\n    OrderSchema.parse(data);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Type guard for WooCommerceCoupon\n */\nexport function isWooCommerceCoupon(data: unknown): data is WooCommerceCoupon {\n  return typeof data === 'object' && data !== null && \n    'id' in data && 'code' in data && 'amount' in data && 'discount_type' in data;\n} ","/**\n * Configuration types for WooCommerce Headless SDK\n * Following the enhanced unified-10x-dev framework\n */\n\nimport type { CheckoutConfig } from '../modules/checkout';\n\n/**\n * Cache storage types\n */\nexport type CacheStorageType = 'localStorage' | 'sessionStorage' | 'memory';\n\n/**\n * Log levels for debugging\n */\nexport type LogLevel = 'error' | 'warn' | 'info' | 'debug' | 'verbose';\n\n/**\n * Environment types\n */\nexport type Environment = 'development' | 'staging' | 'production';\n\n/**\n * Cache configuration\n */\nexport interface CacheConfig {\n  readonly enabled: boolean;\n  readonly ttl: number; // Time to live in milliseconds\n  readonly storage: CacheStorageType;\n  readonly maxSize?: number; // Maximum cache size in MB\n  readonly prefix?: string; // Cache key prefix\n}\n\n/**\n * JWT Authentication configuration\n */\nexport interface JWTConfig {\n  readonly enabled: boolean;\n  readonly secretKey?: string;\n  readonly expiresIn: number; // Token expiration in seconds\n  readonly autoRefresh: boolean;\n  readonly refreshThreshold?: number; // Refresh when X seconds before expiry\n}\n\n/**\n * HTTP client configuration\n */\nexport interface HttpConfig {\n  readonly timeout: number; // Request timeout in milliseconds\n  readonly retries: number; // Number of retry attempts\n  readonly retryDelay: number; // Base delay between retries in milliseconds\n  readonly maxRetryDelay: number; // Maximum retry delay\n  readonly retryCondition?: (error: unknown) => boolean;\n  readonly headers?: Record<string, string>; // Additional headers\n}\n\n/**\n * Search configuration\n */\nexport interface SearchConfig {\n  readonly fuzzyThreshold: number; // Fuse.js threshold (0.0 = exact, 1.0 = anything)\n  readonly maxResults: number; // Maximum search results\n  readonly enableHighlight: boolean;\n  readonly enableSuggestions: boolean;\n  readonly cacheResults: boolean;\n  readonly enableAnalytics: boolean;\n}\n\n/**\n * Advanced search configuration\n */\nexport interface AdvancedSearchConfig {\n  readonly fuzzy: {\n    readonly enabled: boolean;\n    readonly threshold: number; // 0.0 = exact match, 1.0 = match anything\n    readonly distance: number; // maximum Levenshtein distance\n    readonly minMatchCharLength: number;\n    readonly includeScore: boolean;\n  };\n  readonly highlighting: {\n    readonly enabled: boolean;\n    readonly preTag: string;\n    readonly postTag: string;\n    readonly fragmentSize: number;\n    readonly maxFragments: number;\n  };\n  readonly suggestions: {\n    readonly enabled: boolean;\n    readonly maxSuggestions: number;\n    readonly minQueryLength: number;\n    readonly showPopular: boolean;\n    readonly showRecent: boolean;\n  };\n  readonly facets: {\n    readonly enabled: boolean;\n    readonly maxFacets: number;\n    readonly maxFacetValues: number;\n    readonly minDocumentCount: number;\n  };\n  readonly analytics: {\n    readonly enabled: boolean;\n    readonly trackQueries: boolean;\n    readonly trackFilters: boolean;\n    readonly trackClicks: boolean;\n    readonly trackConversions: boolean;\n    readonly sessionTimeout: number; // minutes\n  };\n  readonly caching: {\n    readonly enabled: boolean;\n    readonly ttl: number; // milliseconds\n    readonly maxCacheSize: number; // number of cached queries\n    readonly cacheKey: string;\n  };\n  readonly performance: {\n    readonly maxResults: number;\n    readonly searchTimeout: number; // milliseconds\n    readonly debounceDelay: number; // milliseconds for auto-complete\n    readonly prefetchResults: boolean;\n  };\n}\n\n/**\n * Analytics configuration\n */\nexport interface AnalyticsConfig {\n  readonly enabled: boolean;\n  readonly trackPageViews: boolean;\n  readonly trackSearches: boolean;\n  readonly trackConversions: boolean;\n  readonly apiKey?: string;\n  readonly endpoint?: string;\n}\n\n/**\n * Internationalization configuration\n */\nexport interface I18nConfig {\n  readonly locale: string; // e.g., 'en-US', 'fr-FR'\n  readonly currency: string; // e.g., 'USD', 'EUR'\n  readonly timezone: string; // e.g., 'America/New_York'\n  readonly dateFormat: string;\n  readonly numberFormat: Intl.NumberFormatOptions;\n}\n\n/**\n * Development/debugging configuration\n */\nexport interface DebugConfig {\n  readonly enabled: boolean;\n  readonly logLevel: LogLevel;\n  readonly performanceMonitoring: boolean;\n  readonly errorReporting: boolean;\n  readonly apiLogging: boolean;\n}\n\n/**\n * Cart persistence options\n */\nexport interface CartPersistenceConfig {\n  readonly strategy: 'localStorage' | 'sessionStorage' | 'indexedDB' | 'server' | 'none';\n  readonly key?: string;\n  readonly encryption?: boolean;\n  readonly expirationDays?: number;\n  readonly syncToServer?: boolean;\n}\n\n/**\n * Cart synchronization configuration\n */\nexport interface CartSyncConfig {\n  readonly enabled: boolean;\n  readonly strategy: 'merge_smart' | 'local_wins' | 'server_wins' | 'merge_quantities' | 'prompt_user';\n  readonly syncIntervalMs: number;        // Auto-sync interval in milliseconds\n  readonly conflictResolution: 'merge_smart' | 'local_wins' | 'server_wins' | 'merge_quantities' | 'prompt_user';\n  readonly maxRetries: number;\n  readonly retryDelayMs: number;\n  readonly syncOnAuth: boolean;           // Sync immediately when user authenticates\n  readonly syncOnCartChange: boolean;     // Sync on every cart modification\n  readonly backgroundSync: boolean;       // Enable background sync\n  readonly offlineQueueSize: number;      // Max offline actions to queue\n}\n\n/**\n * Cart configuration\n */\nexport interface CartConfig {\n  readonly persistence: CartPersistenceConfig;\n  readonly sync: CartSyncConfig;\n  readonly autoCalculateTotals: boolean;\n  readonly validateStock: boolean;\n  readonly allowBackorders: boolean;\n  readonly sessionTimeout: number; // minutes\n  readonly maxItems: number;\n  readonly maxQuantityPerItem: number;\n  readonly enableCoupons: boolean;\n  readonly enableShipping: boolean;\n  readonly enableFees: boolean;\n  readonly enableCrossSells: boolean;\n  readonly taxCalculation: {\n    readonly enabled: boolean;\n    readonly pricesIncludeTax: boolean;\n    readonly displayMode: 'incl' | 'excl' | 'both';\n    readonly roundAtSubtotal: boolean;\n  };\n}\n\n/**\n * User sync configuration\n */\nexport interface UserSyncConfig {\n  readonly enabled: boolean;\n  readonly syncInterval: number; // Sync interval in seconds\n  readonly syncOnLogin: boolean;\n  readonly syncProfile: boolean;\n  readonly syncAddresses: boolean;\n  readonly syncPreferences: boolean;\n  readonly syncOrderHistory: boolean;\n  readonly syncWishlist: boolean;\n  readonly maxOrderHistory: number; // Maximum orders to sync\n  readonly cacheUserData: boolean;\n  readonly cacheTtl: number; // Cache TTL in milliseconds\n}\n\n/**\n * Main WooCommerce configuration\n */\nexport interface WooConfig {\n  readonly baseURL: string;\n  readonly consumerKey: string;\n  readonly consumerSecret: string;\n  readonly version?: string; // API version, defaults to 'wc/v3'\n  readonly environment?: Environment;\n  readonly cache?: Partial<CacheConfig>;\n  readonly auth?: Partial<JWTConfig>;\n  readonly http?: Partial<HttpConfig>;\n  readonly search?: Partial<SearchConfig>;\n  readonly advancedSearch?: Partial<AdvancedSearchConfig>;\n  readonly analytics?: Partial<AnalyticsConfig>;\n  readonly i18n?: Partial<I18nConfig>;\n  readonly debug?: Partial<DebugConfig>;\n  readonly cart?: Partial<CartConfig>;\n  readonly userSync?: Partial<UserSyncConfig>;\n  readonly checkout?: Partial<CheckoutConfig>;\n}\n\n/**\n * Resolved configuration with defaults applied\n */\nexport interface ResolvedWooConfig {\n  readonly baseURL: string;\n  readonly consumerKey: string;\n  readonly consumerSecret: string;\n  readonly version: string;\n  readonly environment: Environment;\n  readonly cache: CacheConfig;\n  readonly auth: JWTConfig;\n  readonly http: HttpConfig;\n  readonly search: SearchConfig;\n  readonly advancedSearch: AdvancedSearchConfig;\n  readonly analytics: AnalyticsConfig;\n  readonly i18n: I18nConfig;\n  readonly debug: DebugConfig;\n  readonly cart: CartConfig;\n  readonly userSync: UserSyncConfig;\n  readonly checkout: CheckoutConfig;\n}\n\n/**\n * Default configuration values\n */\nexport const DEFAULT_CONFIG: Omit<ResolvedWooConfig, 'baseURL' | 'consumerKey' | 'consumerSecret'> = {\n  version: 'wc/v3',\n  environment: 'production',\n  cache: {\n    enabled: true,\n    ttl: 300000, // 5 minutes\n    storage: 'localStorage',\n    maxSize: 50, // 50MB\n    prefix: 'woo-headless'\n  },\n  auth: {\n    enabled: false,\n    expiresIn: 3600, // 1 hour\n    autoRefresh: true,\n    refreshThreshold: 300 // 5 minutes\n  },\n  http: {\n    timeout: 30000, // 30 seconds\n    retries: 3,\n    retryDelay: 1000, // 1 second\n    maxRetryDelay: 10000, // 10 seconds\n    retryCondition: (error: unknown) => {\n      // Retry on network errors and 5xx status codes\n      return error instanceof Error && (\n        error.message.includes('network') ||\n        error.message.includes('timeout') ||\n        error.message.includes('5')\n      );\n    }\n  },\n  search: {\n    fuzzyThreshold: 0.3,\n    maxResults: 50,\n    enableHighlight: true,\n    enableSuggestions: true,\n    cacheResults: true,\n    enableAnalytics: false\n  },\n  advancedSearch: {\n    fuzzy: {\n      enabled: true,\n      threshold: 0.3,\n      distance: 100,\n      minMatchCharLength: 1,\n      includeScore: true\n    },\n    highlighting: {\n      enabled: true,\n      preTag: '<mark>',\n      postTag: '</mark>',\n      fragmentSize: 150,\n      maxFragments: 3\n    },\n    suggestions: {\n      enabled: true,\n      maxSuggestions: 10,\n      minQueryLength: 2,\n      showPopular: true,\n      showRecent: true\n    },\n    facets: {\n      enabled: true,\n      maxFacets: 10,\n      maxFacetValues: 20,\n      minDocumentCount: 1\n    },\n    analytics: {\n      enabled: false,\n      trackQueries: true,\n      trackFilters: true,\n      trackClicks: true,\n      trackConversions: false,\n      sessionTimeout: 30\n    },\n    caching: {\n      enabled: true,\n      ttl: 300000, // 5 minutes\n      maxCacheSize: 100,\n      cacheKey: 'woo-search'\n    },\n    performance: {\n      maxResults: 1000,\n      searchTimeout: 5000, // 5 seconds\n      debounceDelay: 300, // 300ms\n      prefetchResults: false\n    }\n  },\n  analytics: {\n    enabled: false,\n    trackPageViews: false,\n    trackSearches: false,\n    trackConversions: false\n  },\n  i18n: {\n    locale: 'en-US',\n    currency: 'USD',\n    timezone: 'UTC',\n    dateFormat: 'YYYY-MM-DD',\n    numberFormat: {\n      style: 'decimal',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }\n  },\n  debug: {\n    enabled: false,\n    logLevel: 'error',\n    performanceMonitoring: false,\n    errorReporting: false,\n    apiLogging: false\n  },\n  cart: {\n    persistence: {\n      strategy: 'localStorage',\n      key: 'woo-headless-cart',\n      encryption: false,\n      expirationDays: 30,\n      syncToServer: false\n    },\n    sync: {\n      enabled: false,\n      strategy: 'merge_smart',\n      syncIntervalMs: 30000, // 30 seconds\n      conflictResolution: 'merge_smart',\n      maxRetries: 3,\n      retryDelayMs: 1000, // 1 second\n      syncOnAuth: true,\n      syncOnCartChange: false, // Avoid excessive syncing\n      backgroundSync: true,\n      offlineQueueSize: 50\n    },\n    autoCalculateTotals: true,\n    validateStock: true,\n    allowBackorders: false,\n    sessionTimeout: 60, // 60 minutes\n    maxItems: 100,\n    maxQuantityPerItem: 999,\n    enableCoupons: true,\n    enableShipping: true,\n    enableFees: true,\n    enableCrossSells: true,\n    taxCalculation: {\n      enabled: true,\n      pricesIncludeTax: false,\n      displayMode: 'excl',\n      roundAtSubtotal: false\n    }\n  },\n  userSync: {\n    enabled: false,\n    syncInterval: 300, // 5 minutes\n    syncOnLogin: true,\n    syncProfile: true,\n    syncAddresses: true,\n    syncPreferences: true,\n    syncOrderHistory: true,\n    syncWishlist: true,\n    maxOrderHistory: 50,\n    cacheUserData: true,\n    cacheTtl: 1800000 // 30 minutes\n  },\n  checkout: {\n    address: {\n      firstName: true,\n      lastName: true,\n      company: false,\n      address1: true,\n      address2: false,\n      city: true,\n      state: true,\n      postcode: true,\n      country: true,\n      email: true,\n      phone: false\n    },\n    shipping: {\n      enabled: true,\n      calculateTax: true,\n      defaultCountry: 'US',\n      restrictedCountries: [],\n      cacheTimeout: 15\n    },\n    payment: {\n      enabled: true,\n      testMode: true,\n      supportedMethods: ['stripe', 'paypal', 'bank_transfer', 'cash_on_delivery'],\n      minimumAmount: 1,\n      currency: 'USD',\n      returnUrl: '/checkout/payment/return',\n      cancelUrl: '/checkout/payment/cancel',\n      cacheTimeout: 10\n    },\n    flow: {\n      steps: ['billing_address', 'shipping_method', 'payment_method', 'order_review'],\n      allowSkipOptional: false,\n      persistSession: true,\n      sessionTimeout: 30,\n      autoAdvance: false,\n      validationRules: {\n        requireShippingAddress: true,\n        requireBillingAddress: true,\n        requirePhoneNumber: false,\n        requireCompanyName: false,\n        allowGuestCheckout: true,\n        minimumOrderAmount: 0,\n        restrictedCountries: [],\n        requiredFields: []\n      }\n    },\n    order: {\n      autoUpdateInventory: true,\n      sendConfirmationEmail: true,\n      requirePaymentConfirmation: true,\n      orderNumberPrefix: 'WOO-',\n      defaultStatus: 'pending',\n      inventoryHoldMinutes: 15,\n      cacheTimeout: 30\n    },\n    validation: {\n      requireShippingAddress: true,\n      requireBillingAddress: true,\n      requirePhoneNumber: false,\n      requireCompanyName: false,\n      allowGuestCheckout: true,\n      minimumOrderAmount: 0,\n      restrictedCountries: [],\n      requiredFields: []\n    }\n  }\n} as const;\n\n/**\n * Pagination configuration\n */\nexport interface PaginationConfig {\n  readonly page: number;\n  readonly limit: number;\n  readonly offset?: number;\n}\n\n/**\n * Sorting configuration\n */\nexport interface SortConfig {\n  readonly field: string;\n  readonly direction: 'asc' | 'desc';\n}\n\n/**\n * Filter operators for advanced search\n */\nexport type FilterOperator = \n  | 'eq' // equals\n  | 'ne' // not equals\n  | 'gt' // greater than\n  | 'gte' // greater than or equal\n  | 'lt' // less than\n  | 'lte' // less than or equal\n  | 'in' // in array\n  | 'nin' // not in array\n  | 'contains' // string contains\n  | 'startswith' // string starts with\n  | 'endswith'; // string ends with\n\n/**\n * Generic filter interface\n */\nexport interface Filter {\n  readonly field: string;\n  readonly operator: FilterOperator;\n  readonly value: unknown;\n}\n\n/**\n * Search operators configuration\n */\nexport interface SearchOperators {\n  readonly logic: 'AND' | 'OR' | 'NOT';\n  readonly fuzzy: boolean;\n  readonly stemming: boolean;\n  readonly synonyms: boolean;\n}\n\n/**\n * Configuration validation functions\n */\nexport function validateBaseURL(url: string): boolean {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function validateConsumerCredentials(key: string, secret: string): boolean {\n  return key.trim().length > 0 && secret.trim().length > 0;\n}\n\nexport function validateCacheConfig(config: Partial<CacheConfig>): boolean {\n  if (config.ttl !== undefined && config.ttl < 0) {\n    return false;\n  }\n  if (config.maxSize !== undefined && config.maxSize <= 0) {\n    return false;\n  }\n  return true;\n} ","/**\n * HTTP Client for WooCommerce API\n * Following the enhanced unified-10x-dev framework\n */\n\nimport { Result, Ok, Err } from '../types/result';\nimport { \n  WooError,\n  ErrorFactory \n} from '../types/errors';\nimport { HttpConfig, ResolvedWooConfig } from '../types/config';\n\n/**\n * HTTP methods enum\n */\nexport type HttpMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n\n/**\n * Request options interface\n */\nexport interface RequestOptions {\n  readonly method: HttpMethod;\n  readonly url: string;\n  readonly headers?: Record<string, string>;\n  readonly body?: unknown;\n  readonly timeout?: number;\n  readonly retries?: number;\n}\n\n/**\n * Response interface\n */\nexport interface Response<T> {\n  readonly data: T;\n  readonly status: number;\n  readonly statusText: string;\n  readonly headers: Record<string, string>;\n}\n\n/**\n * Request interceptor function type\n */\nexport type RequestInterceptor = (options: RequestOptions) => RequestOptions | Promise<RequestOptions>;\n\n/**\n * Response interceptor function type\n */\nexport type ResponseInterceptor = <T>(response: Response<T>) => Response<T> | Promise<Response<T>>;\n\n/**\n * Error interceptor function type\n */\nexport type ErrorInterceptor = (error: WooError) => WooError | Promise<WooError>;\n\n/**\n * HTTP Client class with comprehensive error handling\n */\nexport class HttpClient {\n  private readonly config: HttpConfig;\n  private readonly baseURL: string;\n  private readonly requestInterceptors: RequestInterceptor[] = [];\n  private readonly responseInterceptors: ResponseInterceptor[] = [];\n  private readonly errorInterceptors: ErrorInterceptor[] = [];\n  private readonly abortControllers: Map<string, AbortController> = new Map();\n\n  constructor(config: ResolvedWooConfig) {\n    this.config = config.http;\n    this.baseURL = `${config.baseURL}/wp-json/${config.version}`;\n  }\n\n  /**\n   * Add request interceptor\n   */\n  addRequestInterceptor(interceptor: RequestInterceptor): void {\n    this.requestInterceptors.push(interceptor);\n  }\n\n  /**\n   * Add response interceptor\n   */\n  addResponseInterceptor(interceptor: ResponseInterceptor): void {\n    this.responseInterceptors.push(interceptor);\n  }\n\n  /**\n   * Add error interceptor\n   */\n  addErrorInterceptor(interceptor: ErrorInterceptor): void {\n    this.errorInterceptors.push(interceptor);\n  }\n\n  /**\n   * Main request method with retry logic and error handling\n   */\n  async request<T>(options: RequestOptions): Promise<Result<Response<T>, WooError>> {\n    const requestId = this.generateRequestId();\n    \n    try {\n      // Apply request interceptors\n      let processedOptions = { ...options };\n      for (const interceptor of this.requestInterceptors) {\n        processedOptions = await interceptor(processedOptions);\n      }\n\n      // Attempt request with retry logic\n      const result = await this.attemptRequest<T>(processedOptions, requestId);\n      \n      if (result.success) {\n        // Apply response interceptors\n        let response = result.data;\n        for (const interceptor of this.responseInterceptors) {\n          response = await interceptor(response);\n        }\n        return Ok(response);\n      } else {\n        // Apply error interceptors\n        let error = result.error;\n        for (const interceptor of this.errorInterceptors) {\n          error = await interceptor(error);\n        }\n        return Err(error);\n      }\n    } catch (error) {\n      const wooError = this.createErrorFromException(error);\n      return Err(wooError);\n    } finally {\n      // Clean up abort controller\n      this.abortControllers.delete(requestId);\n    }\n  }\n\n  /**\n   * GET request\n   */\n  async get<T>(url: string, headers?: Record<string, string>): Promise<Result<Response<T>, WooError>> {\n    const options: RequestOptions = {\n      method: 'GET',\n      url\n    };\n    \n    if (headers !== undefined) {\n      (options as { headers: Record<string, string> }).headers = headers;\n    }\n    \n    return this.request<T>(options);\n  }\n\n  /**\n   * POST request\n   */\n  async post<T>(url: string, body?: unknown, headers?: Record<string, string>): Promise<Result<Response<T>, WooError>> {\n    const options: RequestOptions = {\n      method: 'POST',\n      url\n    };\n    \n    if (body !== undefined) {\n      (options as { body: unknown }).body = body;\n    }\n    \n    if (headers !== undefined) {\n      (options as { headers: Record<string, string> }).headers = headers;\n    }\n    \n    return this.request<T>(options);\n  }\n\n  /**\n   * PUT request\n   */\n  async put<T>(url: string, body?: unknown, headers?: Record<string, string>): Promise<Result<Response<T>, WooError>> {\n    const options: RequestOptions = {\n      method: 'PUT',\n      url\n    };\n    \n    if (body !== undefined) {\n      (options as { body: unknown }).body = body;\n    }\n    \n    if (headers !== undefined) {\n      (options as { headers: Record<string, string> }).headers = headers;\n    }\n    \n    return this.request<T>(options);\n  }\n\n  /**\n   * PATCH request\n   */\n  async patch<T>(url: string, body?: unknown, headers?: Record<string, string>): Promise<Result<Response<T>, WooError>> {\n    const options: RequestOptions = {\n      method: 'PATCH',\n      url\n    };\n    \n    if (body !== undefined) {\n      (options as { body: unknown }).body = body;\n    }\n    \n    if (headers !== undefined) {\n      (options as { headers: Record<string, string> }).headers = headers;\n    }\n    \n    return this.request<T>(options);\n  }\n\n  /**\n   * DELETE request\n   */\n  async delete<T>(url: string, headers?: Record<string, string>): Promise<Result<Response<T>, WooError>> {\n    const options: RequestOptions = {\n      method: 'DELETE',\n      url\n    };\n    \n    if (headers !== undefined) {\n      (options as { headers: Record<string, string> }).headers = headers;\n    }\n    \n    return this.request<T>(options);\n  }\n\n  /**\n   * Cancel request by ID\n   */\n  cancelRequest(requestId: string): void {\n    const controller = this.abortControllers.get(requestId);\n    if (controller) {\n      controller.abort();\n      this.abortControllers.delete(requestId);\n    }\n  }\n\n  /**\n   * Cancel all pending requests\n   */\n  cancelAllRequests(): void {\n    for (const controller of this.abortControllers.values()) {\n      controller.abort();\n    }\n    this.abortControllers.clear();\n  }\n\n  /**\n   * Attempt request with retry logic\n   */\n  private async attemptRequest<T>(\n    options: RequestOptions, \n    requestId: string\n  ): Promise<Result<Response<T>, WooError>> {\n    const maxRetries = options.retries ?? this.config.retries;\n    let lastError: WooError | null = null;\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        const result = await this.executeRequest<T>(options, requestId);\n        \n        if (result.success) {\n          return result;\n        }\n\n        lastError = result.error;\n\n        // Check if error is retryable\n        if (!this.shouldRetry(lastError, attempt, maxRetries)) {\n          break;\n        }\n\n        // Wait before retry\n        if (attempt < maxRetries) {\n          await this.delay(this.calculateRetryDelay(attempt));\n        }\n      } catch (error) {\n        lastError = this.createErrorFromException(error);\n        \n        if (!this.shouldRetry(lastError, attempt, maxRetries)) {\n          break;\n        }\n\n        if (attempt < maxRetries) {\n          await this.delay(this.calculateRetryDelay(attempt));\n        }\n      }\n    }\n\n    return Err(lastError ?? ErrorFactory.networkError('Unknown error occurred'));\n  }\n\n  /**\n   * Execute single request\n   */\n  private async executeRequest<T>(\n    options: RequestOptions, \n    requestId: string\n  ): Promise<Result<Response<T>, WooError>> {\n    const abortController = new AbortController();\n    this.abortControllers.set(requestId, abortController);\n\n    const url = this.buildURL(options.url);\n    const timeout = options.timeout ?? this.config.timeout;\n\n    // Set up timeout\n    const timeoutId = setTimeout(() => {\n      abortController.abort();\n    }, timeout);\n\n         try {\n       const fetchOptions: RequestInit = {\n         method: options.method,\n         headers: this.buildHeaders(options.headers),\n         signal: abortController.signal\n       };\n       \n       const body = this.buildBody(options.body);\n       if (body !== undefined) {\n         fetchOptions.body = body;\n       }\n\n      const response = await fetch(url, fetchOptions);\n      clearTimeout(timeoutId);\n\n      // Handle HTTP errors\n      if (!response.ok) {\n        return Err(await this.createErrorFromResponse(response));\n      }\n\n      // Parse response\n      const data = await this.parseResponse<T>(response);\n      const responseHeaders = this.extractHeaders(response);\n\n      return Ok({\n        data,\n        status: response.status,\n        statusText: response.statusText,\n        headers: responseHeaders\n      });\n\n    } catch (error) {\n      clearTimeout(timeoutId);\n      \n      if (abortController.signal.aborted) {\n        return Err(ErrorFactory.timeoutError('Request timeout', timeout));\n      }\n\n      return Err(this.createErrorFromException(error));\n    }\n  }\n\n  /**\n   * Build full URL\n   */\n  private buildURL(path: string): string {\n    const cleanPath = path.startsWith('/') ? path.slice(1) : path;\n    return `${this.baseURL}/${cleanPath}`;\n  }\n\n  /**\n   * Build request headers\n   */\n  private buildHeaders(headers?: Record<string, string>): Record<string, string> {\n    const defaultHeaders = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'User-Agent': 'WooHeadless-SDK/1.0.0',\n      ...this.config.headers\n    };\n\n    return { ...defaultHeaders, ...headers };\n  }\n\n  /**\n   * Build request body\n   */\n  private buildBody(body?: unknown): string | undefined {\n    if (!body) return undefined;\n    \n    if (typeof body === 'string') {\n      return body;\n    }\n\n    return JSON.stringify(body);\n  }\n\n  /**\n   * Parse response based on content type\n   */\n  private async parseResponse<T>(response: globalThis.Response): Promise<T> {\n    const contentType = response.headers.get('content-type') || '';\n\n    if (contentType.includes('application/json')) {\n      return response.json() as Promise<T>;\n    }\n\n    if (contentType.includes('text/')) {\n      return response.text() as Promise<T>;\n    }\n\n    // Default to JSON\n    return response.json() as Promise<T>;\n  }\n\n  /**\n   * Extract headers from response\n   */\n  private extractHeaders(response: globalThis.Response): Record<string, string> {\n    const headers: Record<string, string> = {};\n    response.headers.forEach((value, key) => {\n      headers[key] = value;\n    });\n    return headers;\n  }\n\n  /**\n   * Create error from HTTP response\n   */\n  private async createErrorFromResponse(response: globalThis.Response): Promise<WooError> {\n    const status = response.status;\n    const statusText = response.statusText;\n\n    // Handle rate limiting\n    if (status === 429) {\n      const retryAfter = response.headers.get('retry-after');\n      return ErrorFactory.rateLimitError(\n        'Rate limit exceeded',\n        retryAfter ? parseInt(retryAfter) : undefined\n      );\n    }\n\n    // Handle authentication errors\n    if (status === 401 || status === 403) {\n      return ErrorFactory.authError(`Authentication failed: ${statusText}`, undefined, status);\n    }\n\n    // Try to get error details from response body\n    let details: unknown;\n    try {\n      details = await response.json();\n    } catch {\n      details = await response.text();\n    }\n\n    return ErrorFactory.apiError(`HTTP ${status}: ${statusText}`, status, details);\n  }\n\n  /**\n   * Create error from exception\n   */\n  private createErrorFromException(error: unknown): WooError {\n    if (error instanceof Error) {\n      if (error.name === 'AbortError') {\n        return ErrorFactory.timeoutError('Request was aborted', this.config.timeout);\n      }\n\n      if (error.message.includes('network') || error.message.includes('fetch')) {\n        return ErrorFactory.networkError(error.message);\n      }\n    }\n\n    return ErrorFactory.networkError(\n      error instanceof Error ? error.message : 'Unknown network error'\n    );\n  }\n\n  /**\n   * Check if error should trigger retry\n   */\n  private shouldRetry(error: WooError, attempt: number, maxRetries: number): boolean {\n    if (attempt >= maxRetries) {\n      return false;\n    }\n\n    // Use custom retry condition if provided\n    if (this.config.retryCondition) {\n      return this.config.retryCondition(error);\n    }\n\n    // Default retry logic\n    return error.retryable === true;\n  }\n\n  /**\n   * Calculate retry delay with exponential backoff\n   */\n  private calculateRetryDelay(attempt: number): number {\n    const baseDelay = this.config.retryDelay;\n    const exponentialDelay = baseDelay * Math.pow(2, attempt);\n    const jitteredDelay = exponentialDelay + Math.random() * 1000; // Add jitter\n    \n    return Math.min(jitteredDelay, this.config.maxRetryDelay);\n  }\n\n  /**\n   * Delay helper\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Generate unique request ID\n   */\n  private generateRequestId(): string {\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n} ","/**\n * Authentication system for WooCommerce Headless SDK\n * Following the enhanced unified-10x-dev framework\n */\n\nimport { Result, Ok, Err } from '../types/result';\nimport { WooError, ErrorFactory } from '../types/errors';\nimport { JWTConfig, ResolvedWooConfig } from '../types/config';\n\n/**\n * JWT Token interface\n */\nexport interface JWTToken {\n  readonly token: string;\n  readonly refreshToken?: string;\n  readonly expiresAt: Date;\n  readonly issuedAt: Date;\n}\n\n/**\n * User credentials interface\n */\nexport interface UserCredentials {\n  readonly email: string;\n  readonly password: string;\n}\n\n/**\n * User registration data\n */\nexport interface UserRegistration {\n  readonly email: string;\n  readonly password: string;\n  readonly firstName: string;\n  readonly lastName: string;\n  readonly username?: string;\n}\n\n/**\n * Authentication response from WooCommerce\n */\nexport interface AuthResponse {\n  readonly success: boolean;\n  readonly data: {\n    readonly token: string;\n    readonly user_email: string;\n    readonly user_nicename: string;\n    readonly user_display_name: string;\n    readonly expires: number;\n  };\n}\n\n/**\n * Storage interface for tokens\n */\nexport interface TokenStorage {\n  get(key: string): Promise<string | null>;\n  set(key: string, value: string): Promise<void>;\n  remove(key: string): Promise<void>;\n  clear(): Promise<void>;\n}\n\n/**\n * LocalStorage implementation\n */\nexport class LocalTokenStorage implements TokenStorage {\n  private readonly prefix: string;\n\n  constructor(prefix = 'woo-headless') {\n    this.prefix = prefix;\n  }\n\n  async get(key: string): Promise<string | null> {\n    try {\n      return localStorage.getItem(`${this.prefix}:${key}`);\n    } catch {\n      return null;\n    }\n  }\n\n  async set(key: string, value: string): Promise<void> {\n    try {\n      localStorage.setItem(`${this.prefix}:${key}`, value);\n    } catch {\n      // Silently fail if localStorage is not available\n    }\n  }\n\n  async remove(key: string): Promise<void> {\n    try {\n      localStorage.removeItem(`${this.prefix}:${key}`);\n    } catch {\n      // Silently fail\n    }\n  }\n\n  async clear(): Promise<void> {\n    try {\n      const keys = Object.keys(localStorage);\n      for (const key of keys) {\n        if (key.startsWith(`${this.prefix}:`)) {\n          localStorage.removeItem(key);\n        }\n      }\n    } catch {\n      // Silently fail\n    }\n  }\n}\n\n/**\n * SessionStorage implementation\n */\nexport class SessionTokenStorage implements TokenStorage {\n  private readonly prefix: string;\n\n  constructor(prefix = 'woo-headless') {\n    this.prefix = prefix;\n  }\n\n  async get(key: string): Promise<string | null> {\n    try {\n      return sessionStorage.getItem(`${this.prefix}:${key}`);\n    } catch {\n      return null;\n    }\n  }\n\n  async set(key: string, value: string): Promise<void> {\n    try {\n      sessionStorage.setItem(`${this.prefix}:${key}`, value);\n    } catch {\n      // Silently fail\n    }\n  }\n\n  async remove(key: string): Promise<void> {\n    try {\n      sessionStorage.removeItem(`${this.prefix}:${key}`);\n    } catch {\n      // Silently fail\n    }\n  }\n\n  async clear(): Promise<void> {\n    try {\n      const keys = Object.keys(sessionStorage);\n      for (const key of keys) {\n        if (key.startsWith(`${this.prefix}:`)) {\n          sessionStorage.removeItem(key);\n        }\n      }\n    } catch {\n      // Silently fail\n    }\n  }\n}\n\n/**\n * Memory storage implementation (for server-side or private contexts)\n */\nexport class MemoryTokenStorage implements TokenStorage {\n  private readonly store = new Map<string, string>();\n  private readonly prefix: string;\n\n  constructor(prefix = 'woo-headless') {\n    this.prefix = prefix;\n  }\n\n  async get(key: string): Promise<string | null> {\n    return this.store.get(`${this.prefix}:${key}`) ?? null;\n  }\n\n  async set(key: string, value: string): Promise<void> {\n    this.store.set(`${this.prefix}:${key}`, value);\n  }\n\n  async remove(key: string): Promise<void> {\n    this.store.delete(`${this.prefix}:${key}`);\n  }\n\n  async clear(): Promise<void> {\n    const keys = Array.from(this.store.keys());\n    for (const key of keys) {\n      if (key.startsWith(`${this.prefix}:`)) {\n        this.store.delete(key);\n      }\n    }\n  }\n}\n\n/**\n * Authentication manager\n */\nexport class AuthManager {\n  private readonly config: JWTConfig;\n  private readonly storage: TokenStorage;\n  private currentToken: JWTToken | null = null;\n  private refreshTimer: ReturnType<typeof setTimeout> | null = null;\n\n  constructor(\n    config: ResolvedWooConfig,\n    storage?: TokenStorage\n  ) {\n    this.config = config.auth;\n    \n    // Choose storage based on environment\n    if (storage) {\n      this.storage = storage;\n    } else if (typeof window !== 'undefined') {\n      this.storage = new LocalTokenStorage(config.cache.prefix);\n    } else {\n      this.storage = new MemoryTokenStorage(config.cache.prefix);\n    }\n\n    // Initialize existing token if available\n    this.initializeToken();\n  }\n\n  /**\n   * Initialize token from storage\n   */\n  private async initializeToken(): Promise<void> {\n    try {\n      const tokenData = await this.storage.get('token');\n      if (tokenData) {\n        const parsed = JSON.parse(tokenData) as JWTToken;\n        if (this.isTokenValid(parsed)) {\n          this.currentToken = parsed;\n          this.scheduleRefresh();\n        } else {\n          await this.clearToken();\n        }\n      }\n    } catch {\n      // Invalid token data, clear it\n      await this.clearToken();\n    }\n  }\n\n  /**\n   * Set authentication token\n   */\n  async setToken(tokenData: JWTToken): Promise<void> {\n    this.currentToken = tokenData;\n    await this.storage.set('token', JSON.stringify(tokenData));\n    this.scheduleRefresh();\n  }\n\n  /**\n   * Get current token\n   */\n  getToken(): string | null {\n    if (this.currentToken && this.isTokenValid(this.currentToken)) {\n      return this.currentToken.token;\n    }\n    return null;\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated(): boolean {\n    return this.getToken() !== null;\n  }\n\n  /**\n   * Validate token\n   */\n  async validateToken(): Promise<Result<boolean, WooError>> {\n    if (!this.currentToken) {\n      return Ok(false);\n    }\n\n    if (!this.isTokenValid(this.currentToken)) {\n      await this.clearToken();\n      return Ok(false);\n    }\n\n    return Ok(true);\n  }\n\n  /**\n   * Clear authentication token\n   */\n  async clearToken(): Promise<void> {\n    this.currentToken = null;\n    await this.storage.remove('token');\n    this.clearRefreshTimer();\n  }\n\n  /**\n   * Logout\n   */\n  async logout(): Promise<Result<void, WooError>> {\n    await this.clearToken();\n    return Ok(undefined);\n  }\n\n  /**\n   * Create JWT token from auth response\n   */\n  createTokenFromAuthResponse(authResponse: AuthResponse): Result<JWTToken, WooError> {\n    if (!authResponse.success || !authResponse.data.token) {\n      return Err(ErrorFactory.authError('Invalid authentication response'));\n    }\n\n    const now = new Date();\n    const expiresAt = new Date(authResponse.data.expires * 1000);\n\n    const token: JWTToken = {\n      token: authResponse.data.token,\n      expiresAt,\n      issuedAt: now\n    };\n\n    return Ok(token);\n  }\n\n  /**\n   * Get authorization header\n   */\n  getAuthorizationHeader(): Record<string, string> | undefined {\n    const token = this.getToken();\n    if (!token) {\n      return undefined;\n    }\n\n    return {\n      'Authorization': `Bearer ${token}`\n    };\n  }\n\n  /**\n   * Schedule token refresh\n   */\n  private scheduleRefresh(): void {\n    this.clearRefreshTimer();\n\n    if (!this.config.autoRefresh || !this.currentToken) {\n      return;\n    }\n\n    const refreshThreshold = this.config.refreshThreshold ?? 300; // 5 minutes default\n    const refreshTime = this.currentToken.expiresAt.getTime() - Date.now() - (refreshThreshold * 1000);\n\n    if (refreshTime > 0) {\n      this.refreshTimer = setTimeout(() => {\n        this.handleTokenRefresh();\n      }, refreshTime);\n    }\n  }\n\n  /**\n   * Handle token refresh\n   */\n  private async handleTokenRefresh(): Promise<void> {\n    // Token refresh would typically require a refresh endpoint\n    // For now, we'll clear the token to force re-authentication\n    await this.clearToken();\n  }\n\n  /**\n   * Clear refresh timer\n   */\n  private clearRefreshTimer(): void {\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n      this.refreshTimer = null;\n    }\n  }\n\n  /**\n   * Check if token is valid (not expired)\n   */\n  private isTokenValid(token: JWTToken): boolean {\n    return token.expiresAt.getTime() > Date.now();\n  }\n\n  /**\n   * Generate basic auth header for consumer key/secret\n   */\n  static generateBasicAuth(consumerKey: string, consumerSecret: string): string {\n    const credentials = `${consumerKey}:${consumerSecret}`;\n    return `Basic ${btoa(credentials)}`;\n  }\n\n  /**\n   * Create OAuth signature for WooCommerce REST API\n   */\n  static createOAuthSignature(\n    consumerKey: string,\n    consumerSecret: string,\n    url: string,\n    method: string,\n    parameters: Record<string, string> = {}\n  ): Record<string, string> {\n    const timestamp = Math.floor(Date.now() / 1000).toString();\n    const nonce = Math.random().toString(36).substring(2, 15);\n\n    const oauthParams = {\n      oauth_consumer_key: consumerKey,\n      oauth_nonce: nonce,\n      oauth_signature_method: 'HMAC-SHA1',\n      oauth_timestamp: timestamp,\n      oauth_version: '1.0',\n      ...parameters\n    };\n\n    // Sort parameters\n    const sortedParams = Object.keys(oauthParams)\n      .sort()\n      .map(key => {\n        const value = (oauthParams as Record<string, string>)[key];\n        return `${key}=${encodeURIComponent(value ?? '')}`;\n      })\n      .join('&');\n\n    // Create signature base string\n    const signatureBase = `${method.toUpperCase()}&${encodeURIComponent(url)}&${encodeURIComponent(sortedParams)}`;\n\n    // Create signing key\n    const signingKey = `${encodeURIComponent(consumerSecret)}&`;\n\n    // This is a simplified version - in production, you'd use a proper HMAC-SHA1 implementation\n    const signature = btoa(signatureBase + signingKey);\n\n    return {\n      ...oauthParams,\n      oauth_signature: signature\n    };\n  }\n} ","/**\n * Configuration manager for WooCommerce Headless SDK\n * Following the enhanced unified-10x-dev framework\n */\n\nimport { \n  WooConfig, \n  ResolvedWooConfig, \n  DEFAULT_CONFIG,\n  validateBaseURL,\n  validateConsumerCredentials,\n  validateCacheConfig\n} from '../types/config';\nimport { Result, Ok, Err } from '../types/result';\nimport { ConfigurationError, ErrorFactory } from '../types/errors';\n\n/**\n * Configuration manager class\n */\nexport class ConfigManager {\n  /**\n   * Resolve configuration with defaults and validation\n   */\n  static resolveConfig(config: WooConfig): Result<ResolvedWooConfig, ConfigurationError> {\n    // Validate required fields\n    const validation = this.validateConfig(config);\n    if (!validation.success) {\n      return validation;\n    }\n\n    // Merge with defaults\n    const resolvedConfig: ResolvedWooConfig = {\n      baseURL: config.baseURL,\n      consumerKey: config.consumerKey,\n      consumerSecret: config.consumerSecret,\n      version: config.version ?? DEFAULT_CONFIG.version,\n      environment: config.environment ?? DEFAULT_CONFIG.environment,\n      cache: {\n        ...DEFAULT_CONFIG.cache,\n        ...config.cache\n      },\n      auth: {\n        ...DEFAULT_CONFIG.auth,\n        ...config.auth\n      },\n      http: {\n        ...DEFAULT_CONFIG.http,\n        ...config.http\n      },\n      search: {\n        ...DEFAULT_CONFIG.search,\n        ...config.search\n      },\n      analytics: {\n        ...DEFAULT_CONFIG.analytics,\n        ...config.analytics\n      },\n      i18n: {\n        ...DEFAULT_CONFIG.i18n,\n        ...config.i18n\n      },\n      debug: {\n        ...DEFAULT_CONFIG.debug,\n        ...config.debug\n      },\n      advancedSearch: {\n        ...DEFAULT_CONFIG.advancedSearch,\n        ...config.advancedSearch\n      },\n      cart: {\n        ...DEFAULT_CONFIG.cart,\n        ...config.cart\n      },\n      userSync: {\n        ...DEFAULT_CONFIG.userSync,\n        ...config.userSync\n      },\n      checkout: {\n        ...DEFAULT_CONFIG.checkout,\n        ...config.checkout\n      }\n    };\n\n    return Ok(resolvedConfig);\n  }\n\n  /**\n   * Validate configuration\n   */\n  static validateConfig(config: WooConfig): Result<void, ConfigurationError> {\n    // Validate base URL\n    if (!validateBaseURL(config.baseURL)) {\n      return Err(ErrorFactory.configurationError(\n        'Invalid baseURL. Must be a valid URL.',\n        { baseURL: config.baseURL }\n      ));\n    }\n\n    // Validate consumer credentials\n    if (!validateConsumerCredentials(config.consumerKey, config.consumerSecret)) {\n      return Err(ErrorFactory.configurationError(\n        'Invalid consumer credentials. Both consumerKey and consumerSecret are required.',\n        { \n          hasConsumerKey: Boolean(config.consumerKey?.trim()),\n          hasConsumerSecret: Boolean(config.consumerSecret?.trim())\n        }\n      ));\n    }\n\n    // Validate cache config if provided\n    if (config.cache && !validateCacheConfig(config.cache)) {\n      return Err(ErrorFactory.configurationError(\n        'Invalid cache configuration.',\n        { cache: config.cache }\n      ));\n    }\n\n    // Validate search config\n    if (config.search?.fuzzyThreshold !== undefined) {\n      if (config.search.fuzzyThreshold < 0 || config.search.fuzzyThreshold > 1) {\n        return Err(ErrorFactory.configurationError(\n          'Search fuzzyThreshold must be between 0 and 1.',\n          { fuzzyThreshold: config.search.fuzzyThreshold }\n        ));\n      }\n    }\n\n    if (config.search?.maxResults !== undefined) {\n      if (config.search.maxResults <= 0) {\n        return Err(ErrorFactory.configurationError(\n          'Search maxResults must be greater than 0.',\n          { maxResults: config.search.maxResults }\n        ));\n      }\n    }\n\n    // Validate HTTP config\n    if (config.http?.timeout !== undefined && config.http.timeout <= 0) {\n      return Err(ErrorFactory.configurationError(\n        'HTTP timeout must be greater than 0.',\n        { timeout: config.http.timeout }\n      ));\n    }\n\n    if (config.http?.retries !== undefined && config.http.retries < 0) {\n      return Err(ErrorFactory.configurationError(\n        'HTTP retries must be 0 or greater.',\n        { retries: config.http.retries }\n      ));\n    }\n\n    // Validate auth config\n    if (config.auth?.expiresIn !== undefined && config.auth.expiresIn <= 0) {\n      return Err(ErrorFactory.configurationError(\n        'Auth expiresIn must be greater than 0.',\n        { expiresIn: config.auth.expiresIn }\n      ));\n    }\n\n    return Ok(undefined);\n  }\n\n  /**\n   * Get environment-specific configuration\n   */\n  static getEnvironmentConfig(environment: string): Partial<WooConfig> {\n    switch (environment) {\n      case 'development':\n        return {\n          debug: {\n            enabled: true,\n            logLevel: 'debug',\n            performanceMonitoring: true,\n            errorReporting: true,\n            apiLogging: true\n          },\n          http: {\n            timeout: 60000, // Longer timeout for development\n            retries: 1 // Fewer retries for faster debugging\n          }\n        };\n        \n      case 'staging':\n        return {\n          debug: {\n            enabled: true,\n            logLevel: 'info',\n            performanceMonitoring: true,\n            errorReporting: true,\n            apiLogging: false\n          },\n          analytics: {\n            enabled: true,\n            trackPageViews: true,\n            trackSearches: true,\n            trackConversions: true\n          }\n        };\n        \n      case 'production':\n        return {\n          debug: {\n            enabled: false,\n            logLevel: 'error',\n            performanceMonitoring: true,\n            errorReporting: true,\n            apiLogging: false\n          },\n          analytics: {\n            enabled: true,\n            trackPageViews: true,\n            trackSearches: true,\n            trackConversions: true\n          },\n          cache: {\n            enabled: true,\n            ttl: 300000 // 5 minutes in production\n          }\n        };\n        \n      default:\n        return {};\n    }\n  }\n\n  /**\n   * Create configuration from environment variables\n   */\n  static fromEnvironment(): Partial<WooConfig> {\n    // Return empty config in browser environment\n    try {\n      // This will throw in browser environments\n      const processExists = typeof process !== 'undefined' && process.env;\n      if (!processExists) {\n        return {};\n      }\n\n      const env = process.env;\n      const config: Record<string, unknown> = {};\n\n      if (env.WOO_BASE_URL) {\n        config.baseURL = env.WOO_BASE_URL;\n      }\n\n      if (env.WOO_CONSUMER_KEY) {\n        config.consumerKey = env.WOO_CONSUMER_KEY;\n      }\n\n      if (env.WOO_CONSUMER_SECRET) {\n        config.consumerSecret = env.WOO_CONSUMER_SECRET;\n      }\n\n      if (env.WOO_VERSION) {\n        config.version = env.WOO_VERSION;\n      }\n\n      if (env.NODE_ENV) {\n        config.environment = env.NODE_ENV;\n        \n        // Apply environment-specific config\n        const envConfig = this.getEnvironmentConfig(env.NODE_ENV);\n        Object.assign(config, envConfig);\n      }\n\n      return config as Partial<WooConfig>;\n    } catch {\n      // If process is not available, return empty config\n      return {};\n    }\n  }\n\n  /**\n   * Merge multiple configurations\n   */\n  static mergeConfigs(...configs: Partial<WooConfig>[]): Partial<WooConfig> {\n    const merged: Record<string, unknown> = {};\n\n    for (const config of configs) {\n      Object.assign(merged, config);\n      \n      // Deep merge nested objects\n      if (config.cache && (merged.cache as unknown)) {\n        merged.cache = { ...(merged.cache as object), ...config.cache };\n      }\n      \n      if (config.auth && (merged.auth as unknown)) {\n        merged.auth = { ...(merged.auth as object), ...config.auth };\n      }\n      \n      if (config.http && (merged.http as unknown)) {\n        merged.http = { ...(merged.http as object), ...config.http };\n      }\n      \n      if (config.search && (merged.search as unknown)) {\n        merged.search = { ...(merged.search as object), ...config.search };\n      }\n      \n      if (config.analytics && (merged.analytics as unknown)) {\n        merged.analytics = { ...(merged.analytics as object), ...config.analytics };\n      }\n      \n      if (config.i18n && (merged.i18n as unknown)) {\n        merged.i18n = { ...(merged.i18n as object), ...config.i18n };\n      }\n      \n      if (config.debug && (merged.debug as unknown)) {\n        merged.debug = { ...(merged.debug as object), ...config.debug };\n      }\n    }\n\n    return merged as Partial<WooConfig>;\n  }\n} ","/**\n * Multi-layer caching system for WooCommerce Headless SDK\n * Following the enhanced unified-10x-dev framework\n */\n\nimport { Result, Ok, Err } from '../types/result';\nimport { WooError, ErrorFactory } from '../types/errors';\nimport { CacheConfig } from '../types/config';\n\n/**\n * Cache entry interface with metadata\n */\nexport interface CacheEntry<T> {\n  readonly data: T;\n  readonly timestamp: number;\n  readonly ttl: number;\n  readonly key: string;\n}\n\n/**\n * Cache storage interface\n */\nexport interface CacheStorage {\n  get<T>(key: string): Promise<Result<T | null, WooError>>;\n  set<T>(key: string, value: T, ttl: number): Promise<Result<void, WooError>>;\n  delete(key: string): Promise<Result<void, WooError>>;\n  clear(): Promise<Result<void, WooError>>;\n  has(key: string): Promise<Result<boolean, WooError>>;\n  size(): Promise<Result<number, WooError>>;\n}\n\n/**\n * Memory cache implementation (L1)\n */\nexport class MemoryCache implements CacheStorage {\n  private readonly cache = new Map<string, CacheEntry<unknown>>();\n  private readonly maxSize: number;\n\n  constructor(maxSizeMB = 50) {\n    this.maxSize = maxSizeMB * 1024 * 1024; // Convert to bytes\n  }\n\n  async get<T>(key: string): Promise<Result<T | null, WooError>> {\n    try {\n      const entry = this.cache.get(key) as CacheEntry<T> | undefined;\n      \n      if (!entry) {\n        return Ok(null);\n      }\n\n      // Check if expired\n      if (Date.now() > entry.timestamp + entry.ttl) {\n        this.cache.delete(key);\n        return Ok(null);\n      }\n\n      return Ok(entry.data);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to get from memory cache', error));\n    }\n  }\n\n  async set<T>(key: string, value: T, ttl: number): Promise<Result<void, WooError>> {\n    try {\n      // Check size limit\n      const size = this.estimateSize(value);\n      if (size > this.maxSize) {\n        return Err(ErrorFactory.cacheError('Value too large for cache'));\n      }\n\n      // Evict old entries if needed\n      await this.evictIfNeeded(size);\n\n      const entry: CacheEntry<T> = {\n        data: value,\n        timestamp: Date.now(),\n        ttl,\n        key\n      };\n\n      this.cache.set(key, entry);\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to set in memory cache', error));\n    }\n  }\n\n  async delete(key: string): Promise<Result<void, WooError>> {\n    try {\n      this.cache.delete(key);\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to delete from memory cache', error));\n    }\n  }\n\n  async clear(): Promise<Result<void, WooError>> {\n    try {\n      this.cache.clear();\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to clear memory cache', error));\n    }\n  }\n\n  async has(key: string): Promise<Result<boolean, WooError>> {\n    try {\n      const result = await this.get(key);\n      return result.success ? Ok(result.data !== null) : result;\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to check memory cache', error));\n    }\n  }\n\n  async size(): Promise<Result<number, WooError>> {\n    try {\n      return Ok(this.cache.size);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to get memory cache size', error));\n    }\n  }\n\n  private estimateSize(value: unknown): number {\n    // Rough estimate of object size in bytes\n    return JSON.stringify(value).length * 2; // UTF-16 characters\n  }\n\n  private async evictIfNeeded(requiredSize: number): Promise<void> {\n    let currentSize = 0;\n    const entries = Array.from(this.cache.entries());\n\n    // Calculate current size\n    for (const [, entry] of entries) {\n      currentSize += this.estimateSize(entry.data);\n    }\n\n    // Evict oldest entries if needed (LRU)\n    if (currentSize + requiredSize > this.maxSize) {\n      const sortedEntries = entries.sort((a, b) => \n        (a[1] as CacheEntry<unknown>).timestamp - (b[1] as CacheEntry<unknown>).timestamp\n      );\n\n      for (const [key] of sortedEntries) {\n        this.cache.delete(key);\n        currentSize -= this.estimateSize(this.cache.get(key));\n        \n        if (currentSize + requiredSize <= this.maxSize) {\n          break;\n        }\n      }\n    }\n  }\n}\n\n/**\n * LocalStorage cache implementation (L2)\n */\nexport class LocalStorageCache implements CacheStorage {\n  private readonly prefix: string;\n  private readonly maxSize: number;\n\n  constructor(prefix = 'woo-cache', maxSizeMB = 10) {\n    this.prefix = prefix;\n    this.maxSize = maxSizeMB * 1024 * 1024;\n  }\n\n  async get<T>(key: string): Promise<Result<T | null, WooError>> {\n    try {\n      if (typeof window === 'undefined' || !window.localStorage) {\n        return Ok(null);\n      }\n\n      const item = localStorage.getItem(`${this.prefix}:${key}`);\n      if (!item) {\n        return Ok(null);\n      }\n\n      const entry = JSON.parse(item) as CacheEntry<T>;\n\n      // Check if expired\n      if (Date.now() > entry.timestamp + entry.ttl) {\n        localStorage.removeItem(`${this.prefix}:${key}`);\n        return Ok(null);\n      }\n\n      return Ok(entry.data);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to get from localStorage', error));\n    }\n  }\n\n  async set<T>(key: string, value: T, ttl: number): Promise<Result<void, WooError>> {\n    try {\n      if (typeof window === 'undefined' || !window.localStorage) {\n        return Ok(undefined);\n      }\n\n      const entry: CacheEntry<T> = {\n        data: value,\n        timestamp: Date.now(),\n        ttl,\n        key\n      };\n\n      const serialized = JSON.stringify(entry);\n      \n      // Check size limit\n      if (serialized.length > this.maxSize) {\n        return Err(ErrorFactory.cacheError('Value too large for localStorage'));\n      }\n\n      try {\n        localStorage.setItem(`${this.prefix}:${key}`, serialized);\n        return Ok(undefined);\n      } catch (e) {\n        // Handle quota exceeded\n        if (e instanceof Error && e.name === 'QuotaExceededError') {\n          await this.evictOldest();\n          localStorage.setItem(`${this.prefix}:${key}`, serialized);\n          return Ok(undefined);\n        }\n        throw e;\n      }\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to set in localStorage', error));\n    }\n  }\n\n  async delete(key: string): Promise<Result<void, WooError>> {\n    try {\n      if (typeof window === 'undefined' || !window.localStorage) {\n        return Ok(undefined);\n      }\n\n      localStorage.removeItem(`${this.prefix}:${key}`);\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to delete from localStorage', error));\n    }\n  }\n\n  async clear(): Promise<Result<void, WooError>> {\n    try {\n      if (typeof window === 'undefined' || !window.localStorage) {\n        return Ok(undefined);\n      }\n\n      const keys = Object.keys(localStorage);\n      for (const key of keys) {\n        if (key.startsWith(`${this.prefix}:`)) {\n          localStorage.removeItem(key);\n        }\n      }\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to clear localStorage', error));\n    }\n  }\n\n  async has(key: string): Promise<Result<boolean, WooError>> {\n    try {\n      if (typeof window === 'undefined' || !window.localStorage) {\n        return Ok(false);\n      }\n\n      return Ok(localStorage.getItem(`${this.prefix}:${key}`) !== null);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to check localStorage', error));\n    }\n  }\n\n  async size(): Promise<Result<number, WooError>> {\n    try {\n      if (typeof window === 'undefined' || !window.localStorage) {\n        return Ok(0);\n      }\n\n      let count = 0;\n      const keys = Object.keys(localStorage);\n      for (const key of keys) {\n        if (key.startsWith(`${this.prefix}:`)) {\n          count++;\n        }\n      }\n      return Ok(count);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to get localStorage size', error));\n    }\n  }\n\n  private async evictOldest(): Promise<void> {\n    const entries: Array<[string, CacheEntry<unknown>]> = [];\n    const keys = Object.keys(localStorage);\n\n    for (const key of keys) {\n      if (key.startsWith(`${this.prefix}:`)) {\n        try {\n          const item = localStorage.getItem(key);\n          if (item) {\n            entries.push([key, JSON.parse(item)]);\n          }\n        } catch {\n          // Skip invalid entries\n        }\n      }\n    }\n\n    // Sort by timestamp (oldest first)\n    entries.sort((a, b) => a[1].timestamp - b[1].timestamp);\n\n    // Remove oldest 25% of entries\n    const removeCount = Math.ceil(entries.length * 0.25);\n    for (let i = 0; i < removeCount && i < entries.length; i++) {\n      const entry = entries[i];\n      if (entry && entry[0]) {\n        localStorage.removeItem(entry[0]);\n      }\n    }\n  }\n}\n\n/**\n * IndexedDB cache implementation (L3)\n */\nexport class IndexedDBCache implements CacheStorage {\n  private readonly dbName: string;\n  private readonly storeName = 'cache';\n  private readonly version = 1;\n  private db: IDBDatabase | null = null;\n\n  constructor(dbName = 'woo-cache-db') {\n    this.dbName = dbName;\n  }\n\n  private async initDB(): Promise<Result<IDBDatabase, WooError>> {\n    try {\n      if (typeof window === 'undefined' || !window.indexedDB) {\n        return Err(ErrorFactory.cacheError('IndexedDB not available'));\n      }\n\n      if (this.db) {\n        return Ok(this.db);\n      }\n\n      return new Promise((resolve) => {\n        const request = indexedDB.open(this.dbName, this.version);\n\n        request.onerror = () => {\n          resolve(Err(ErrorFactory.cacheError('Failed to open IndexedDB')));\n        };\n\n        request.onsuccess = () => {\n          this.db = request.result;\n          resolve(Ok(request.result));\n        };\n\n        request.onupgradeneeded = (event) => {\n          const db = (event.target as IDBOpenDBRequest).result;\n          if (!db.objectStoreNames.contains(this.storeName)) {\n            db.createObjectStore(this.storeName, { keyPath: 'key' });\n          }\n        };\n      });\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to initialize IndexedDB', error));\n    }\n  }\n\n  async get<T>(key: string): Promise<Result<T | null, WooError>> {\n    try {\n      const dbResult = await this.initDB();\n      if (!dbResult.success) {\n        return Ok(null);\n      }\n\n      const db = dbResult.data;\n      const transaction = db.transaction([this.storeName], 'readonly');\n      const store = transaction.objectStore(this.storeName);\n\n      return new Promise((resolve) => {\n        const request = store.get(key);\n\n        request.onerror = () => {\n          resolve(Err(ErrorFactory.cacheError('Failed to get from IndexedDB')));\n        };\n\n        request.onsuccess = () => {\n          const entry = request.result as CacheEntry<T> | undefined;\n          \n          if (!entry) {\n            resolve(Ok(null));\n            return;\n          }\n\n          // Check if expired\n          if (Date.now() > entry.timestamp + entry.ttl) {\n            this.delete(key); // Clean up expired entry\n            resolve(Ok(null));\n            return;\n          }\n\n          resolve(Ok(entry.data));\n        };\n      });\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to get from IndexedDB', error));\n    }\n  }\n\n  async set<T>(key: string, value: T, ttl: number): Promise<Result<void, WooError>> {\n    try {\n      const dbResult = await this.initDB();\n      if (!dbResult.success) {\n        return dbResult;\n      }\n\n      const db = dbResult.data;\n      const transaction = db.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n\n      const entry: CacheEntry<T> = {\n        data: value,\n        timestamp: Date.now(),\n        ttl,\n        key\n      };\n\n      return new Promise((resolve) => {\n        const request = store.put(entry);\n\n        request.onerror = () => {\n          resolve(Err(ErrorFactory.cacheError('Failed to set in IndexedDB')));\n        };\n\n        request.onsuccess = () => {\n          resolve(Ok(undefined));\n        };\n      });\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to set in IndexedDB', error));\n    }\n  }\n\n  async delete(key: string): Promise<Result<void, WooError>> {\n    try {\n      const dbResult = await this.initDB();\n      if (!dbResult.success) {\n        return dbResult;\n      }\n\n      const db = dbResult.data;\n      const transaction = db.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n\n      return new Promise((resolve) => {\n        const request = store.delete(key);\n\n        request.onerror = () => {\n          resolve(Err(ErrorFactory.cacheError('Failed to delete from IndexedDB')));\n        };\n\n        request.onsuccess = () => {\n          resolve(Ok(undefined));\n        };\n      });\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to delete from IndexedDB', error));\n    }\n  }\n\n  async clear(): Promise<Result<void, WooError>> {\n    try {\n      const dbResult = await this.initDB();\n      if (!dbResult.success) {\n        return dbResult;\n      }\n\n      const db = dbResult.data;\n      const transaction = db.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n\n      return new Promise((resolve) => {\n        const request = store.clear();\n\n        request.onerror = () => {\n          resolve(Err(ErrorFactory.cacheError('Failed to clear IndexedDB')));\n        };\n\n        request.onsuccess = () => {\n          resolve(Ok(undefined));\n        };\n      });\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to clear IndexedDB', error));\n    }\n  }\n\n  async has(key: string): Promise<Result<boolean, WooError>> {\n    const result = await this.get(key);\n    return result.success ? Ok(result.data !== null) : result;\n  }\n\n  async size(): Promise<Result<number, WooError>> {\n    try {\n      const dbResult = await this.initDB();\n      if (!dbResult.success) {\n        return Ok(0);\n      }\n\n      const db = dbResult.data;\n      const transaction = db.transaction([this.storeName], 'readonly');\n      const store = transaction.objectStore(this.storeName);\n\n      return new Promise((resolve) => {\n        const request = store.count();\n\n        request.onerror = () => {\n          resolve(Err(ErrorFactory.cacheError('Failed to get IndexedDB size')));\n        };\n\n        request.onsuccess = () => {\n          resolve(Ok(request.result));\n        };\n      });\n    } catch (error) {\n      return Err(ErrorFactory.cacheError('Failed to get IndexedDB size', error));\n    }\n  }\n}\n\n/**\n * Multi-layer cache manager\n */\nexport class CacheManager {\n  private readonly layers: Map<string, CacheStorage> = new Map();\n  private readonly config: CacheConfig;\n\n  constructor(config: CacheConfig) {\n    this.config = config;\n    this.initializeLayers();\n  }\n\n  private initializeLayers(): void {\n    // Always include memory cache as L1\n    this.layers.set('memory', new MemoryCache(this.config.maxSize));\n\n    // Add persistent storage based on config\n    if (this.config.storage === 'localStorage') {\n      this.layers.set('localStorage', new LocalStorageCache(this.config.prefix, this.config.maxSize));\n    } else if (this.config.storage === 'sessionStorage') {\n      // SessionStorage implementation would be similar to LocalStorage\n      this.layers.set('localStorage', new LocalStorageCache(this.config.prefix, this.config.maxSize));\n    }\n\n    // Add IndexedDB for large data sets\n    if (typeof window !== 'undefined' && window.indexedDB) {\n      this.layers.set('indexedDB', new IndexedDBCache(this.config.prefix));\n    }\n  }\n\n  /**\n   * Get value from cache (checks all layers)\n   */\n  async get<T>(key: string): Promise<Result<T | null, WooError>> {\n    if (!this.config.enabled) {\n      return Ok(null);\n    }\n\n    // Check each layer in order\n    for (const [layerName, layer] of this.layers) {\n      const result = await layer.get<T>(key);\n      \n      if (result.success && result.data !== null) {\n        // Promote to higher layers\n        await this.promote(key, result.data, layerName);\n        return result;\n      }\n    }\n\n    return Ok(null);\n  }\n\n  /**\n   * Set value in cache (sets in all layers)\n   */\n  async set<T>(key: string, value: T, ttl?: number): Promise<Result<void, WooError>> {\n    if (!this.config.enabled) {\n      return Ok(undefined);\n    }\n\n    const finalTtl = ttl ?? this.config.ttl;\n    const errors: WooError[] = [];\n\n    // Set in all layers\n    for (const layer of this.layers.values()) {\n      const result = await layer.set(key, value, finalTtl);\n      if (!result.success) {\n        errors.push(result.error);\n      }\n    }\n\n    if (errors.length > 0) {\n      return Err(ErrorFactory.cacheError('Failed to set in some cache layers', errors));\n    }\n\n    return Ok(undefined);\n  }\n\n  /**\n   * Delete value from all cache layers\n   */\n  async delete(key: string): Promise<Result<void, WooError>> {\n    const errors: WooError[] = [];\n\n    for (const layer of this.layers.values()) {\n      const result = await layer.delete(key);\n      if (!result.success) {\n        errors.push(result.error);\n      }\n    }\n\n    if (errors.length > 0) {\n      return Err(ErrorFactory.cacheError('Failed to delete from some cache layers', errors));\n    }\n\n    return Ok(undefined);\n  }\n\n  /**\n   * Clear all cache layers\n   */\n  async clear(): Promise<Result<void, WooError>> {\n    const errors: WooError[] = [];\n\n    for (const layer of this.layers.values()) {\n      const result = await layer.clear();\n      if (!result.success) {\n        errors.push(result.error);\n      }\n    }\n\n    if (errors.length > 0) {\n      return Err(ErrorFactory.cacheError('Failed to clear some cache layers', errors));\n    }\n\n    return Ok(undefined);\n  }\n\n  /**\n   * Check if key exists in any cache layer\n   */\n  async has(key: string): Promise<Result<boolean, WooError>> {\n    if (!this.config.enabled) {\n      return Ok(false);\n    }\n\n    for (const layer of this.layers.values()) {\n      const result = await layer.has(key);\n      if (result.success && result.data) {\n        return Ok(true);\n      }\n    }\n\n    return Ok(false);\n  }\n\n  /**\n   * Get cache statistics\n   */\n  async getStats(): Promise<Result<Record<string, number>, WooError>> {\n    const stats: Record<string, number> = {};\n\n    for (const [layerName, layer] of this.layers) {\n      const sizeResult = await layer.size();\n      if (sizeResult.success) {\n        stats[layerName] = sizeResult.data;\n      }\n    }\n\n    return Ok(stats);\n  }\n\n  /**\n   * Promote value to higher cache layers\n   */\n  private async promote<T>(key: string, value: T, foundLayer: string): Promise<void> {\n    const layerOrder = ['memory', 'localStorage', 'indexedDB'];\n    const foundIndex = layerOrder.indexOf(foundLayer);\n\n    // Promote to all layers above where it was found\n    for (let i = 0; i < foundIndex; i++) {\n      const layerName = layerOrder[i];\n      if (layerName) {\n        const layer = this.layers.get(layerName);\n        if (layer) {\n          await layer.set(key, value, this.config.ttl);\n        }\n      }\n    }\n  }\n} ","/**\n * Product management module for WooCommerce Headless SDK\n * Following the enhanced unified-10x-dev framework\n */\n\nimport { HttpClient } from '../../core/client';\nimport { CacheManager } from '../../core/cache';\nimport { Result, Ok, Err, isOk } from '../../types/result';\nimport { WooError, ErrorFactory } from '../../types/errors';\nimport { \n  WooCommerceProduct, \n  ProductVariation,\n  ProductSchema,\n  isWooCommerceProduct \n} from '../../types/commerce';\nimport { PaginationConfig, SortConfig, Filter } from '../../types/config';\nimport { z } from 'zod';\n\n/**\n * Product list parameters\n */\nexport interface ProductListParams {\n  readonly page?: number;\n  readonly limit?: number;\n  readonly search?: string;\n  readonly category?: number | string;\n  readonly tag?: number | string;\n  readonly status?: 'draft' | 'pending' | 'private' | 'publish' | 'any';\n  readonly featured?: boolean;\n  readonly inStock?: boolean;\n  readonly onSale?: boolean;\n  readonly minPrice?: number;\n  readonly maxPrice?: number;\n  readonly orderby?: 'date' | 'id' | 'include' | 'title' | 'slug' | 'price' | 'popularity' | 'rating';\n  readonly order?: 'asc' | 'desc';\n  readonly include?: number[];\n  readonly exclude?: number[];\n  readonly parent?: number[];\n  readonly offset?: number;\n}\n\n/**\n * Product list response with pagination metadata\n */\nexport interface ProductListResponse {\n  readonly products: readonly WooCommerceProduct[];\n  readonly totalProducts: number;\n  readonly totalPages: number;\n  readonly currentPage: number;\n  readonly perPage: number;\n}\n\n/**\n * Variation list parameters\n */\nexport interface VariationListParams {\n  readonly page?: number;\n  readonly limit?: number;\n  readonly search?: string;\n  readonly status?: 'draft' | 'pending' | 'private' | 'publish' | 'any';\n  readonly minPrice?: number;\n  readonly maxPrice?: number;\n  readonly inStock?: boolean;\n  readonly onSale?: boolean;\n}\n\n/**\n * Product service class\n */\nexport class ProductService {\n  private readonly client: HttpClient;\n  private readonly cache: CacheManager;\n\n  constructor(client: HttpClient, cache: CacheManager) {\n    this.client = client;\n    this.cache = cache;\n  }\n\n  /**\n   * List products with filtering and pagination\n   */\n  async list(params: ProductListParams = {}): Promise<Result<ProductListResponse, WooError>> {\n    try {\n      // Validate parameters\n      const validationResult = this.validateListParams(params);\n      if (!validationResult.success) {\n        return validationResult;\n      }\n\n      // Build query parameters\n      const queryParams = this.buildQueryParams(params);\n      const cacheKey = `products:list:${JSON.stringify(queryParams)}`;\n\n      // Check cache\n      const cachedResult = await this.cache.get<ProductListResponse>(cacheKey);\n      if (cachedResult.success && cachedResult.data) {\n        return Ok(cachedResult.data);\n      }\n\n      // Make API request\n      const response = await this.client.get<WooCommerceProduct[]>(\n        `/products?${new URLSearchParams(queryParams as any).toString()}`\n      );\n\n      if (!response.success) {\n        return response;\n      }\n\n      // Extract pagination from headers\n      const totalProducts = parseInt(response.data.headers['x-wp-total'] || '0');\n      const totalPages = parseInt(response.data.headers['x-wp-totalpages'] || '0');\n\n      // Validate response data\n      const products: WooCommerceProduct[] = [];\n      for (const product of response.data.data) {\n        try {\n          const validated = ProductSchema.parse(product);\n          products.push(validated as WooCommerceProduct);\n        } catch (error) {\n          // Skip invalid product but continue\n          // In production, this would be logged via the debug config\n        }\n      }\n\n      const result: ProductListResponse = {\n        products,\n        totalProducts,\n        totalPages,\n        currentPage: params.page || 1,\n        perPage: params.limit || 10\n      };\n\n      // Cache the result\n      await this.cache.set(cacheKey, result);\n\n      return Ok(result);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to list products',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get a single product by ID\n   */\n  async get(productId: number): Promise<Result<WooCommerceProduct, WooError>> {\n    try {\n      // Validate product ID\n      if (!productId || productId <= 0) {\n        return Err(ErrorFactory.validationError('Invalid product ID'));\n      }\n\n      const cacheKey = `products:single:${productId}`;\n\n      // Check cache\n      const cachedResult = await this.cache.get<WooCommerceProduct>(cacheKey);\n      if (cachedResult.success && cachedResult.data) {\n        return Ok(cachedResult.data);\n      }\n\n      // Make API request\n      const response = await this.client.get<WooCommerceProduct>(`/products/${productId}`);\n\n      if (!response.success) {\n        // Transform 404 to specific product not found error\n        if (response.error.statusCode === 404) {\n          return Err(ErrorFactory.productNotFoundError(productId));\n        }\n        return response;\n      }\n\n      // Validate response\n      try {\n        const validated = ProductSchema.parse(response.data.data);\n        const product = validated as WooCommerceProduct;\n\n        // Cache the result\n        await this.cache.set(cacheKey, product);\n\n        return Ok(product);\n      } catch (error) {\n        return Err(ErrorFactory.validationError(\n          'Invalid product data received from API',\n          error\n        ));\n      }\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to get product',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get product by slug\n   */\n  async getBySlug(slug: string): Promise<Result<WooCommerceProduct, WooError>> {\n    try {\n      // Validate slug\n      if (!slug || slug.trim().length === 0) {\n        return Err(ErrorFactory.validationError('Invalid product slug'));\n      }\n\n      const result = await this.list({ \n        search: slug,\n        limit: 1 \n      });\n\n      if (!result.success) {\n        return result;\n      }\n\n      const product = result.data.products.find(p => p.slug === slug);\n      if (!product) {\n        return Err(ErrorFactory.productNotFoundError(slug));\n      }\n\n      return Ok(product);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to get product by slug',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get product variations\n   */\n  async getVariations(\n    productId: number, \n    params: VariationListParams = {}\n  ): Promise<Result<ProductVariation[], WooError>> {\n    try {\n      // Validate product ID\n      if (!productId || productId <= 0) {\n        return Err(ErrorFactory.validationError('Invalid product ID'));\n      }\n\n      const queryParams = this.buildVariationQueryParams(params);\n      const cacheKey = `products:${productId}:variations:${JSON.stringify(queryParams)}`;\n\n      // Check cache\n      const cachedResult = await this.cache.get<ProductVariation[]>(cacheKey);\n      if (cachedResult.success && cachedResult.data) {\n        return Ok(cachedResult.data);\n      }\n\n      // Make API request\n      const response = await this.client.get<ProductVariation[]>(\n        `/products/${productId}/variations?${new URLSearchParams(queryParams as any).toString()}`\n      );\n\n      if (!response.success) {\n        return response;\n      }\n\n      // Cache the result\n      await this.cache.set(cacheKey, response.data.data);\n\n      return Ok(response.data.data);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to get product variations',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Search products by keyword\n   */\n  async search(\n    query: string, \n    params: Omit<ProductListParams, 'search'> = {}\n  ): Promise<Result<ProductListResponse, WooError>> {\n    if (!query || query.trim().length === 0) {\n      return Err(ErrorFactory.validationError('Search query cannot be empty'));\n    }\n\n    return this.list({ ...params, search: query });\n  }\n\n  /**\n   * Get products by category\n   */\n  async getByCategory(\n    categoryId: number | string,\n    params: Omit<ProductListParams, 'category'> = {}\n  ): Promise<Result<ProductListResponse, WooError>> {\n    return this.list({ ...params, category: categoryId });\n  }\n\n  /**\n   * Get featured products\n   */\n  async getFeatured(\n    params: Omit<ProductListParams, 'featured'> = {}\n  ): Promise<Result<ProductListResponse, WooError>> {\n    return this.list({ ...params, featured: true });\n  }\n\n  /**\n   * Get on-sale products\n   */\n  async getOnSale(\n    params: Omit<ProductListParams, 'onSale'> = {}\n  ): Promise<Result<ProductListResponse, WooError>> {\n    return this.list({ ...params, onSale: true });\n  }\n\n  /**\n   * Validate list parameters\n   */\n  private validateListParams(params: ProductListParams): Result<void, WooError> {\n    // Validate pagination\n    if (params.page !== undefined && params.page < 1) {\n      return Err(ErrorFactory.validationError('Page must be greater than 0'));\n    }\n\n    if (params.limit !== undefined && (params.limit < 1 || params.limit > 100)) {\n      return Err(ErrorFactory.validationError('Limit must be between 1 and 100'));\n    }\n\n    // Validate price range\n    if (params.minPrice !== undefined && params.minPrice < 0) {\n      return Err(ErrorFactory.validationError('Min price cannot be negative'));\n    }\n\n    if (params.maxPrice !== undefined && params.maxPrice < 0) {\n      return Err(ErrorFactory.validationError('Max price cannot be negative'));\n    }\n\n    if (\n      params.minPrice !== undefined && \n      params.maxPrice !== undefined && \n      params.minPrice > params.maxPrice\n    ) {\n      return Err(ErrorFactory.validationError('Min price cannot be greater than max price'));\n    }\n\n    return Ok(undefined);\n  }\n\n  /**\n   * Build query parameters for product list\n   */\n  private buildQueryParams(params: ProductListParams): Record<string, string> {\n    const queryParams: Record<string, string> = {};\n\n    if (params.page) queryParams.page = params.page.toString();\n    if (params.limit) queryParams.per_page = params.limit.toString();\n    if (params.search) queryParams.search = params.search;\n    if (params.category) queryParams.category = params.category.toString();\n    if (params.tag) queryParams.tag = params.tag.toString();\n    if (params.status) queryParams.status = params.status;\n    if (params.featured !== undefined) queryParams.featured = params.featured.toString();\n    if (params.onSale !== undefined) queryParams.on_sale = params.onSale.toString();\n    if (params.orderby) queryParams.orderby = params.orderby;\n    if (params.order) queryParams.order = params.order;\n    if (params.offset) queryParams.offset = params.offset.toString();\n\n    // Handle stock status\n    if (params.inStock !== undefined) {\n      queryParams.stock_status = params.inStock ? 'instock' : 'outofstock';\n    }\n\n    // Handle price filters (requires custom handling in WooCommerce)\n    if (params.minPrice !== undefined) {\n      queryParams.min_price = params.minPrice.toString();\n    }\n    if (params.maxPrice !== undefined) {\n      queryParams.max_price = params.maxPrice.toString();\n    }\n\n    // Handle array parameters\n    if (params.include?.length) {\n      queryParams.include = params.include.join(',');\n    }\n    if (params.exclude?.length) {\n      queryParams.exclude = params.exclude.join(',');\n    }\n    if (params.parent?.length) {\n      queryParams.parent = params.parent.join(',');\n    }\n\n    return queryParams;\n  }\n\n  /**\n   * Build query parameters for variation list\n   */\n  private buildVariationQueryParams(params: VariationListParams): Record<string, string> {\n    const queryParams: Record<string, string> = {};\n\n    if (params.page) queryParams.page = params.page.toString();\n    if (params.limit) queryParams.per_page = params.limit.toString();\n    if (params.search) queryParams.search = params.search;\n    if (params.status) queryParams.status = params.status;\n    if (params.onSale !== undefined) queryParams.on_sale = params.onSale.toString();\n\n    if (params.inStock !== undefined) {\n      queryParams.stock_status = params.inStock ? 'instock' : 'outofstock';\n    }\n\n    if (params.minPrice !== undefined) {\n      queryParams.min_price = params.minPrice.toString();\n    }\n    if (params.maxPrice !== undefined) {\n      queryParams.max_price = params.maxPrice.toString();\n    }\n\n    return queryParams;\n  }\n} ","/**\n * Cart-related TypeScript types for WooCommerce Headless SDK\n * Following the enhanced unified-10x-dev framework\n */\n\nimport { z } from 'zod';\n\n/**\n * Cart item quantity limits\n */\nexport interface CartQuantityLimits {\n  readonly min: number;\n  readonly max: number;\n  readonly step: number;\n}\n\n/**\n * Cart item metadata\n */\nexport interface CartItemMeta {\n  readonly key: string;\n  readonly value: string;\n  readonly displayKey?: string;\n  readonly displayValue?: string;\n}\n\n/**\n * Cart item interface\n */\nexport interface CartItem {\n  readonly key: string; // Unique identifier for cart item\n  readonly productId: number;\n  readonly variationId: number | undefined; // Allow undefined explicitly\n  readonly quantity: number;\n  readonly name: string;\n  readonly price: number; // Unit price\n  readonly regularPrice: number;\n  readonly salePrice: number | undefined; // Allow undefined explicitly\n  readonly totalPrice: number; // price * quantity\n  readonly total: number; // alias for totalPrice\n  readonly sku: string | undefined; // Allow undefined explicitly\n  readonly weight: number | undefined; // Allow undefined explicitly\n  readonly dimensions?: {\n    readonly length: string;\n    readonly width: string;\n    readonly height: string;\n  };\n  readonly image?: {\n    readonly id: number;\n    readonly src: string;\n    readonly alt: string;\n  };\n  readonly stockQuantity: number | undefined; // Allow undefined explicitly\n  readonly stockStatus: 'instock' | 'outofstock' | 'onbackorder';\n  readonly backorders: 'no' | 'notify' | 'yes';\n  readonly quantityLimits?: CartQuantityLimits;\n  readonly meta?: readonly CartItemMeta[];\n  readonly attributes?: Record<string, string>;\n  readonly addedAt: Date;\n  readonly updatedAt: Date;\n  readonly backordersAllowed: boolean;\n  readonly soldIndividually: boolean;\n  readonly downloadable: boolean;\n  readonly virtual: boolean;\n}\n\n/**\n * Cart totals breakdown\n */\nexport interface CartTotals {\n  readonly subtotal: number;\n  readonly subtotalTax: number;\n  readonly shippingTotal: number;\n  readonly shippingTax: number;\n  readonly discountTotal: number;\n  readonly discountTax: number;\n  readonly cartContentsTotal: number;\n  readonly cartContentsTax: number;\n  readonly feeTotal: number;\n  readonly feeTax: number;\n  readonly total: number;\n  readonly totalTax: number;\n  // Legacy aliases for backward compatibility and validation code\n  readonly tax: number; // alias for totalTax\n  readonly shipping: number; // alias for shippingTotal  \n  readonly fees: number; // alias for feeTotal\n  readonly discount: number; // alias for discountTotal\n}\n\n/**\n * Applied coupon information\n */\nexport interface AppliedCoupon {\n  readonly code: string;\n  readonly discountType: 'percent' | 'fixed_cart' | 'fixed_product';\n  readonly amount: number;\n  readonly description?: string;\n  readonly freeShipping: boolean;\n  readonly expiryDate?: Date;\n  readonly usageLimit?: number;\n  readonly usageCount: number;\n  readonly individualUse: boolean;\n  readonly productIds?: readonly number[];\n  readonly excludedProductIds?: readonly number[];\n  readonly categoryIds?: readonly number[];\n  readonly excludedCategoryIds?: readonly number[];\n  readonly minimumAmount?: number;\n  readonly maximumAmount?: number;\n}\n\n/**\n * Shipping method option\n */\nexport interface ShippingMethod {\n  readonly id: string;\n  readonly title: string;\n  readonly cost: number;\n  readonly taxable: boolean;\n  readonly taxes?: readonly {\n    readonly id: number;\n    readonly total: number;\n  }[];\n  readonly methodId: string;\n  readonly instanceId?: number;\n  readonly metaData?: readonly CartItemMeta[];\n}\n\n/**\n * Cart fees (additional charges)\n */\nexport interface CartFee {\n  readonly id: string;\n  readonly name: string;\n  readonly amount: number;\n  readonly taxable: boolean;\n  readonly taxClass?: string;\n  readonly taxes?: readonly {\n    readonly id: number;\n    readonly total: number;\n  }[];\n}\n\n/**\n * Main cart interface\n */\nexport interface Cart {\n  readonly items: readonly CartItem[];\n  readonly itemCount: number;\n  readonly totals: CartTotals;\n  readonly appliedCoupons: readonly AppliedCoupon[];\n  readonly shippingMethods: readonly ShippingMethod[];\n  readonly chosenShippingMethods: readonly string[];\n  readonly fees: readonly CartFee[];\n  readonly needsShipping: boolean;\n  readonly needsPayment: boolean;\n  readonly hasCalculatedShipping: boolean;\n  readonly currency: string;\n  readonly currencySymbol: string;\n  readonly pricesIncludeTax: boolean;\n  readonly taxDisplayMode: 'incl' | 'excl';\n  readonly crossSells: readonly number[]; // Product IDs for cross-sell suggestions\n  readonly isEmpty: boolean;\n  readonly createdAt: Date;\n  readonly updatedAt: Date;\n  readonly expiresAt?: Date; // Cart expiration for abandoned cart recovery\n  readonly customerId?: number;\n  readonly sessionId: string;\n}\n\n/**\n * Cart update request\n */\nexport interface CartUpdateRequest {\n  readonly productId: number;\n  readonly variationId?: number;\n  readonly quantity: number;\n  readonly attributes?: Record<string, string>;\n  readonly meta?: readonly CartItemMeta[];\n}\n\n/**\n * Cart add item request\n */\nexport interface CartAddItemRequest {\n  readonly productId: number;\n  readonly variationId: number | undefined; // Allow undefined explicitly\n  readonly quantity: number;\n  readonly attributes?: Record<string, string>;\n  readonly meta?: readonly CartItemMeta[];\n  readonly replace?: boolean; // Replace existing item instead of adding to quantity\n}\n\n/**\n * Cart validation result\n */\nexport interface CartValidationResult {\n  readonly isValid: boolean;\n  readonly errors: readonly {\n    readonly itemKey: string;\n    readonly code: 'OUT_OF_STOCK' | 'INSUFFICIENT_STOCK' | 'INVALID_QUANTITY' | 'PRODUCT_NOT_FOUND' | 'VARIATION_NOT_FOUND';\n    readonly message: string;\n    readonly currentStock?: number;\n    readonly requestedQuantity?: number;\n  }[];\n  readonly warnings: readonly {\n    readonly itemKey: string;\n    readonly code: 'LOW_STOCK' | 'BACKORDER' | 'PRICE_CHANGED';\n    readonly message: string;\n    readonly details?: Record<string, unknown>;\n  }[];\n}\n\n/**\n * Cart persistence options\n */\nexport interface CartPersistenceConfig {\n  readonly strategy: 'localStorage' | 'sessionStorage' | 'indexedDB' | 'server' | 'none';\n  readonly key?: string;\n  readonly encryption?: boolean;\n  readonly expirationDays?: number;\n  readonly syncToServer?: boolean;\n}\n\n/**\n * Cart synchronization status\n */\nexport type CartSyncStatus = 'idle' | 'syncing' | 'synced' | 'failed' | 'conflict';\n\n/**\n * Cart sync conflict resolution strategy\n */\nexport type CartSyncStrategy = \n  | 'merge_smart'        // Intelligent merging (recommended)\n  | 'local_wins'         // Local cart takes precedence\n  | 'server_wins'        // Server cart takes precedence\n  | 'merge_quantities'   // Merge quantities for same items\n  | 'prompt_user';       // Ask user to resolve conflicts\n\n/**\n * Cart sync configuration\n */\nexport interface CartSyncConfig {\n  readonly enabled: boolean;\n  readonly strategy: CartSyncStrategy;\n  readonly syncIntervalMs: number;        // Auto-sync interval in milliseconds\n  readonly conflictResolution: CartSyncStrategy;\n  readonly maxRetries: number;\n  readonly retryDelayMs: number;\n  readonly syncOnAuth: boolean;           // Sync immediately when user authenticates\n  readonly syncOnCartChange: boolean;     // Sync on every cart modification\n  readonly backgroundSync: boolean;       // Enable background sync\n  readonly offlineQueueSize: number;      // Max offline actions to queue\n}\n\n/**\n * Cart sync conflict information\n */\nexport interface CartSyncConflict {\n  readonly type: 'item_quantity' | 'item_missing' | 'coupon_conflict' | 'total_mismatch';\n  readonly itemKey?: string;\n  readonly localValue: unknown;\n  readonly serverValue: unknown;\n  readonly message: string;\n  readonly suggestion: string;\n}\n\n/**\n * Cart sync result\n */\nexport interface CartSyncResult {\n  readonly success: boolean;\n  readonly status: CartSyncStatus;\n  readonly conflicts: readonly CartSyncConflict[];\n  readonly mergedCart?: Cart;\n  readonly syncedAt: Date;\n  readonly changes: {\n    readonly itemsAdded: number;\n    readonly itemsUpdated: number;\n    readonly itemsRemoved: number;\n    readonly couponsAdded: number;\n    readonly couponsRemoved: number;\n  };\n}\n\n/**\n * Cart sync metadata\n */\nexport interface CartSyncMetadata {\n  readonly deviceId: string;\n  readonly lastSyncAt: Date;\n  readonly syncVersion: number;\n  readonly userId: string;\n  readonly sessionId: string;\n  readonly source: 'local' | 'server' | 'merged';\n}\n\n/**\n * Server cart data structure\n */\nexport interface ServerCartData {\n  readonly cart: Cart;\n  readonly metadata: CartSyncMetadata;\n  readonly conflicts?: readonly CartSyncConflict[];\n}\n\n/**\n * Cart configuration\n */\nexport interface CartConfig {\n  readonly persistence: CartPersistenceConfig;\n  readonly autoCalculateTotals: boolean;\n  readonly validateStock: boolean;\n  readonly allowBackorders: boolean;\n  readonly sessionTimeout: number; // minutes\n  readonly maxItems: number;\n  readonly maxQuantityPerItem: number;\n  readonly enableCoupons: boolean;\n  readonly enableShipping: boolean;\n  readonly enableFees: boolean;\n  readonly enableCrossSells: boolean;\n  readonly taxCalculation: {\n    readonly enabled: boolean;\n    readonly pricesIncludeTax: boolean;\n    readonly displayMode: 'incl' | 'excl' | 'both';\n    readonly roundAtSubtotal: boolean;\n  };\n}\n\n// Zod schemas for validation\nexport const CartItemMetaSchema = z.object({\n  key: z.string(),\n  value: z.string(),\n  displayKey: z.string().optional(),\n  displayValue: z.string().optional(),\n});\n\nexport const CartQuantityLimitsSchema = z.object({\n  min: z.number().min(0),\n  max: z.number().min(1),\n  step: z.number().min(1),\n});\n\nexport const CartItemSchema = z.object({\n  key: z.string(),\n  productId: z.number().positive(),\n  variationId: z.number().positive().optional(),\n  quantity: z.number().positive(),\n  name: z.string(),\n  price: z.number().min(0),\n  regularPrice: z.number().min(0),\n  salePrice: z.number().min(0).optional(),\n  totalPrice: z.number().min(0),\n  total: z.number().min(0),\n  sku: z.string().optional(),\n  weight: z.number().min(0).optional(),\n  dimensions: z.object({\n    length: z.string(),\n    width: z.string(),\n    height: z.string(),\n  }).optional(),\n  image: z.object({\n    id: z.number().positive(),\n    src: z.string().url(),\n    alt: z.string(),\n  }).optional(),\n  stockQuantity: z.number().min(0).optional(),\n  stockStatus: z.enum(['instock', 'outofstock', 'onbackorder']),\n  backorders: z.enum(['no', 'notify', 'yes']),\n  quantityLimits: CartQuantityLimitsSchema.optional(),\n  meta: z.array(CartItemMetaSchema).optional(),\n  attributes: z.record(z.string()).optional(),\n  addedAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const CartTotalsSchema = z.object({\n  subtotal: z.number().min(0),\n  subtotalTax: z.number().min(0),\n  shippingTotal: z.number().min(0),\n  shippingTax: z.number().min(0),\n  discountTotal: z.number().min(0),\n  discountTax: z.number().min(0),\n  cartContentsTotal: z.number().min(0),\n  cartContentsTax: z.number().min(0),\n  feeTotal: z.number().min(0),\n  feeTax: z.number().min(0),\n  total: z.number().min(0),\n  totalTax: z.number().min(0),\n});\n\nexport const AppliedCouponSchema = z.object({\n  code: z.string(),\n  discountType: z.enum(['percent', 'fixed_cart', 'fixed_product']),\n  amount: z.number().min(0),\n  description: z.string().optional(),\n  freeShipping: z.boolean(),\n  expiryDate: z.date().optional(),\n  usageLimit: z.number().positive().optional(),\n  usageCount: z.number().min(0),\n  individualUse: z.boolean(),\n  productIds: z.array(z.number().positive()).optional(),\n  excludedProductIds: z.array(z.number().positive()).optional(),\n  categoryIds: z.array(z.number().positive()).optional(),\n  excludedCategoryIds: z.array(z.number().positive()).optional(),\n  minimumAmount: z.number().min(0).optional(),\n  maximumAmount: z.number().min(0).optional(),\n});\n\nexport const CartSchema = z.object({\n  items: z.array(CartItemSchema),\n  itemCount: z.number().min(0),\n  totals: CartTotalsSchema,\n  appliedCoupons: z.array(AppliedCouponSchema),\n  shippingMethods: z.array(z.any()), // TODO: Define shipping method schema\n  chosenShippingMethods: z.array(z.string()),\n  fees: z.array(z.any()), // TODO: Define fee schema\n  needsShipping: z.boolean(),\n  needsPayment: z.boolean(),\n  hasCalculatedShipping: z.boolean(),\n  currency: z.string(),\n  currencySymbol: z.string(),\n  pricesIncludeTax: z.boolean(),\n  taxDisplayMode: z.enum(['incl', 'excl']),\n  crossSells: z.array(z.number().positive()),\n  isEmpty: z.boolean(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  expiresAt: z.date().optional(),\n  customerId: z.number().positive().optional(),\n  sessionId: z.string(),\n});\n\nexport const CartAddItemRequestSchema = z.object({\n  productId: z.number().positive(),\n  variationId: z.number().positive().optional(),\n  quantity: z.number().positive(),\n  attributes: z.record(z.string()).optional(),\n  meta: z.array(CartItemMetaSchema).optional(),\n  replace: z.boolean().optional(),\n});\n\nexport const CartUpdateRequestSchema = z.object({\n  productId: z.number().positive(),\n  variationId: z.number().positive().optional(), \n  quantity: z.number().positive(),\n  attributes: z.record(z.string()).optional(),\n  meta: z.array(CartItemMetaSchema).optional(),\n});\n\n// Type guards\nexport function isCartItem(obj: unknown): obj is CartItem {\n  try {\n    CartItemSchema.parse(obj);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isCart(obj: unknown): obj is Cart {\n  try {\n    CartSchema.parse(obj);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isCartAddItemRequest(obj: unknown): obj is CartAddItemRequest {\n  try {\n    CartAddItemRequestSchema.parse(obj);\n    return true;\n  } catch {\n    return false;\n  }\n} ","/**\n * Test utilities for WooCommerce Headless SDK\n * Following the enhanced unified-10x-dev framework\n */\n\nimport { WooCommerceProduct, WooCommerceOrder, WooCommerceCustomer } from '../types/commerce';\nimport { WooConfig, ResolvedWooConfig, DEFAULT_CONFIG } from '../types/config';\nimport { Result, Ok, Err } from '../types/result';\nimport { WooError, ErrorFactory } from '../types/errors';\n\n/**\n * Create a mock product\n */\nexport function createMockProduct(overrides: Partial<WooCommerceProduct> = {}): WooCommerceProduct {\n  return {\n    id: 1,\n    name: 'Test Product',\n    slug: 'test-product',\n    permalink: 'https://example.com/product/test-product',\n    date_created: '2024-01-01T00:00:00',\n    date_created_gmt: '2024-01-01T00:00:00',\n    date_modified: '2024-01-01T00:00:00',\n    date_modified_gmt: '2024-01-01T00:00:00',\n    type: 'simple',\n    status: 'publish',\n    featured: false,\n    catalog_visibility: 'visible',\n    description: 'Test product description',\n    short_description: 'Test short description',\n    sku: 'TEST-001',\n    price: '99.99',\n    regular_price: '99.99',\n    sale_price: '',\n    price_html: '<span>$99.99</span>',\n    on_sale: false,\n    purchasable: true,\n    total_sales: 0,\n    virtual: false,\n    downloadable: false,\n    downloads: [],\n    download_limit: -1,\n    download_expiry: -1,\n    external_url: '',\n    button_text: '',\n    tax_status: 'taxable',\n    tax_class: '',\n    manage_stock: false,\n    stock_status: 'instock',\n    backorders: 'no',\n    backorders_allowed: false,\n    backordered: false,\n    sold_individually: false,\n    weight: '',\n    dimensions: {\n      length: '',\n      width: '',\n      height: ''\n    },\n    shipping_required: true,\n    shipping_taxable: true,\n    shipping_class: '',\n    shipping_class_id: 0,\n    reviews_allowed: true,\n    average_rating: '0.00',\n    rating_count: 0,\n    related_ids: [],\n    upsell_ids: [],\n    cross_sell_ids: [],\n    parent_id: 0,\n    purchase_note: '',\n    categories: [],\n    tags: [],\n    images: [],\n    attributes: [],\n    default_attributes: [],\n    variations: [],\n    grouped_products: [],\n    menu_order: 0,\n    meta_data: [],\n    ...overrides\n  };\n}\n\n/**\n * Create a mock order\n */\nexport function createMockOrder(overrides: Partial<WooCommerceOrder> = {}): WooCommerceOrder {\n  return {\n    id: 1,\n    parent_id: 0,\n    status: 'processing',\n    currency: 'USD',\n    version: '8.0.0',\n    prices_include_tax: false,\n    date_created: '2024-01-01T00:00:00',\n    date_modified: '2024-01-01T00:00:00',\n    discount_total: '0.00',\n    discount_tax: '0.00',\n    shipping_total: '10.00',\n    shipping_tax: '0.00',\n    cart_tax: '0.00',\n    total: '109.99',\n    total_tax: '0.00',\n    customer_id: 1,\n    order_key: 'wc_order_abc123',\n    billing: {\n      first_name: 'John',\n      last_name: 'Doe',\n      company: '',\n      address_1: '123 Main St',\n      address_2: '',\n      city: 'New York',\n      state: 'NY',\n      postcode: '10001',\n      country: 'US',\n      email: 'john@example.com',\n      phone: '555-1234'\n    },\n    shipping: {\n      first_name: 'John',\n      last_name: 'Doe',\n      company: '',\n      address_1: '123 Main St',\n      address_2: '',\n      city: 'New York',\n      state: 'NY',\n      postcode: '10001',\n      country: 'US'\n    },\n    payment_method: 'stripe',\n    payment_method_title: 'Credit Card',\n    transaction_id: '',\n    customer_ip_address: '127.0.0.1',\n    customer_user_agent: 'Mozilla/5.0',\n    created_via: 'rest-api',\n    customer_note: '',\n    cart_hash: 'abc123',\n    number: '1',\n    meta_data: [],\n    line_items: [\n      {\n        id: 1,\n        name: 'Test Product',\n        product_id: 1,\n        variation_id: 0,\n        quantity: 1,\n        tax_class: '',\n        subtotal: '99.99',\n        subtotal_tax: '0.00',\n        total: '99.99',\n        total_tax: '0.00',\n        taxes: [],\n        meta_data: [],\n        sku: 'TEST-001',\n        price: '99.99'\n      }\n    ],\n    tax_lines: [],\n    shipping_lines: [],\n    fee_lines: [],\n    coupon_lines: [],\n    refunds: [],\n    set_paid: false,\n    ...overrides\n  };\n}\n\n/**\n * Create a mock customer\n */\nexport function createMockCustomer(overrides: Partial<WooCommerceCustomer> = {}): WooCommerceCustomer {\n  return {\n    id: 1,\n    date_created: '2024-01-01T00:00:00',\n    date_created_gmt: '2024-01-01T00:00:00',\n    date_modified: '2024-01-01T00:00:00',\n    date_modified_gmt: '2024-01-01T00:00:00',\n    email: 'customer@example.com',\n    first_name: 'John',\n    last_name: 'Doe',\n    role: 'customer',\n    username: 'johndoe',\n    billing: {\n      first_name: 'John',\n      last_name: 'Doe',\n      company: '',\n      address_1: '123 Main St',\n      address_2: '',\n      city: 'New York',\n      state: 'NY',\n      postcode: '10001',\n      country: 'US',\n      email: 'customer@example.com',\n      phone: '555-1234'\n    },\n    shipping: {\n      first_name: 'John',\n      last_name: 'Doe',\n      company: '',\n      address_1: '123 Main St',\n      address_2: '',\n      city: 'New York',\n      state: 'NY',\n      postcode: '10001',\n      country: 'US'\n    },\n    is_paying_customer: true,\n    avatar_url: 'https://secure.gravatar.com/avatar/55502f40dc8b7c769880b10874abc9d0',\n    meta_data: [],\n    ...overrides\n  };\n}\n\n/**\n * Create a mock configuration\n */\nexport function createMockConfig(overrides: Partial<WooConfig> = {}): WooConfig {\n  return {\n    baseURL: 'https://example.com',\n    consumerKey: 'ck_test123',\n    consumerSecret: 'cs_test456',\n    ...overrides\n  };\n}\n\n/**\n * Create a resolved mock configuration\n */\nexport function createResolvedMockConfig(overrides: Partial<ResolvedWooConfig> = {}): ResolvedWooConfig {\n  const baseConfig = createMockConfig();\n  return {\n    ...baseConfig,\n    version: DEFAULT_CONFIG.version,\n    environment: DEFAULT_CONFIG.environment,\n    cache: DEFAULT_CONFIG.cache,\n    auth: DEFAULT_CONFIG.auth,\n    http: DEFAULT_CONFIG.http,\n    search: DEFAULT_CONFIG.search,\n    analytics: DEFAULT_CONFIG.analytics,\n    i18n: DEFAULT_CONFIG.i18n,\n    debug: DEFAULT_CONFIG.debug,\n    ...overrides\n  };\n}\n\n/**\n * Create a mock fetch response\n */\nexport function createMockFetchResponse<T>(\n  data: T,\n  options: {\n    status?: number;\n    statusText?: string;\n    headers?: Record<string, string>;\n  } = {}\n): Response {\n  const { status = 200, statusText = 'OK', headers = {} } = options;\n  \n  return {\n    ok: status >= 200 && status < 300,\n    status,\n    statusText,\n    headers: new Headers(headers),\n    json: async () => data,\n    text: async () => JSON.stringify(data),\n    blob: async () => new Blob([JSON.stringify(data)], { type: 'application/json' }),\n    arrayBuffer: async () => new ArrayBuffer(0),\n    formData: async () => new FormData(),\n    clone: () => createMockFetchResponse(data, options),\n    body: null,\n    bodyUsed: false,\n    redirected: false,\n    type: 'basic',\n    url: 'https://example.com/api'\n  } as Response;\n}\n\n/**\n * Create a mock successful result\n */\nexport function createSuccessResult<T>(data: T): Result<T, WooError> {\n  return Ok(data);\n}\n\n/**\n * Create a mock error result\n */\nexport function createErrorResult(code: string, message: string): Result<any, WooError> {\n  switch (code) {\n    case 'NETWORK_ERROR':\n      return Err(ErrorFactory.networkError(message));\n    case 'AUTH_ERROR':\n      return Err(ErrorFactory.authError(message));\n    case 'VALIDATION_ERROR':\n      return Err(ErrorFactory.validationError(message));\n    case 'API_ERROR':\n      return Err(ErrorFactory.apiError(message, 400));\n    case 'TIMEOUT_ERROR':\n      return Err(ErrorFactory.timeoutError(message, 30000));\n    default:\n      return Err(ErrorFactory.networkError(message));\n  }\n}\n\n/**\n * Wait for a specified amount of time\n */\nexport function wait(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Create a mock abort controller\n */\nexport function createMockAbortController(): AbortController {\n  const controller = new AbortController();\n  return controller;\n}\n\n/**\n * Assert that a result is successful\n */\nexport function assertSuccess<T, E>(result: Result<T, E>): asserts result is { success: true; data: T } {\n  if (!result.success) {\n    throw new Error(`Expected success but got error: ${JSON.stringify(result.error)}`);\n  }\n}\n\n/**\n * Assert that a result is an error\n */\nexport function assertError<T, E>(result: Result<T, E>): asserts result is { success: false; error: E } {\n  if (result.success) {\n    throw new Error(`Expected error but got success: ${JSON.stringify(result.data)}`);\n  }\n}\n\n/**\n * Generate a unique ID for testing purposes\n */\nexport function generateId(): string {\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n} ","/**\n * Cart Synchronization Manager for WooCommerce Headless SDK\n * Handles cross-device cart synchronization with intelligent conflict resolution\n * Following the enhanced unified-10x-dev framework\n */\n\nimport { \n  Cart, \n  CartItem, \n  CartSyncConfig, \n  CartSyncStatus, \n  CartSyncStrategy,\n  CartSyncResult,\n  CartSyncConflict,\n  CartSyncMetadata,\n  ServerCartData \n} from '../../types/cart';\nimport { UserAuthContext } from '../../types/user';\nimport { Result, Ok, Err } from '../../types/result';\nimport { CartError, ErrorFactory } from '../../types/errors';\nimport { HttpClient } from '../../core/client';\n\n/**\n * Cart synchronization event handler\n */\nexport interface CartSyncEventHandler {\n  onSyncStart: () => void;\n  onSyncComplete: (result: CartSyncResult) => void;\n  onSyncError: (error: CartError) => void;\n  onConflictDetected: (conflicts: readonly CartSyncConflict[]) => void;\n}\n\n/**\n * Cart synchronization queue item\n */\nexport interface CartSyncQueueItem {\n  readonly id: string;\n  readonly action: 'add' | 'update' | 'remove' | 'clear' | 'apply_coupon' | 'remove_coupon';\n  readonly data: unknown;\n  readonly timestamp: Date;\n  readonly retryCount: number;\n}\n\n/**\n * Cart synchronization manager\n */\nexport class CartSyncManager {\n  private readonly config: CartSyncConfig;\n  private readonly httpClient: HttpClient;\n  private readonly deviceId: string;\n  \n  private syncStatus: CartSyncStatus = 'idle';\n  private lastSyncAt?: Date;\n  private backgroundSyncTimer: NodeJS.Timeout | undefined = undefined;\n  private isOnline = true;\n  private syncQueue: CartSyncQueueItem[] = [];\n  private eventHandlers: CartSyncEventHandler[] = [];\n\n  constructor(\n    config: CartSyncConfig,\n    httpClient: HttpClient,\n    deviceId?: string\n  ) {\n    this.config = config;\n    this.httpClient = httpClient;\n    this.deviceId = deviceId ?? this.generateDeviceId();\n    \n    this.setupNetworkMonitoring();\n    this.setupBackgroundSync();\n  }\n\n  /**\n   * Get current sync status\n   */\n  getStatus(): CartSyncStatus {\n    return this.syncStatus;\n  }\n\n  /**\n   * Get last sync timestamp\n   */\n  getLastSyncAt(): Date | undefined {\n    return this.lastSyncAt;\n  }\n\n  /**\n   * Add event handler\n   */\n  addEventHandler(handler: CartSyncEventHandler): void {\n    this.eventHandlers.push(handler);\n  }\n\n  /**\n   * Remove event handler\n   */\n  removeEventHandler(handler: CartSyncEventHandler): void {\n    const index = this.eventHandlers.indexOf(handler);\n    if (index > -1) {\n      this.eventHandlers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Sync cart with server\n   */\n  async syncCart(\n    localCart: Cart,\n    authContext: UserAuthContext\n  ): Promise<Result<CartSyncResult, CartError>> {\n    if (!this.config.enabled) {\n      return Ok({\n        success: true,\n        status: 'idle',\n        conflicts: [],\n        syncedAt: new Date(),\n        changes: {\n          itemsAdded: 0,\n          itemsUpdated: 0,\n          itemsRemoved: 0,\n          couponsAdded: 0,\n          couponsRemoved: 0\n        }\n      });\n    }\n\n    if (!authContext.isAuthenticated || !authContext.userId) {\n      return Err(ErrorFactory.cartError(\n        'User must be authenticated for cart synchronization',\n        { context: 'sync_cart' }\n      ));\n    }\n\n    this.setSyncStatus('syncing');\n    this.notifyEventHandlers('onSyncStart');\n\n    try {\n      // Fetch server cart\n      const serverCartResult = await this.fetchServerCart(authContext.userId);\n      if (!serverCartResult.success) {\n        this.setSyncStatus('failed');\n        this.notifyEventHandlers('onSyncError', serverCartResult.error);\n        return serverCartResult;\n      }\n\n      const serverCartData = serverCartResult.data;\n      \n      // If no server cart exists, upload local cart\n      if (!serverCartData) {\n        const uploadResult = await this.uploadCart(localCart, authContext);\n        if (!uploadResult.success) {\n          this.setSyncStatus('failed');\n          this.notifyEventHandlers('onSyncError', uploadResult.error);\n          return uploadResult;\n        }\n\n        const result: CartSyncResult = {\n          success: true,\n          status: 'synced',\n          conflicts: [],\n          mergedCart: localCart,\n          syncedAt: new Date(),\n          changes: {\n            itemsAdded: 0,\n            itemsUpdated: 0,\n            itemsRemoved: 0,\n            couponsAdded: 0,\n            couponsRemoved: 0\n          }\n        };\n\n        this.setSyncStatus('synced');\n        this.lastSyncAt = new Date();\n        this.notifyEventHandlers('onSyncComplete', result);\n        return Ok(result);\n      }\n\n      // Merge carts with conflict detection\n      const mergeResult = await this.mergeCarts(localCart, serverCartData.cart);\n      if (!mergeResult.success) {\n        this.setSyncStatus('failed');\n        this.notifyEventHandlers('onSyncError', mergeResult.error);\n        return mergeResult;\n      }\n\n      const { mergedCart, conflicts, changes } = mergeResult.data;\n\n      // Handle conflicts if any\n      if (conflicts.length > 0) {\n        this.setSyncStatus('conflict');\n        this.notifyEventHandlers('onConflictDetected', conflicts);\n        \n        // Auto-resolve conflicts based on strategy\n        const resolveResult = await this.resolveConflicts(\n          localCart,\n          serverCartData.cart,\n          conflicts,\n          this.config.conflictResolution\n        );\n        \n        if (!resolveResult.success) {\n          this.setSyncStatus('failed');\n          this.notifyEventHandlers('onSyncError', resolveResult.error);\n          return resolveResult;\n        }\n      }\n\n      // Upload merged cart to server\n      const uploadResult = await this.uploadCart(mergedCart, authContext);\n      if (!uploadResult.success) {\n        this.setSyncStatus('failed');\n        this.notifyEventHandlers('onSyncError', uploadResult.error);\n        return uploadResult;\n      }\n\n      const result: CartSyncResult = {\n        success: true,\n        status: 'synced',\n        conflicts,\n        mergedCart,\n        syncedAt: new Date(),\n        changes\n      };\n\n      this.setSyncStatus('synced');\n      this.lastSyncAt = new Date();\n      this.notifyEventHandlers('onSyncComplete', result);\n\n      return Ok(result);\n    } catch (error) {\n      const cartError = ErrorFactory.cartError(\n        'Cart synchronization failed',\n        { error: error instanceof Error ? error.message : 'Unknown error' }\n      );\n      \n      this.setSyncStatus('failed');\n      this.notifyEventHandlers('onSyncError', cartError);\n      return Err(cartError);\n    }\n  }\n\n  /**\n   * Queue cart action for offline sync\n   */\n  queueAction(\n    action: CartSyncQueueItem['action'],\n    data: unknown\n  ): void {\n    if (!this.config.enabled || this.isOnline) {\n      return;\n    }\n\n    const queueItem: CartSyncQueueItem = {\n      id: this.generateId(),\n      action,\n      data,\n      timestamp: new Date(),\n      retryCount: 0\n    };\n\n    this.syncQueue.push(queueItem);\n\n    // Limit queue size\n    if (this.syncQueue.length > this.config.offlineQueueSize) {\n      this.syncQueue.shift(); // Remove oldest item\n    }\n  }\n\n  /**\n   * Process offline sync queue\n   */\n  async processQueue(\n    localCart: Cart,\n    authContext: UserAuthContext\n  ): Promise<Result<void, CartError>> {\n    if (!this.config.enabled || !authContext.isAuthenticated || this.syncQueue.length === 0) {\n      return Ok(undefined);\n    }\n\n    const failedItems: CartSyncQueueItem[] = [];\n\n    for (const item of this.syncQueue) {\n      try {\n        // Process each queued action\n        await this.processQueueItem(item, localCart, authContext);\n      } catch (error) {\n        item.retryCount++;\n        if (item.retryCount < this.config.maxRetries) {\n          failedItems.push(item);\n        }\n      }\n    }\n\n    // Update queue with failed items\n    this.syncQueue = failedItems;\n    \n    return Ok(undefined);\n  }\n\n  /**\n   * Enable cart synchronization\n   */\n  enable(): void {\n    this.config = {\n      ...this.config,\n      enabled: true\n    };\n    this.setupBackgroundSync();\n  }\n\n  /**\n   * Disable cart synchronization\n   */\n  disable(): void {\n    this.config = {\n      ...this.config,\n      enabled: false\n    };\n    this.stopBackgroundSync();\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    this.stopBackgroundSync();\n    this.eventHandlers.length = 0;\n    this.syncQueue.length = 0;\n  }\n\n  // PRIVATE METHODS\n\n  /**\n   * Fetch cart from server\n   */\n  private async fetchServerCart(userId: string): Promise<Result<ServerCartData | null, CartError>> {\n    try {\n      const response = await this.httpClient.get(`/cart/sync/${userId}`);\n      \n      if (response.status === 404) {\n        return Ok(null); // No server cart exists\n      }\n\n      if (!response.success) {\n        return Err(ErrorFactory.cartError(\n          'Failed to fetch server cart',\n          { status: response.status, error: response.error }\n        ));\n      }\n\n      return Ok(response.data as ServerCartData);\n    } catch (error) {\n      return Err(ErrorFactory.cartError(\n        'Network error while fetching server cart',\n        { error: error instanceof Error ? error.message : 'Unknown error' }\n      ));\n    }\n  }\n\n  /**\n   * Upload cart to server\n   */\n  private async uploadCart(\n    cart: Cart,\n    authContext: UserAuthContext\n  ): Promise<Result<void, CartError>> {\n    if (!authContext.isAuthenticated || !authContext.userId) {\n      return Err(ErrorFactory.cartError(\n        'User must be authenticated to upload cart',\n        { context: 'upload_cart' }\n      ));\n    }\n\n    const metadata: CartSyncMetadata = {\n      deviceId: this.deviceId,\n      lastSyncAt: new Date(),\n      syncVersion: 1,\n      userId: authContext.userId,\n      sessionId: cart.sessionId,\n      source: 'local'\n    };\n\n    const serverCartData: ServerCartData = {\n      cart,\n      metadata\n    };\n\n    try {\n      const response = await this.httpClient.put(`/cart/sync/${authContext.userId}`, serverCartData);\n      \n      if (!response.success) {\n        return Err(ErrorFactory.cartError(\n          'Failed to upload cart to server',\n          { status: response.status, error: response.error }\n        ));\n      }\n\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.cartError(\n        'Network error while uploading cart',\n        { error: error instanceof Error ? error.message : 'Unknown error' }\n      ));\n    }\n  }\n\n  /**\n   * Merge local and server carts with conflict detection\n   */\n  private async mergeCarts(\n    localCart: Cart,\n    serverCart: Cart\n  ): Promise<Result<{\n    mergedCart: Cart;\n    conflicts: CartSyncConflict[];\n    changes: CartSyncResult['changes'];\n  }, CartError>> {\n    const conflicts: CartSyncConflict[] = [];\n    const changes = {\n      itemsAdded: 0,\n      itemsUpdated: 0,\n      itemsRemoved: 0,\n      couponsAdded: 0,\n      couponsRemoved: 0\n    };\n\n    try {\n      // Merge items using the configured strategy\n      const itemMergeResult = await this.mergeCartItems(\n        localCart.items,\n        serverCart.items,\n        this.config.strategy\n      );\n      \n      if (!itemMergeResult.success) {\n        return itemMergeResult;\n      }\n\n      const { mergedItems, itemConflicts } = itemMergeResult.data;\n      conflicts.push(...itemConflicts);\n\n      // Count changes\n      changes.itemsAdded = mergedItems.filter(item => \n        !localCart.items.some(local => local.key === item.key)\n      ).length;\n      \n      changes.itemsUpdated = mergedItems.filter(item => {\n        const localItem = localCart.items.find(local => local.key === item.key);\n        return localItem && localItem.quantity !== item.quantity;\n      }).length;\n\n      changes.itemsRemoved = localCart.items.filter(item =>\n        !mergedItems.some(merged => merged.key === item.key)\n      ).length;\n\n      // Merge coupons\n      const couponMergeResult = this.mergeCoupons(\n        localCart.appliedCoupons,\n        serverCart.appliedCoupons\n      );\n      \n      conflicts.push(...couponMergeResult.conflicts);\n      changes.couponsAdded = couponMergeResult.couponsAdded;\n      changes.couponsRemoved = couponMergeResult.couponsRemoved;\n\n      // Create merged cart\n      const mergedCart: Cart = {\n        ...localCart,\n        items: mergedItems,\n        appliedCoupons: couponMergeResult.mergedCoupons,\n        itemCount: mergedItems.reduce((sum, item) => sum + item.quantity, 0),\n        updatedAt: new Date()\n      };\n\n      return Ok({\n        mergedCart,\n        conflicts,\n        changes\n      });\n    } catch (error) {\n      return Err(ErrorFactory.cartError(\n        'Failed to merge carts',\n        { error: error instanceof Error ? error.message : 'Unknown error' }\n      ));\n    }\n  }\n\n  /**\n   * Merge cart items with conflict detection\n   */\n  private async mergeCartItems(\n    localItems: readonly CartItem[],\n    serverItems: readonly CartItem[],\n    strategy: CartSyncStrategy\n  ): Promise<Result<{\n    mergedItems: CartItem[];\n    itemConflicts: CartSyncConflict[];\n  }, CartError>> {\n    const mergedItems: CartItem[] = [];\n    const itemConflicts: CartSyncConflict[] = [];\n    const processedKeys = new Set<string>();\n\n    try {\n      // Process local items\n      for (const localItem of localItems) {\n        const serverItem = serverItems.find(item => item.key === localItem.key);\n        processedKeys.add(localItem.key);\n\n        if (!serverItem) {\n          // Item only exists locally\n          mergedItems.push(localItem);\n        } else if (localItem.quantity === serverItem.quantity) {\n          // No conflict, use local item (more recent updates)\n          mergedItems.push(localItem);\n        } else {\n          // Quantity conflict detected\n          const conflict: CartSyncConflict = {\n            type: 'item_quantity',\n            itemKey: localItem.key,\n            localValue: localItem.quantity,\n            serverValue: serverItem.quantity,\n            message: `Quantity mismatch for ${localItem.name}`,\n            suggestion: this.getQuantityMergeSuggestion(strategy, localItem.quantity, serverItem.quantity)\n          };\n          \n          itemConflicts.push(conflict);\n\n          // Auto-resolve based on strategy\n          const resolvedQuantity = this.resolveQuantityConflict(\n            strategy,\n            localItem.quantity,\n            serverItem.quantity\n          );\n\n          mergedItems.push({\n            ...localItem,\n            quantity: resolvedQuantity,\n            totalPrice: localItem.price * resolvedQuantity,\n            updatedAt: new Date()\n          });\n        }\n      }\n\n      // Process server items not in local cart\n      for (const serverItem of serverItems) {\n        if (!processedKeys.has(serverItem.key)) {\n          mergedItems.push(serverItem);\n        }\n      }\n\n      return Ok({\n        mergedItems,\n        itemConflicts\n      });\n    } catch (error) {\n      return Err(ErrorFactory.cartError(\n        'Failed to merge cart items',\n        { error: error instanceof Error ? error.message : 'Unknown error' }\n      ));\n    }\n  }\n\n  /**\n   * Merge applied coupons\n   */\n  private mergeCoupons(\n    localCoupons: readonly Cart['appliedCoupons'][0][],\n    serverCoupons: readonly Cart['appliedCoupons'][0][]\n  ): {\n    mergedCoupons: Cart['appliedCoupons'][0][];\n    conflicts: CartSyncConflict[];\n    couponsAdded: number;\n    couponsRemoved: number;\n  } {\n    const mergedCoupons: Cart['appliedCoupons'][0][] = [];\n    const conflicts: CartSyncConflict[] = [];\n    const processedCodes = new Set<string>();\n\n    let couponsAdded = 0;\n    let couponsRemoved = 0;\n\n    // Add local coupons\n    for (const localCoupon of localCoupons) {\n      processedCodes.add(localCoupon.code);\n      mergedCoupons.push(localCoupon);\n    }\n\n    // Add server coupons that don't exist locally\n    for (const serverCoupon of serverCoupons) {\n      if (!processedCodes.has(serverCoupon.code)) {\n        mergedCoupons.push(serverCoupon);\n        couponsAdded++;\n      }\n    }\n\n    // Count removed coupons\n    couponsRemoved = serverCoupons.filter(coupon => \n      !localCoupons.some(local => local.code === coupon.code)\n    ).length;\n\n    return {\n      mergedCoupons,\n      conflicts,\n      couponsAdded,\n      couponsRemoved\n    };\n  }\n\n  /**\n   * Resolve conflicts based on strategy\n   */\n  private async resolveConflicts(\n    localCart: Cart,\n    serverCart: Cart,\n    conflicts: readonly CartSyncConflict[],\n    strategy: CartSyncStrategy\n  ): Promise<Result<Cart, CartError>> {\n    // For now, conflicts are auto-resolved during merge\n    // In the future, this could prompt the user or apply more sophisticated resolution\n    return Ok(localCart);\n  }\n\n  /**\n   * Resolve quantity conflict based on strategy\n   */\n  private resolveQuantityConflict(\n    strategy: CartSyncStrategy,\n    localQuantity: number,\n    serverQuantity: number\n  ): number {\n    switch (strategy) {\n      case 'local_wins':\n        return localQuantity;\n      case 'server_wins':\n        return serverQuantity;\n      case 'merge_quantities':\n        return localQuantity + serverQuantity;\n      case 'merge_smart':\n      default:\n        // Use the higher quantity (assumes user wants more items)\n        return Math.max(localQuantity, serverQuantity);\n    }\n  }\n\n  /**\n   * Get quantity merge suggestion for conflict\n   */\n  private getQuantityMergeSuggestion(\n    strategy: CartSyncStrategy,\n    localQuantity: number,\n    serverQuantity: number\n  ): string {\n    switch (strategy) {\n      case 'local_wins':\n        return `Keep local quantity: ${localQuantity}`;\n      case 'server_wins':\n        return `Use server quantity: ${serverQuantity}`;\n      case 'merge_quantities':\n        return `Add quantities: ${localQuantity + serverQuantity}`;\n      case 'merge_smart':\n      default:\n        return `Use higher quantity: ${Math.max(localQuantity, serverQuantity)}`;\n    }\n  }\n\n  /**\n   * Process individual queue item\n   */\n  private async processQueueItem(\n    item: CartSyncQueueItem,\n    localCart: Cart,\n    authContext: UserAuthContext\n  ): Promise<void> {\n    // This is a placeholder for processing offline actions\n    // In a real implementation, this would replay the action on the server\n    console.warn('Cart sync queue processing not yet implemented for action:', item.action);\n  }\n\n  /**\n   * Set sync status and notify handlers\n   */\n  private setSyncStatus(status: CartSyncStatus): void {\n    this.syncStatus = status;\n  }\n\n  /**\n   * Notify event handlers\n   */\n  private notifyEventHandlers(\n    event: keyof CartSyncEventHandler,\n    ...args: unknown[]\n  ): void {\n    for (const handler of this.eventHandlers) {\n      try {\n        switch (event) {\n          case 'onSyncStart':\n            handler.onSyncStart();\n            break;\n          case 'onSyncComplete':\n            handler.onSyncComplete(args[0] as CartSyncResult);\n            break;\n          case 'onSyncError':\n            handler.onSyncError(args[0] as CartError);\n            break;\n          case 'onConflictDetected':\n            handler.onConflictDetected(args[0] as readonly CartSyncConflict[]);\n            break;\n        }\n      } catch (error) {\n        console.error('Error in cart sync event handler:', error);\n      }\n    }\n  }\n\n  /**\n   * Setup network monitoring\n   */\n  private setupNetworkMonitoring(): void {\n    if (typeof navigator !== 'undefined' && 'onLine' in navigator) {\n      this.isOnline = navigator.onLine;\n      \n      window.addEventListener('online', () => {\n        this.isOnline = true;\n      });\n      \n      window.addEventListener('offline', () => {\n        this.isOnline = false;\n      });\n    }\n  }\n\n  /**\n   * Setup background sync timer\n   */  \n  private setupBackgroundSync(): void {\n    if (!this.config.enabled || !this.config.backgroundSync) {\n      return;\n    }\n\n    this.stopBackgroundSync();\n    \n    this.backgroundSyncTimer = setInterval(() => {\n      // Background sync will be triggered by the cart service\n      // when it has access to the current cart and auth context\n    }, this.config.syncIntervalMs);\n  }\n\n  /**\n   * Stop background sync timer\n   */\n  private stopBackgroundSync(): void {\n    if (this.backgroundSyncTimer) {\n      clearInterval(this.backgroundSyncTimer);\n      this.backgroundSyncTimer = undefined;\n    }\n  }\n\n  /**\n   * Generate unique device ID\n   */\n  private generateDeviceId(): string {\n    if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n      return crypto.randomUUID();\n    }\n    \n    // Fallback for environments without crypto.randomUUID\n    return 'device-' + Math.random().toString(36).substring(2, 15) + \n           Math.random().toString(36).substring(2, 15);\n  }\n\n  /**\n   * Generate unique ID\n   */\n  private generateId(): string {\n    return Date.now().toString(36) + Math.random().toString(36).substring(2);\n  }\n} ","/**\n * Cart management module for WooCommerce Headless SDK\n * Following the enhanced unified-10x-dev framework\n */\n\nimport { HttpClient } from '../../core/client';\nimport { CacheManager } from '../../core/cache';\nimport { Result, Ok, Err, isErr, unwrap } from '../../types/result';\nimport { WooError, ErrorFactory } from '../../types/errors';\nimport { \n  WooCommerceProduct,\n  WooCommerceCoupon\n} from '../../types/commerce';\nimport {\n  Cart,\n  CartItem,\n  CartAddItemRequest,\n  CartTotals,\n  CartValidationResult,\n  CartPersistenceConfig,\n  AppliedCoupon,\n  ShippingMethod,\n  CartFee,\n  CartAddItemRequestSchema,\n  CartSyncResult,\n  CartSyncStatus,\n  isCart\n} from '../../types/cart';\nimport { CartConfig } from '../../types/config';\nimport { UserAuthContext } from '../../types/user';\nimport { generateId } from '../../test/utils';\nimport { CartSyncManager, CartSyncEventHandler } from './sync';\n\n/**\n * Cart persistence manager for handling cart storage\n */\nclass CartPersistenceManager {\n  private readonly config: CartPersistenceConfig;\n\n  constructor(config: CartPersistenceConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Save cart to persistent storage\n   */\n  async save(cart: Cart): Promise<Result<void, WooError>> {\n    try {\n      const serialized = JSON.stringify(cart, (key, value) => {\n        // Convert dates to ISO strings for serialization\n        if (value instanceof Date) {\n          return value.toISOString();\n        }\n        return value;\n      });\n\n      switch (this.config.strategy) {\n        case 'localStorage':\n          if (typeof localStorage !== 'undefined') {\n            localStorage.setItem(this.getStorageKey(), serialized);\n          }\n          break;\n\n        case 'sessionStorage':\n          if (typeof sessionStorage !== 'undefined') {\n            sessionStorage.setItem(this.getStorageKey(), serialized);\n          }\n          break;\n\n        case 'indexedDB':\n          return this.saveToIndexedDB(cart);\n\n        case 'server':\n          return this.saveToServer(cart);\n\n        case 'none':\n          // No persistence\n          break;\n\n        default:\n          return Err(ErrorFactory.configurationError('Invalid persistence strategy'));\n      }\n\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.persistenceError(\n        'Failed to save cart',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Load cart from persistent storage\n   */\n  async load(): Promise<Result<Cart | null, WooError>> {\n    try {\n      let serialized: string | null = null;\n\n      switch (this.config.strategy) {\n        case 'localStorage':\n          if (typeof localStorage !== 'undefined') {\n            serialized = localStorage.getItem(this.getStorageKey());\n          }\n          break;\n\n        case 'sessionStorage':\n          if (typeof sessionStorage !== 'undefined') {\n            serialized = sessionStorage.getItem(this.getStorageKey());\n          }\n          break;\n\n        case 'indexedDB':\n          return this.loadFromIndexedDB();\n\n        case 'server':\n          return this.loadFromServer();\n\n        case 'none':\n          return Ok(null);\n\n        default:\n          return Err(ErrorFactory.configurationError('Invalid persistence strategy'));\n      }\n\n      if (!serialized) {\n        return Ok(null);\n      }\n\n      const parsed = JSON.parse(serialized, (key, value) => {\n        // Convert ISO strings back to dates\n        if (typeof value === 'string' && /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(value)) {\n          return new Date(value);\n        }\n        return value;\n      });\n\n      // Validate the parsed cart\n      if (isCart(parsed)) {\n        return Ok(parsed);\n      } else {\n        return Err(ErrorFactory.validationError('Invalid cart data in storage'));\n      }\n    } catch (error) {\n      return Err(ErrorFactory.persistenceError(\n        'Failed to load cart',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Clear cart from persistent storage\n   */\n  async clear(): Promise<Result<void, WooError>> {\n    try {\n      switch (this.config.strategy) {\n        case 'localStorage':\n          if (typeof localStorage !== 'undefined') {\n            localStorage.removeItem(this.getStorageKey());\n          }\n          break;\n\n        case 'sessionStorage':\n          if (typeof sessionStorage !== 'undefined') {\n            sessionStorage.removeItem(this.getStorageKey());\n          }\n          break;\n\n        case 'indexedDB':\n          return this.clearFromIndexedDB();\n\n        case 'server':\n          return this.clearFromServer();\n\n        case 'none':\n          // No persistence to clear\n          break;\n\n        default:\n          return Err(ErrorFactory.configurationError('Invalid persistence strategy'));\n      }\n\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.persistenceError(\n        'Failed to clear cart',\n        error\n      ));\n    }\n  }\n\n  private getStorageKey(): string {\n    return this.config.key || 'woo-headless-cart';\n  }\n\n  private async saveToIndexedDB(cart: Cart): Promise<Result<void, WooError>> {\n    try {\n      if (typeof window === 'undefined' || !window.indexedDB) {\n        return Err(ErrorFactory.persistenceError('IndexedDB not available'));\n      }\n\n      const db = await this.openIndexedDB();\n      const transaction = db.transaction(['carts'], 'readwrite');\n      const store = transaction.objectStore('carts');\n      \n      await new Promise<void>((resolve, reject) => {\n        const request = store.put({\n          id: this.getStorageKey(),\n          cart: cart,\n          timestamp: Date.now(),\n          expiresAt: this.config.expirationDays ? \n            Date.now() + (this.config.expirationDays * 24 * 60 * 60 * 1000) : \n            null\n        });\n        \n        request.onsuccess = () => resolve();\n        request.onerror = () => reject(request.error);\n      });\n\n      db.close();\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.persistenceError(\n        'Failed to save cart to IndexedDB',\n        error\n      ));\n    }\n  }\n\n  private async loadFromIndexedDB(): Promise<Result<Cart | null, WooError>> {\n    try {\n      if (typeof window === 'undefined' || !window.indexedDB) {\n        return Ok(null);\n      }\n\n      const db = await this.openIndexedDB();\n      const transaction = db.transaction(['carts'], 'readonly');\n      const store = transaction.objectStore('carts');\n      \n      const result = await new Promise<any>((resolve, reject) => {\n        const request = store.get(this.getStorageKey());\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = () => reject(request.error);\n      });\n\n      db.close();\n\n      if (!result) {\n        return Ok(null);\n      }\n\n      // Check expiration\n      if (result.expiresAt && Date.now() > result.expiresAt) {\n        await this.clearFromIndexedDB();\n        return Ok(null);\n      }\n\n      // Validate the loaded cart\n      if (isCart(result.cart)) {\n        return Ok(result.cart);\n      } else {\n        return Err(ErrorFactory.validationError('Invalid cart data in IndexedDB'));\n      }\n    } catch (error) {\n      return Err(ErrorFactory.persistenceError(\n        'Failed to load cart from IndexedDB',\n        error\n      ));\n    }\n  }\n\n  private async clearFromIndexedDB(): Promise<Result<void, WooError>> {\n    try {\n      if (typeof window === 'undefined' || !window.indexedDB) {\n        return Ok(undefined);\n      }\n\n      const db = await this.openIndexedDB();\n      const transaction = db.transaction(['carts'], 'readwrite');\n      const store = transaction.objectStore('carts');\n      \n      await new Promise<void>((resolve, reject) => {\n        const request = store.delete(this.getStorageKey());\n        request.onsuccess = () => resolve();\n        request.onerror = () => reject(request.error);\n      });\n\n      db.close();\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.persistenceError(\n        'Failed to clear cart from IndexedDB',\n        error\n      ));\n    }\n  }\n\n  private async openIndexedDB(): Promise<IDBDatabase> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('WooHeadlessCart', 1);\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result);\n      \n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        if (!db.objectStoreNames.contains('carts')) {\n          const store = db.createObjectStore('carts', { keyPath: 'id' });\n          store.createIndex('timestamp', 'timestamp', { unique: false });\n          store.createIndex('expiresAt', 'expiresAt', { unique: false });\n        }\n      };\n    });\n  }\n\n  private async saveToServer(cart: Cart): Promise<Result<void, WooError>> {\n    try {\n      if (!this.config.syncToServer) {\n        return Err(ErrorFactory.configurationError(\n          'Server sync is disabled',\n          'Enable syncToServer in cart persistence config'\n        ));\n      }\n\n      // This would integrate with your server-side cart API\n      // For now, we'll implement a basic HTTP client integration\n      const cartData = {\n        sessionId: cart.sessionId,\n        customerId: cart.customerId,\n        items: cart.items,\n        totals: cart.totals,\n        appliedCoupons: cart.appliedCoupons,\n        updatedAt: cart.updatedAt.toISOString(),\n        expiresAt: cart.expiresAt?.toISOString()\n      };\n\n      // TODO: This should use the HttpClient instance from the service\n      // For now, we'll use a placeholder that developers can implement\n      console.warn('Server-side cart persistence requires custom implementation');\n      console.log('Cart data to sync:', cartData);\n      \n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.persistenceError(\n        'Failed to save cart to server',\n        error\n      ));\n    }\n  }\n\n  private async loadFromServer(): Promise<Result<Cart | null, WooError>> {\n    try {\n      if (!this.config.syncToServer) {\n        return Ok(null);\n      }\n\n      // This would integrate with your server-side cart API\n      // Developers should implement their own server integration\n      console.warn('Server-side cart persistence requires custom implementation');\n      \n      // Return null for now - developers can override this method\n      return Ok(null);\n    } catch (error) {\n      return Err(ErrorFactory.persistenceError(\n        'Failed to load cart from server',\n        error\n      ));\n    }\n  }\n\n  private async clearFromServer(): Promise<Result<void, WooError>> {\n    try {\n      if (!this.config.syncToServer) {\n        return Ok(undefined);\n      }\n\n      // This would integrate with your server-side cart API\n      console.warn('Server-side cart persistence requires custom implementation');\n      \n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.persistenceError(\n        'Failed to clear cart from server',\n        error\n      ));\n    }\n  }\n}\n\n/**\n * Advanced cart totals calculator with comprehensive tax, shipping, and discount handling\n */\nclass CartTotalsCalculator {\n  private readonly config: CartConfig;\n\n  constructor(config: CartConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Calculate comprehensive cart totals\n   */\n  calculate(\n    items: readonly CartItem[], \n    appliedCoupons: readonly AppliedCoupon[] = [],\n    shippingMethods: readonly ShippingMethod[] = [],\n    fees: readonly CartFee[] = [],\n    customerData?: { taxRate?: number; country?: string; state?: string }\n  ): CartTotals {\n    // Step 1: Calculate item subtotals\n    const subtotal = this.calculateSubtotal(items);\n    const subtotalTax = this.calculateSubtotalTax(items, customerData);\n\n    // Step 2: Calculate discount amounts\n    const { discountTotal, discountTax } = this.calculateDiscounts(items, appliedCoupons, customerData);\n\n    // Step 3: Calculate cart contents after discounts\n    const cartContentsTotal = Math.max(0, subtotal - discountTotal);\n    const cartContentsTax = Math.max(0, subtotalTax - discountTax);\n\n    // Step 4: Calculate shipping\n    const { shippingTotal, shippingTax } = this.calculateShipping(shippingMethods, cartContentsTotal, customerData);\n\n    // Step 5: Calculate fees\n    const { feeTotal, feeTax } = this.calculateFees(fees, cartContentsTotal, customerData);\n\n    // Step 6: Calculate final totals\n    const totalTax = cartContentsTax + shippingTax + feeTax;\n    const total = this.calculateFinalTotal(cartContentsTotal, shippingTotal, feeTotal, totalTax);\n\n    return {\n      subtotal: this.roundTotal(subtotal),\n      subtotalTax: this.roundTotal(subtotalTax),\n      tax: this.roundTotal(totalTax),\n      shipping: this.roundTotal(shippingTotal),\n      shippingTotal: this.roundTotal(shippingTotal), // alias for shipping\n      shippingTax: this.roundTotal(shippingTax),\n      discount: this.roundTotal(discountTotal),\n      discountTotal: this.roundTotal(discountTotal), // alias for discount\n      discountTax: this.roundTotal(discountTax),\n      fees: this.roundTotal(feeTotal),\n      feeTotal: this.roundTotal(feeTotal), // alias for fees\n      feeTax: this.roundTotal(feeTax),\n      total: this.roundTotal(total),\n      totalTax: this.roundTotal(totalTax),\n      cartContentsTotal: this.roundTotal(cartContentsTotal),\n      cartContentsTax: this.roundTotal(cartContentsTax)\n    };\n  }\n\n  private calculateSubtotal(items: readonly CartItem[]): number {\n    return items.reduce((sum, item) => {\n      if (this.config.taxCalculation.pricesIncludeTax) {\n        // If prices include tax, use the item price directly\n        return sum + item.totalPrice;\n      } else {\n        // Use regular price without tax\n        return sum + (item.regularPrice * item.quantity);\n      }\n    }, 0);\n  }\n\n  private calculateSubtotalTax(\n    items: readonly CartItem[], \n    customerData?: { taxRate?: number; country?: string; state?: string }\n  ): number {\n    if (!this.config.taxCalculation.enabled) {\n      return 0;\n    }\n\n    const taxRate = customerData?.taxRate || this.getDefaultTaxRate(customerData?.country, customerData?.state);\n    \n    return items.reduce((sum, item) => {\n      const itemSubtotal = item.regularPrice * item.quantity;\n      \n      if (this.config.taxCalculation.pricesIncludeTax) {\n        // Extract tax from price that includes tax\n        return sum + (itemSubtotal * taxRate / (1 + taxRate));\n      } else {\n        // Calculate tax on price that excludes tax\n        return sum + (itemSubtotal * taxRate);\n      }\n    }, 0);\n  }\n\n  private calculateDiscounts(\n    items: readonly CartItem[], \n    coupons: readonly AppliedCoupon[],\n    customerData?: { taxRate?: number; country?: string; state?: string }\n  ): { discountTotal: number; discountTax: number } {\n    let discountTotal = 0;\n    let discountTax = 0;\n\n    for (const coupon of coupons) {\n      const discount = this.calculateSingleCouponDiscount(items, coupon);\n      discountTotal += discount;\n\n      // Calculate tax on discount if applicable\n      if (this.config.taxCalculation.enabled && !this.config.taxCalculation.pricesIncludeTax) {\n        const taxRate = customerData?.taxRate || this.getDefaultTaxRate(customerData?.country, customerData?.state);\n        discountTax += discount * taxRate;\n      }\n    }\n\n    return { discountTotal, discountTax };\n  }\n\n  private calculateSingleCouponDiscount(items: readonly CartItem[], coupon: AppliedCoupon): number {\n    // Filter items that the coupon applies to\n    const applicableItems = items.filter(item => this.couponAppliesToItem(item, coupon));\n    \n    if (applicableItems.length === 0) {\n      return 0;\n    }\n\n    const applicableSubtotal = applicableItems.reduce((sum, item) => sum + item.totalPrice, 0);\n\n    switch (coupon.discountType) {\n      case 'fixed_cart':\n        // Fixed cart discount applies to the whole cart\n        return Math.min(coupon.amount, applicableSubtotal);\n      \n      case 'percent':\n        // Percentage discount\n        const percentDiscount = applicableSubtotal * (coupon.amount / 100);\n        return coupon.maximumAmount ? Math.min(percentDiscount, coupon.maximumAmount) : percentDiscount;\n      \n      case 'fixed_product':\n        // Fixed amount per product\n        return Math.min(\n          applicableItems.reduce((sum, item) => sum + (coupon.amount * item.quantity), 0),\n          applicableSubtotal\n        );\n      \n      default:\n        return 0;\n    }\n  }\n\n  private couponAppliesToItem(item: CartItem, coupon: AppliedCoupon): boolean {\n    // Check if coupon is restricted to specific products\n    if (coupon.productIds && coupon.productIds.length > 0) {\n      if (!coupon.productIds.includes(item.productId)) {\n        return false;\n      }\n    }\n\n    // Check if product is excluded\n    if (coupon.excludedProductIds && coupon.excludedProductIds.includes(item.productId)) {\n      return false;\n    }\n\n    // Check category restrictions (would require product category data)\n    // This would be implemented based on your product data structure\n\n    return true;\n  }\n\n  private calculateShipping(\n    shippingMethods: readonly ShippingMethod[], \n    cartTotal: number,\n    customerData?: { taxRate?: number; country?: string; state?: string }\n  ): { shippingTotal: number; shippingTax: number } {\n    if (!this.config.enableShipping || shippingMethods.length === 0) {\n      return { shippingTotal: 0, shippingTax: 0 };\n    }\n\n    // Use the first shipping method for now (in practice, user would choose)\n    const selectedMethod = shippingMethods[0];\n    if (!selectedMethod) {\n      return { shippingTotal: 0, shippingTax: 0 };\n    }\n    \n    const shippingTotal = selectedMethod.cost;\n\n    let shippingTax = 0;\n    if (this.config.taxCalculation.enabled && selectedMethod.taxable) {\n      const taxRate = customerData?.taxRate || this.getDefaultTaxRate(customerData?.country, customerData?.state);\n      shippingTax = selectedMethod.taxes?.reduce((sum, tax) => sum + tax.total, 0) || (shippingTotal * taxRate);\n    }\n\n    return { shippingTotal, shippingTax };\n  }\n\n  private calculateFees(\n    fees: readonly CartFee[], \n    cartTotal: number,\n    customerData?: { taxRate?: number; country?: string; state?: string }\n  ): { feeTotal: number; feeTax: number } {\n    if (!this.config.enableFees || fees.length === 0) {\n      return { feeTotal: 0, feeTax: 0 };\n    }\n\n    const feeTotal = fees.reduce((sum, fee) => sum + fee.amount, 0);\n\n    let feeTax = 0;\n    if (this.config.taxCalculation.enabled) {\n      const taxRate = customerData?.taxRate || this.getDefaultTaxRate(customerData?.country, customerData?.state);\n      \n      feeTax = fees.reduce((sum, fee) => {\n        if (fee.taxable) {\n          return sum + (fee.taxes?.reduce((taxSum, tax) => taxSum + tax.total, 0) || (fee.amount * taxRate));\n        }\n        return sum;\n      }, 0);\n    }\n\n    return { feeTotal, feeTax };\n  }\n\n  private calculateFinalTotal(\n    cartContentsTotal: number, \n    shippingTotal: number, \n    feeTotal: number, \n    totalTax: number\n  ): number {\n    if (this.config.taxCalculation.pricesIncludeTax) {\n      // Prices include tax, so just add shipping and fees\n      return cartContentsTotal + shippingTotal + feeTotal;\n    } else {\n      // Add tax to the total\n      return cartContentsTotal + shippingTotal + feeTotal + totalTax;\n    }\n  }\n\n  private getDefaultTaxRate(country?: string, state?: string): number {\n    // Default tax rates by country/state\n    // In a real implementation, this would come from a tax service or database\n    const defaultRates: Record<string, number> = {\n      'US': 0.0875, // Average US sales tax\n      'CA': 0.13,   // Average Canadian tax\n      'GB': 0.20,   // UK VAT\n      'DE': 0.19,   // Germany VAT\n      'FR': 0.20,   // France VAT\n      'AU': 0.10,   // Australia GST\n    };\n\n    return defaultRates[country || 'US'] || 0.10; // Default 10%\n  }\n\n  private roundTotal(amount: number): number {\n    if (this.config.taxCalculation.roundAtSubtotal) {\n      return Math.round(amount * 100) / 100;\n    }\n    return Math.round(amount * 10000) / 10000; // Round to 4 decimal places for intermediate calculations\n  }\n}\n\n/**\n * Main cart service class\n */\nexport class CartService {\n  private readonly client: HttpClient;\n  private readonly cache: CacheManager;\n  private readonly config: CartConfig;\n  private readonly persistence: CartPersistenceManager;\n  private readonly calculator: CartTotalsCalculator;\n  private readonly syncManager: CartSyncManager;\n  private currentCart: Cart | null = null;\n  private authContext: UserAuthContext | null = null;\n\n  constructor(\n    client: HttpClient, \n    cache: CacheManager, \n    config: CartConfig\n  ) {\n    this.client = client;\n    this.cache = cache;\n    this.config = config;\n    this.persistence = new CartPersistenceManager(config.persistence);\n    this.calculator = new CartTotalsCalculator(config);\n    this.syncManager = new CartSyncManager(config.sync, client);\n  }\n\n  /**\n   * Get current cart\n   */\n  async getCart(): Promise<Result<Cart, WooError>> {\n    try {\n      if (!this.currentCart) {\n        const loadResult = await this.persistence.load();\n        if (!loadResult.success) {\n          return loadResult;\n        }\n\n        this.currentCart = loadResult.data || this.createEmptyCart();\n      }\n\n      return Ok(this.currentCart);\n    } catch (error) {\n      return Err(ErrorFactory.cartError(\n        'Failed to get cart',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Add item to cart\n   */\n  async addItem(request: CartAddItemRequest): Promise<Result<Cart, WooError>> {\n    try {\n      // Validate request\n      const validationResult = this.validateAddItemRequest(request);\n      if (!validationResult.success) {\n        return validationResult;\n      }\n\n      // Get current cart\n      const cartResult = await this.getCart();\n      if (!cartResult.success) {\n        return cartResult;\n      }\n\n      const cart = cartResult.data;\n\n      // Fetch product data for validation and cart item creation\n      const productResult = await this.fetchProductData(request);\n      if (!productResult.success) {\n        return productResult;\n      }\n\n      const product = productResult.data;\n\n      // Validate stock if enabled\n      if (this.config.validateStock) {\n        const stockValidation = this.validateStock(product, request.quantity);\n        if (!stockValidation.success) {\n          return stockValidation;\n        }\n      }\n\n      // Generate cart item key\n      const itemKey = this.generateCartItemKey(request);\n\n      // Check if item already exists\n      const existingItemIndex = cart.items.findIndex(item => item.key === itemKey);\n\n      let updatedItems: CartItem[];\n\n      if (existingItemIndex >= 0) {\n        if (request.replace) {\n          // Replace existing item\n          updatedItems = [...cart.items];\n          updatedItems[existingItemIndex] = this.createCartItem(product, request, itemKey);\n        } else {\n          // Update quantity\n          const existingItem = cart.items[existingItemIndex];\n          if (!existingItem) {\n            return Err(ErrorFactory.cartError('Cart item not found'));\n          }\n          \n          const newQuantity = existingItem.quantity + request.quantity;\n\n          // Validate new quantity\n          if (newQuantity > this.config.maxQuantityPerItem) {\n            return Err(ErrorFactory.validationError(\n              `Maximum quantity per item is ${this.config.maxQuantityPerItem}`\n            ));\n          }\n\n          const updatedItem: CartItem = {\n            key: existingItem.key,\n            productId: existingItem.productId,\n            variationId: existingItem.variationId,\n            quantity: newQuantity,\n            name: existingItem.name,\n            price: existingItem.price,\n            regularPrice: existingItem.regularPrice,\n            salePrice: existingItem.salePrice,\n            totalPrice: existingItem.price * newQuantity,\n            total: existingItem.price * newQuantity, // alias for totalPrice\n            sku: existingItem.sku,\n            weight: existingItem.weight,\n            ...(existingItem.dimensions && { dimensions: existingItem.dimensions }),\n            ...(existingItem.image && { image: existingItem.image }),\n            stockQuantity: existingItem.stockQuantity,\n            stockStatus: existingItem.stockStatus,\n            backorders: existingItem.backorders,\n            ...(existingItem.quantityLimits && { quantityLimits: existingItem.quantityLimits }),\n            ...(existingItem.meta && { meta: existingItem.meta }),\n            ...(existingItem.attributes && { attributes: existingItem.attributes }),\n            addedAt: existingItem.addedAt,\n            updatedAt: new Date(),\n            backordersAllowed: existingItem.backordersAllowed,\n            soldIndividually: existingItem.soldIndividually,\n            downloadable: existingItem.downloadable,\n            virtual: existingItem.virtual\n          };\n\n          updatedItems = [...cart.items];\n          updatedItems[existingItemIndex] = updatedItem;\n        }\n      } else {\n        // Add new item\n        if (cart.items.length >= this.config.maxItems) {\n          return Err(ErrorFactory.validationError(\n            `Maximum ${this.config.maxItems} items allowed in cart`\n          ));\n        }\n\n        const newItem = this.createCartItem(product, request, itemKey);\n        updatedItems = [...cart.items, newItem];\n      }\n\n      // Create updated cart\n      const updatedCart = this.updateCartWithItems(cart, updatedItems);\n\n      // Save cart\n      const saveResult = await this.persistence.save(updatedCart);\n      if (!saveResult.success) {\n        return saveResult;\n      }\n\n      this.currentCart = updatedCart;\n      return Ok(updatedCart);\n\n    } catch (error) {\n      return Err(ErrorFactory.cartError(\n        'Failed to add item to cart',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Update item quantity in cart\n   */\n  async updateItem(itemKey: string, quantity: number): Promise<Result<Cart, WooError>> {\n    try {\n      if (quantity <= 0) {\n        const removeResult = await this.removeItem(itemKey);\n        if (!removeResult.success) {\n          return removeResult;\n        }\n        // Return updated cart after removal\n        return this.getCart();\n      }\n\n      // Get current cart\n      const cartResult = await this.getCart();\n      if (!cartResult.success) {\n        return cartResult;\n      }\n\n      const cart = cartResult.data;\n      const itemIndex = cart.items.findIndex(item => item.key === itemKey);\n\n      if (itemIndex === -1) {\n        return Err(ErrorFactory.cartError(\n          'Item not found in cart',\n          { itemKey }\n        ));\n      }\n\n      if (quantity > this.config.maxQuantityPerItem) {\n        return Err(ErrorFactory.validationError(\n          `Maximum quantity per item is ${this.config.maxQuantityPerItem}`\n        ));\n      }\n\n      const item = cart.items[itemIndex];\n      if (!item) {\n        return Err(ErrorFactory.cartError('Cart item not found'));\n      }\n\n      // Validate stock if enabled\n      if (this.config.validateStock) {\n        if (item.stockStatus === 'outofstock') {\n          return Err(ErrorFactory.validationError('Product is out of stock'));\n        }\n\n        if (item.stockQuantity !== undefined && quantity > item.stockQuantity) {\n          return Err(ErrorFactory.validationError(\n            `Only ${item.stockQuantity} items available in stock`\n          ));\n        }\n      }\n\n      // Update item with explicit type\n      const updatedItem: CartItem = {\n        key: item.key,\n        productId: item.productId,\n        variationId: item.variationId,\n        quantity,\n        name: item.name,\n        price: item.price,\n        regularPrice: item.regularPrice,\n        salePrice: item.salePrice,\n        totalPrice: item.price * quantity,\n        total: item.price * quantity, // alias for totalPrice\n        sku: item.sku,\n        weight: item.weight,\n        ...(item.dimensions && { dimensions: item.dimensions }),\n        ...(item.image && { image: item.image }),\n        stockQuantity: item.stockQuantity,\n        stockStatus: item.stockStatus,\n        backorders: item.backorders,\n        ...(item.quantityLimits && { quantityLimits: item.quantityLimits }),\n        ...(item.meta && { meta: item.meta }),\n        ...(item.attributes && { attributes: item.attributes }),\n        addedAt: item.addedAt,\n        updatedAt: new Date(),\n        backordersAllowed: item.backordersAllowed,\n        soldIndividually: item.soldIndividually,\n        downloadable: item.downloadable,\n        virtual: item.virtual\n      };\n\n      const updatedItems = [...cart.items];\n      updatedItems[itemIndex] = updatedItem;\n\n      // Create updated cart\n      const updatedCart = this.updateCartWithItems(cart, updatedItems);\n\n      // Save cart\n      const saveResult = await this.persistence.save(updatedCart);\n      if (!saveResult.success) {\n        return saveResult;\n      }\n\n      this.currentCart = updatedCart;\n      return Ok(updatedCart);\n\n    } catch (error) {\n      return Err(ErrorFactory.cartError(\n        'Failed to update cart item',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Remove item from cart\n   */\n  async removeItem(itemKey: string): Promise<Result<void, WooError>> {\n    try {\n      const cart = await this.getCart();\n      if (isErr(cart)) {\n        return cart;\n      }\n\n      const cartData = unwrap(cart);\n      const itemIndex = cartData.items.findIndex(item => item.key === itemKey);\n      \n      if (itemIndex === -1) {\n        return Err(ErrorFactory.validationError('Cart item not found'));\n      }\n\n      // Remove item from items array\n      const updatedItems = cartData.items.filter((_, index) => index !== itemIndex);\n      \n      // Calculate new totals\n      const newTotals = this.calculator.calculate(updatedItems, cartData.appliedCoupons, cartData.shippingMethods, cartData.fees);\n      \n      const updatedCart: Cart = {\n        ...cartData,\n        items: updatedItems,\n        totals: newTotals,\n        isEmpty: updatedItems.length === 0,\n        itemCount: updatedItems.reduce((sum, item) => sum + item.quantity, 0),\n        updatedAt: new Date()\n      };\n\n      // Save the updated cart\n      const saveResult = await this.persistence.save(updatedCart);\n      if (!saveResult.success) {\n        return saveResult;\n      }\n      \n      this.currentCart = updatedCart;\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.networkError(\n        error instanceof Error ? error.message : 'Failed to remove cart item'\n      ));\n    }\n  }\n\n  /**\n   * Clear entire cart\n   */\n  async clearCart(): Promise<Result<Cart, WooError>> {\n    try {\n      const emptyCart = this.createEmptyCart();\n\n      // Save empty cart\n      const saveResult = await this.persistence.save(emptyCart);\n      if (!saveResult.success) {\n        return saveResult;\n      }\n\n      this.currentCart = emptyCart;\n      return Ok(emptyCart);\n\n    } catch (error) {\n      return Err(ErrorFactory.cartError(\n        'Failed to clear cart',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Comprehensive cart validation with stock, availability, and business rules\n   */\n  async validateCart(): Promise<Result<CartValidationResult, WooError>> {\n    try {\n      const cartResult = await this.getCart();\n      if (!cartResult.success) {\n        return cartResult;\n      }\n\n      const cart = cartResult.data;\n      // Create mutable arrays for building validation results\n      const mutableErrors: Array<{\n        readonly itemKey: string;\n        readonly code: 'PRODUCT_NOT_FOUND' | 'OUT_OF_STOCK' | 'INSUFFICIENT_STOCK' | 'INVALID_QUANTITY' | 'VARIATION_NOT_FOUND';\n        readonly message: string;\n        readonly currentStock?: number;\n        readonly requestedQuantity?: number;\n      }> = [];\n      \n      const mutableWarnings: Array<{\n        readonly itemKey: string;\n        readonly code: 'LOW_STOCK' | 'BACKORDER' | 'PRICE_CHANGED';\n        readonly message: string;\n        readonly details?: Record<string, unknown>;\n      }> = [];\n\n      // Validate each cart item\n      for (const item of cart.items) {\n        await this.validateCartItem(item, mutableErrors, mutableWarnings);\n      }\n\n      // Validate cart-level constraints\n      const constraintErrors: Array<{\n        readonly itemKey: string;\n        readonly code: 'INVALID_QUANTITY';\n        readonly message: string;\n      }> = [];\n      const constraintWarnings: Array<{\n        readonly itemKey: string;\n        readonly code: 'MINIMUM_ORDER_NOT_MET' | 'HIGH_QUANTITY' | 'EMPTY_CART';\n        readonly message: string;\n        readonly details?: Record<string, unknown>;\n      }> = [];\n      await this.validateCartConstraints(cart, constraintErrors, constraintWarnings);\n      mutableErrors.push(...constraintErrors);\n      constraintWarnings.forEach(w => mutableWarnings.push({\n        itemKey: w.itemKey,\n        code: 'PRICE_CHANGED', // Map constraint warnings to general type\n        message: w.message,\n        ...(w.details && { details: w.details })\n      }));\n\n      // Validate applied coupons\n      const couponErrors: Array<{\n        readonly itemKey: string;\n        readonly code: 'COUPON_EXPIRED' | 'COUPON_USAGE_LIMIT_EXCEEDED' | 'COUPON_MINIMUM_NOT_MET' | 'COUPON_MAXIMUM_EXCEEDED' | 'COUPON_INDIVIDUAL_USE';\n        readonly message: string;\n      }> = [];\n      const couponWarnings: Array<{\n        readonly itemKey: string;\n        readonly code: 'COUPON_VALIDATION_ERROR';\n        readonly message: string;\n        readonly details: Record<string, unknown>;\n      }> = [];\n      await this.validateAppliedCoupons(cart, couponErrors, couponWarnings);\n      couponWarnings.forEach(w => mutableWarnings.push({\n        itemKey: w.itemKey,\n        code: 'PRICE_CHANGED', // Map coupon warnings to general type\n        message: w.message,\n        details: w.details\n      }));\n      // Convert coupon errors to general errors\n      couponErrors.forEach(e => mutableErrors.push({\n        itemKey: e.itemKey,\n        code: 'INVALID_QUANTITY', // Map coupon errors to general type\n        message: e.message\n      }));\n\n      // Validate cart totals integrity\n      const totalsWarnings: Array<{\n        readonly itemKey: string;\n        readonly code: 'TOTALS_MISMATCH' | 'TOTALS_VALIDATION_ERROR';\n        readonly message: string;\n        readonly details: Record<string, unknown>;\n      }> = [];\n      await this.validateCartTotals(cart, totalsWarnings);\n      // Convert totals warnings to general warnings\n      totalsWarnings.forEach(w => mutableWarnings.push({\n        itemKey: w.itemKey,\n        code: 'PRICE_CHANGED', // Map totals warnings to general type\n        message: w.message,\n        details: w.details\n      }));\n\n      // Return readonly arrays\n      return Ok({\n        isValid: mutableErrors.length === 0,\n        errors: mutableErrors as readonly typeof mutableErrors[0][],\n        warnings: mutableWarnings as readonly typeof mutableWarnings[0][]\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.cartError(\n        'Cart validation failed',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Validate individual cart item\n   */\n  private async validateCartItem(\n    item: CartItem, \n    errors: Array<{\n      readonly itemKey: string;\n      readonly code: 'PRODUCT_NOT_FOUND' | 'OUT_OF_STOCK' | 'INSUFFICIENT_STOCK' | 'INVALID_QUANTITY' | 'VARIATION_NOT_FOUND';\n      readonly message: string;\n      readonly currentStock?: number;\n      readonly requestedQuantity?: number;\n    }>, \n    warnings: Array<{\n      readonly itemKey: string;\n      readonly code: 'LOW_STOCK' | 'BACKORDER' | 'PRICE_CHANGED';\n      readonly message: string;\n      readonly details?: Record<string, unknown>;\n    }>\n  ): Promise<void> {\n    try {\n      // 1. Fetch current product data\n      const productResult = await this.fetchProductData({\n        productId: item.productId,\n        variationId: item.variationId,\n        quantity: item.quantity\n      });\n\n      if (isErr(productResult)) {\n        errors.push({\n          itemKey: item.key,\n          code: 'PRODUCT_NOT_FOUND',\n          message: `Product with ID ${item.productId} not found`,\n          currentStock: 0,\n          requestedQuantity: item.quantity\n        });\n        return;\n      }\n\n      const product = unwrap(productResult);\n\n      // 2. Validate product availability\n      if (product.status !== 'publish') {\n        errors.push({\n          itemKey: item.key,\n          code: 'PRODUCT_NOT_FOUND',\n          message: `Product ${item.name} is no longer available`\n        });\n        return;\n      }\n\n      // 3. Validate stock levels\n      const stockErrors: Array<{\n        readonly itemKey: string;\n        readonly code: 'OUT_OF_STOCK' | 'INSUFFICIENT_STOCK';\n        readonly message: string;\n        readonly currentStock?: number;\n        readonly requestedQuantity?: number;\n      }> = [];\n      const stockWarnings: Array<{\n        readonly itemKey: string;\n        readonly code: 'LOW_STOCK' | 'BACKORDER';\n        readonly message: string;\n        readonly details?: Record<string, unknown>;\n      }> = [];\n      await this.validateItemStock(item, product, stockErrors, stockWarnings);\n      stockErrors.forEach(e => errors.push({ ...e, code: e.code as any }));\n      stockWarnings.forEach(w => warnings.push({ ...w, code: w.code as any }));\n\n      // 4. Validate quantity limits\n      const quantityErrors: Array<{\n        readonly itemKey: string;\n        readonly code: 'INVALID_QUANTITY';\n        readonly message: string;\n        readonly requestedQuantity: number;\n      }> = [];\n      const quantityWarnings: Array<{\n        readonly itemKey: string;\n        readonly code: 'INVALID_QUANTITY';\n        readonly message: string;\n        readonly requestedQuantity: number;\n      }> = [];\n      this.validateItemQuantityLimits(item, product, quantityErrors, quantityWarnings);\n      quantityErrors.forEach(e => errors.push({ ...e, code: e.code as any }));\n\n      // 5. Validate price changes\n      const priceWarnings: Array<{\n        readonly itemKey: string;\n        readonly code: 'PRICE_CHANGED';\n        readonly message: string;\n        readonly details: Record<string, unknown>;\n      }> = [];\n      this.validateItemPriceChanges(item, product, priceWarnings);\n      priceWarnings.forEach(w => warnings.push({ ...w, code: w.code as any }));\n\n      // 6. Validate product variations (if applicable)\n      if (item.variationId && product.type === 'variable') {\n        const variationErrors: Array<{\n          readonly itemKey: string;\n          readonly code: 'VARIATION_NOT_FOUND';\n          readonly message: string;\n        }> = [];\n        await this.validateProductVariation(item, product, variationErrors);\n        variationErrors.forEach(e => errors.push({ ...e, code: e.code as any }));\n      }\n\n    } catch (error) {\n      warnings.push({\n        itemKey: item.key,\n        code: 'LOW_STOCK',\n        message: `Could not validate item: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        details: { error }\n      });\n    }\n  }\n\n  /**\n   * Validate item stock levels\n   */\n  private async validateItemStock(\n    item: CartItem,\n    currentProduct: WooCommerceProduct,\n    errors: Array<{\n      readonly itemKey: string;\n      readonly code: 'OUT_OF_STOCK' | 'INSUFFICIENT_STOCK';\n      readonly message: string;\n      readonly currentStock?: number;\n      readonly requestedQuantity?: number;\n    }>,\n    warnings: Array<{\n      readonly itemKey: string;\n      readonly code: 'LOW_STOCK' | 'BACKORDER';\n      readonly message: string;\n      readonly details?: Record<string, unknown>;\n    }>\n  ): Promise<void> {\n    // Check stock status\n    if (currentProduct.stock_status === 'outofstock') {\n      errors.push({\n        itemKey: item.key,\n        code: 'OUT_OF_STOCK',\n        message: `${item.name} is currently out of stock`,\n        currentStock: 0,\n        requestedQuantity: item.quantity\n      });\n      return;\n    }\n\n    // Check specific stock quantity\n    if (currentProduct.manage_stock && currentProduct.stock_quantity !== null) {\n      const availableStock = currentProduct.stock_quantity;\n      \n      if (availableStock != null && item.quantity > availableStock) {\n        if (availableStock === 0) {\n          errors.push({\n            itemKey: item.key,\n            code: 'OUT_OF_STOCK',\n            message: `${item.name} is out of stock`,\n            currentStock: availableStock,\n            requestedQuantity: item.quantity\n          });\n        } else {\n          errors.push({\n            itemKey: item.key,\n            code: 'INSUFFICIENT_STOCK',\n            message: `Only ${availableStock} units of ${item.name} available, but ${item.quantity} requested`,\n            currentStock: availableStock ?? 0,\n            requestedQuantity: item.quantity\n          });\n        }\n        return;\n      }\n\n      // Warn about low stock\n              const lowStockThreshold = Math.max(5, Math.ceil((availableStock ?? 0) * 0.1)); // 10% or 5, whichever is higher\n              if (availableStock != null && availableStock <= lowStockThreshold && availableStock > item.quantity) {\n        warnings.push({\n          itemKey: item.key,\n          code: 'LOW_STOCK',\n          message: `Only ${availableStock ?? 0} units of ${item.name} remaining`,\n          details: { availableStock: availableStock ?? 0, threshold: lowStockThreshold }\n        });\n      }\n    }\n\n    // Check backorder status\n    if (currentProduct.stock_status === 'onbackorder') {\n      if (currentProduct.backorders === 'no') {\n        errors.push({\n          itemKey: item.key,\n          code: 'OUT_OF_STOCK',\n          message: `${item.name} is temporarily unavailable`,\n          currentStock: 0,\n          requestedQuantity: item.quantity\n        });\n      } else {\n        warnings.push({\n          itemKey: item.key,\n          code: 'BACKORDER',\n          message: `${item.name} is on backorder and may take longer to ship`,\n          details: { backorderNotify: currentProduct.backorders === 'notify' }\n        });\n      }\n    }\n  }\n\n  /**\n   * Validate quantity limits for cart item\n   */\n  private validateItemQuantityLimits(\n    item: CartItem,\n    currentProduct: WooCommerceProduct,\n    errors: Array<{\n      readonly itemKey: string;\n      readonly code: 'INVALID_QUANTITY';\n      readonly message: string;\n      readonly requestedQuantity: number;\n    }>,\n    warnings: Array<{\n      readonly itemKey: string;\n      readonly code: 'INVALID_QUANTITY';\n      readonly message: string;\n      readonly requestedQuantity: number;\n    }>\n  ): void {\n    // Check configured quantity limits\n    if (item.quantityLimits) {\n      const { min, max, step } = item.quantityLimits;\n      \n      if (item.quantity < min) {\n        errors.push({\n          itemKey: item.key,\n          code: 'INVALID_QUANTITY',\n          message: `Minimum quantity for ${item.name} is ${min}`,\n          requestedQuantity: item.quantity\n        });\n      }\n      \n      if (item.quantity > max) {\n        errors.push({\n          itemKey: item.key,\n          code: 'INVALID_QUANTITY',\n          message: `Maximum quantity for ${item.name} is ${max}`,\n          requestedQuantity: item.quantity\n        });\n      }\n      \n      if ((item.quantity - min) % step !== 0) {\n        errors.push({\n          itemKey: item.key,\n          code: 'INVALID_QUANTITY',\n          message: `${item.name} must be ordered in multiples of ${step}`,\n          requestedQuantity: item.quantity\n        });\n      }\n    }\n\n    // Validate against global config limits\n    if (item.quantity > this.config.maxQuantityPerItem) {\n      errors.push({\n        itemKey: item.key,\n        code: 'INVALID_QUANTITY',\n        message: `Maximum quantity per item is ${this.config.maxQuantityPerItem}`,\n        requestedQuantity: item.quantity\n      });\n    }\n  }\n\n  /**\n   * Validate price changes since item was added\n   */\n  private validateItemPriceChanges(\n    item: CartItem,\n    currentProduct: WooCommerceProduct,\n    warnings: Array<{\n      readonly itemKey: string;\n      readonly code: 'PRICE_CHANGED';\n      readonly message: string;\n      readonly details: Record<string, unknown>;\n    }>\n  ): void {\n    const currentRegularPrice = parseFloat(currentProduct.regular_price);\n    const currentSalePrice = currentProduct.sale_price ? parseFloat(currentProduct.sale_price) : undefined;\n\n    // Check if regular price has changed\n    if (Math.abs(item.regularPrice - currentRegularPrice) > 0.01) {\n      warnings.push({\n        itemKey: item.key,\n        code: 'PRICE_CHANGED',\n        message: `Price for ${item.name} has changed from $${item.regularPrice.toFixed(2)} to $${currentRegularPrice.toFixed(2)}`,\n        details: { \n          previousPrice: item.regularPrice, \n          currentPrice: currentRegularPrice,\n          priceIncrease: currentRegularPrice > item.regularPrice\n        }\n      });\n    }\n\n    // Check if sale price has changed\n    const itemSalePrice = item.salePrice || null;\n    if ((itemSalePrice !== null && currentSalePrice === undefined) ||\n        (itemSalePrice === null && currentSalePrice !== undefined) ||\n        (itemSalePrice !== null && currentSalePrice !== undefined && Math.abs(itemSalePrice - currentSalePrice) > 0.01)) {\n      warnings.push({\n        itemKey: item.key,\n        code: 'PRICE_CHANGED',\n        message: `Sale price for ${item.name} has changed`,\n        details: { \n          previousSalePrice: itemSalePrice, \n          currentSalePrice: currentSalePrice \n        }\n      });\n    }\n  }\n\n  /**\n   * Validate product variation\n   */\n  private async validateProductVariation(\n    item: CartItem,\n    currentProduct: WooCommerceProduct,\n    errors: Array<{\n      readonly itemKey: string;\n      readonly code: 'VARIATION_NOT_FOUND';\n      readonly message: string;\n    }>\n  ): Promise<void> {\n    try {\n      // In a real implementation, you would fetch variation data from the API\n      // For now, we'll do basic validation\n      if (!item.variationId) {\n        errors.push({\n          itemKey: item.key,\n          code: 'VARIATION_NOT_FOUND',\n          message: `Product variation is required for ${item.name}`\n        });\n        return;\n      }\n\n      // Validate variation attributes match what was selected\n      if (item.attributes) {\n        for (const [attributeName, attributeValue] of Object.entries(item.attributes)) {\n          // In a real implementation, validate against available variations\n          // This is a placeholder for variation validation logic\n          if (!attributeValue || attributeValue.trim() === '') {\n            errors.push({\n              itemKey: item.key,\n              code: 'VARIATION_NOT_FOUND',\n              message: `Invalid variation attribute ${attributeName} for ${item.name}`\n            });\n          }\n        }\n      }\n    } catch (error) {\n      errors.push({\n        itemKey: item.key,\n        code: 'VARIATION_NOT_FOUND',\n        message: `Could not validate product variation for ${item.name}`\n      });\n    }\n  }\n\n  /**\n   * Validate cart-level constraints\n   */\n  private async validateCartConstraints(\n    cart: Cart,\n    errors: Array<{\n      readonly itemKey: string;\n      readonly code: 'INVALID_QUANTITY';\n      readonly message: string;\n    }>,\n    warnings: Array<{\n      readonly itemKey: string;\n      readonly code: 'HIGH_QUANTITY' | 'EMPTY_CART' | 'MINIMUM_ORDER_NOT_MET';\n      readonly message: string;\n      readonly details?: Record<string, unknown>;\n    }>\n  ): Promise<void> {\n    // Validate maximum number of items\n    if (cart.items.length > this.config.maxItems) {\n      errors.push({\n        itemKey: '',\n        code: 'INVALID_QUANTITY',\n        message: `Cart cannot contain more than ${this.config.maxItems} items`\n      });\n    }\n\n    // Validate total item count\n    const totalQuantity = cart.items.reduce((sum, item) => sum + item.quantity, 0);\n    const maxTotalQuantity = this.config.maxItems * this.config.maxQuantityPerItem;\n    \n    if (totalQuantity > maxTotalQuantity) {\n      warnings.push({\n        itemKey: '',\n        code: 'HIGH_QUANTITY',\n        message: `Cart contains ${totalQuantity} items, which may affect performance`,\n        details: { totalQuantity, maxRecommended: maxTotalQuantity }\n      });\n    }\n\n    // Validate cart is not empty\n    if (cart.items.length === 0) {\n      warnings.push({\n        itemKey: '',\n        code: 'EMPTY_CART',\n        message: 'Cart is empty'\n      });\n    }\n\n    // Validate cart total constraints (if any)\n    const minOrderAmount = 0; // This could be configurable\n    if (minOrderAmount > 0 && cart.totals.total < minOrderAmount) {\n      errors.push({\n        itemKey: '',\n        code: 'INVALID_QUANTITY',\n        message: `Minimum order amount is $${minOrderAmount.toFixed(2)}`\n      });\n    }\n  }\n\n  /**\n   * Validate applied coupons\n   */\n  private async validateAppliedCoupons(\n    cart: Cart,\n    errors: Array<{\n      readonly itemKey: string;\n      readonly code: 'COUPON_EXPIRED' | 'COUPON_USAGE_LIMIT_EXCEEDED' | 'COUPON_MINIMUM_NOT_MET' | 'COUPON_MAXIMUM_EXCEEDED' | 'COUPON_INDIVIDUAL_USE';\n      readonly message: string;\n    }>,\n    warnings: Array<{\n      readonly itemKey: string;\n      readonly code: 'COUPON_VALIDATION_ERROR';\n      readonly message: string;\n      readonly details: Record<string, unknown>;\n    }>\n  ): Promise<void> {\n    for (const coupon of cart.appliedCoupons) {\n      try {\n        // Validate coupon expiry\n        if (coupon.expiryDate && coupon.expiryDate < new Date()) {\n          errors.push({\n            itemKey: '',\n            code: 'COUPON_EXPIRED',\n            message: `Coupon ${coupon.code} has expired`\n          });\n          continue;\n        }\n\n        // Validate usage limits\n        if (coupon.usageLimit && coupon.usageCount >= coupon.usageLimit) {\n          errors.push({\n            itemKey: '',\n            code: 'COUPON_USAGE_LIMIT_EXCEEDED',\n            message: `Coupon ${coupon.code} has reached its usage limit`\n          });\n          continue;\n        }\n\n        // Validate minimum amount\n        if (coupon.minimumAmount && cart.totals.subtotal < coupon.minimumAmount) {\n          errors.push({\n            itemKey: '',\n            code: 'COUPON_MINIMUM_NOT_MET',\n            message: `Coupon ${coupon.code} requires a minimum order of $${coupon.minimumAmount.toFixed(2)}`\n          });\n          continue;\n        }\n\n        // Validate maximum amount\n        if (coupon.maximumAmount && cart.totals.subtotal > coupon.maximumAmount) {\n          warnings.push({\n            itemKey: '',\n            code: 'COUPON_VALIDATION_ERROR',\n            message: `Coupon ${coupon.code} is only valid for orders up to $${coupon.maximumAmount.toFixed(2)}`,\n            details: { couponCode: coupon.code, maximumAmount: coupon.maximumAmount }\n          });\n        }\n\n        // Validate individual use coupons\n        if (coupon.individualUse && cart.appliedCoupons.length > 1) {\n          errors.push({\n            itemKey: '',\n            code: 'COUPON_INDIVIDUAL_USE',\n            message: `Coupon ${coupon.code} cannot be combined with other coupons`\n          });\n        }\n\n      } catch (error) {\n        warnings.push({\n          itemKey: '',\n          code: 'COUPON_VALIDATION_ERROR',\n          message: `Could not validate coupon ${coupon.code}`,\n          details: { couponCode: coupon.code, error }\n        });\n      }\n    }\n  }\n\n  /**\n   * Validate cart totals integrity\n   */\n  private async validateCartTotals(\n    cart: Cart,\n    warnings: Array<{\n      readonly itemKey: string;\n      readonly code: 'TOTALS_MISMATCH' | 'TOTALS_VALIDATION_ERROR';\n      readonly message: string;\n      readonly details: Record<string, unknown>;\n    }>\n  ): Promise<void> {\n    try {\n      // Recalculate totals and compare with stored totals\n      const recalculatedTotals = this.calculator.calculate(\n        cart.items,\n        cart.appliedCoupons,\n        cart.shippingMethods,\n        cart.fees\n      );\n\n      const tolerance = 0.01; // 1 cent tolerance for rounding differences\n\n      if (Math.abs(cart.totals.total - recalculatedTotals.total) > tolerance) {\n        warnings.push({\n          itemKey: '',\n          code: 'TOTALS_MISMATCH',\n          message: 'Cart totals may be outdated and need recalculation',\n          details: { \n            storedTotal: cart.totals.total, \n            calculatedTotal: recalculatedTotals.total,\n            difference: Math.abs(cart.totals.total - recalculatedTotals.total)\n          }\n        });\n      }\n\n    } catch (error) {\n      warnings.push({\n        itemKey: '',\n        code: 'TOTALS_VALIDATION_ERROR',\n        message: 'Could not validate cart totals',\n        details: { error }\n      });\n    }\n  }\n\n  /**\n   * Apply coupon to cart\n   */\n  async applyCoupon(couponCode: string): Promise<Result<Cart, WooError>> {\n    try {\n      const cart = await this.getCart();\n      if (isErr(cart)) {\n        return cart;\n      }\n\n      const cartData = unwrap(cart);\n      \n      // Check if coupon is already applied\n      const alreadyApplied = cartData.appliedCoupons.some(coupon => coupon.code === couponCode);\n      if (alreadyApplied) {\n        return Err(ErrorFactory.validationError('Coupon is already applied'));\n      }\n\n      // Validate coupon\n      const validation = await this.validateCoupon(couponCode);\n      if (isErr(validation)) {\n        return validation;\n      }\n\n      const validationResult = unwrap(validation);\n      if (!validationResult.valid) {\n        return Err(ErrorFactory.validationError(validationResult.reason || 'Invalid coupon'));\n      }\n\n      // Apply coupon and recalculate totals\n      const couponToApply: AppliedCoupon = {\n        code: validationResult.coupon!.code,\n        type: validationResult.coupon!.discount_type || 'fixed_cart',\n        amount: parseFloat(validationResult.coupon!.amount || '0'),\n        description: validationResult.coupon!.description || '',\n        discountType: validationResult.coupon!.discount_type || 'fixed_cart',\n        freeShipping: validationResult.coupon!.free_shipping || false,\n        minimumAmount: validationResult.coupon!.minimum_amount ? parseFloat(validationResult.coupon!.minimum_amount) : undefined,\n        maximumAmount: validationResult.coupon!.maximum_amount ? parseFloat(validationResult.coupon!.maximum_amount) : undefined,\n        usageCount: validationResult.coupon!.usage_count || 0,\n        usageLimit: validationResult.coupon!.usage_limit || undefined,\n        expiryDate: validationResult.coupon!.date_expires ? new Date(validationResult.coupon!.date_expires) : undefined,\n        individualUse: validationResult.coupon!.individual_use || false,\n        excludeSaleItems: validationResult.coupon!.exclude_sale_items || false\n      };\n      \n      const appliedCoupons = [...cartData.appliedCoupons, couponToApply];\n      const updatedTotals = this.calculator.calculate(\n        cartData.items,\n        appliedCoupons,\n        cartData.shippingMethods,\n        cartData.fees\n      );\n      \n      const updatedCart: Cart = {\n        ...cartData,\n        appliedCoupons,\n        totals: updatedTotals,\n        updatedAt: new Date()\n      };\n      \n      // Save the updated cart\n      const saveResult = await this.persistence.save(updatedCart);\n      if (!saveResult.success) {\n        return saveResult;\n      }\n      \n      this.currentCart = updatedCart;\n      return Ok(updatedCart);\n    } catch (error) {\n      return Err(ErrorFactory.networkError(\n        error instanceof Error ? error.message : 'Failed to apply coupon'\n      ));\n    }\n  }\n\n  /**\n   * Remove coupon from cart\n   */\n  async removeCoupon(couponCode: string): Promise<Result<Cart, WooError>> {\n    try {\n      if (!this.config.enableCoupons) {\n        return Err(ErrorFactory.configurationError('Coupons are disabled'));\n      }\n\n      if (!couponCode || couponCode.trim() === '') {\n        return Err(ErrorFactory.validationError('Coupon code is required'));\n      }\n\n      // Get current cart\n      const cartResult = await this.getCart();\n      if (!cartResult.success) {\n        return cartResult;\n      }\n\n      const cart = cartResult.data;\n      const normalizedCode = couponCode.trim().toUpperCase();\n\n      // Check if coupon is applied\n      const couponExists = cart.appliedCoupons.some(c => c.code === normalizedCode);\n      if (!couponExists) {\n        return Err(ErrorFactory.validationError(`Coupon ${normalizedCode} is not applied to this cart`));\n      }\n\n      // Remove the coupon\n      const updatedAppliedCoupons = cart.appliedCoupons.filter(c => c.code !== normalizedCode);\n\n      // Recalculate totals without the coupon\n      const updatedTotals = this.calculator.calculate(\n        cart.items,\n        updatedAppliedCoupons,\n        cart.shippingMethods,\n        cart.fees\n      );\n\n      // Create updated cart\n      const updatedCart: Cart = {\n        ...cart,\n        appliedCoupons: updatedAppliedCoupons,\n        totals: updatedTotals,\n        updatedAt: new Date()\n      };\n\n      // Save cart\n      const saveResult = await this.persistence.save(updatedCart);\n      if (!saveResult.success) {\n        return saveResult;\n      }\n\n      this.currentCart = updatedCart;\n      return Ok(updatedCart);\n\n    } catch (error) {\n      return Err(ErrorFactory.cartError(\n        'Failed to remove coupon',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get available coupons for current cart\n   */\n  async getAvailableCoupons(): Promise<Result<WooCommerceCoupon[], WooError>> {\n    try {\n      if (!this.config.enableCoupons) {\n        return Err(ErrorFactory.configurationError('Coupons are disabled'));\n      }\n\n      // Get current cart for context\n      const cartResult = await this.getCart();\n      if (!cartResult.success) {\n        return cartResult;\n      }\n\n      const cart = cartResult.data;\n\n      // Fetch available coupons from API\n      const response = await this.client.get<WooCommerceCoupon[]>('/coupons', {\n        status: 'publish',\n        per_page: '100', // Adjust as needed\n        orderby: 'date',\n        order: 'desc'\n      });\n\n      if (!response.success) {\n        return response;\n      }\n\n      // Filter coupons based on cart eligibility\n      const availableCoupons: WooCommerceCoupon[] = [];\n      \n      for (const coupon of response.data.data) {\n        const isEligible = await this.isCouponEligibleForCart(coupon, cart);\n        if (isEligible) {\n          availableCoupons.push(coupon);\n        }\n      }\n\n      return Ok(availableCoupons);\n\n    } catch (error) {\n      return Err(ErrorFactory.cartError(\n        'Failed to get available coupons',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Validate coupon code without applying it\n   */\n  async validateCoupon(couponCode: string): Promise<Result<{ valid: boolean; coupon?: WooCommerceCoupon; reason?: string }, WooError>> {\n    try {\n      if (!this.config.enableCoupons) {\n        return Ok({ valid: false, reason: 'Coupons are disabled' });\n      }\n\n      if (!couponCode || couponCode.trim() === '') {\n        return Ok({ valid: false, reason: 'Coupon code is required' });\n      }\n\n      const normalizedCode = couponCode.trim().toUpperCase();\n\n      // Fetch coupon data\n      const couponResult = await this.fetchCouponData(normalizedCode);\n      if (!couponResult.success) {\n        return Ok({ valid: false, reason: 'Coupon not found' });\n      }\n\n      const couponData = couponResult.data;\n\n      // Get current cart for validation\n      const cartResult = await this.getCart();\n      if (!cartResult.success) {\n        return cartResult;\n      }\n\n      const cart = cartResult.data;\n\n      // Validate coupon eligibility\n      const validationResult = await this.validateCouponEligibility(couponData, cart);\n      if (!validationResult.success) {\n        return Ok({ \n          valid: false, \n          coupon: couponData,\n          reason: validationResult.error.message \n        });\n      }\n\n      return Ok({ \n        valid: true, \n        coupon: couponData \n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.cartError(\n        'Failed to validate coupon',\n        error\n      ));\n    }\n  }\n\n  // Private helper methods\n\n  /**\n   * Fetch coupon data from WooCommerce API\n   */\n  private async fetchCouponData(couponCode: string): Promise<Result<WooCommerceCoupon, WooError>> {\n    try {\n      // Use cache first\n      const cacheKey = `coupons:${couponCode}`;\n      const cachedResult = await this.cache.get<WooCommerceCoupon>(cacheKey);\n      \n      if (cachedResult.success && cachedResult.data) {\n        return Ok(cachedResult.data);\n      }\n\n      // Fetch from API - try by code first\n      const response = await this.client.get<WooCommerceCoupon[]>('/coupons', {\n        code: couponCode,\n        status: 'publish'\n      });\n\n      if (!response.success) {\n        return Err(ErrorFactory.validationError('Coupon not found'));\n      }\n\n      const coupons = response.data.data;\n      if (!coupons || coupons.length === 0) {\n        return Err(ErrorFactory.validationError('Coupon not found'));\n      }\n\n      const coupon = coupons[0];\n      \n      if (!coupon) {\n        return Err(ErrorFactory.validationError(`Coupon ${couponCode} not found`));\n      }\n\n      // Cache the result\n      await this.cache.set(cacheKey, coupon, 300); // 5 minutes cache\n\n      return Ok(coupon);\n\n    } catch (error) {\n      return Err(ErrorFactory.cartError(\n        'Failed to fetch coupon data',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Validate if coupon is eligible for the current cart\n   */\n  private async validateCouponEligibility(coupon: WooCommerceCoupon, cart: Cart): Promise<Result<void, WooError>> {\n    try {\n      // Check expiry date\n      if (coupon.date_expires) {\n        const expiryDate = new Date(coupon.date_expires);\n        if (expiryDate < new Date()) {\n          return Err(ErrorFactory.validationError(`Coupon ${coupon.code} has expired`));\n        }\n      }\n\n      // Check usage limits\n      if (coupon.usage_limit && coupon.usage_count >= coupon.usage_limit) {\n        return Err(ErrorFactory.validationError(`Coupon ${coupon.code} has reached its usage limit`));\n      }\n\n      // Check minimum amount\n      if (coupon.minimum_amount) {\n        const minAmount = parseFloat(coupon.minimum_amount);\n        if (cart.totals.subtotal < minAmount) {\n          return Err(ErrorFactory.validationError(\n            `Coupon ${coupon.code} requires a minimum order of $${minAmount.toFixed(2)}`\n          ));\n        }\n      }\n\n      // Check maximum amount\n      if (coupon.maximum_amount) {\n        const maxAmount = parseFloat(coupon.maximum_amount);\n        if (cart.totals.subtotal > maxAmount) {\n          return Err(ErrorFactory.validationError(\n            `Coupon ${coupon.code} is only valid for orders up to $${maxAmount.toFixed(2)}`\n          ));\n        }\n      }\n\n      // Check product restrictions\n      if (coupon.product_ids && coupon.product_ids.length > 0) {\n        const hasEligibleProduct = cart.items.some(item => \n          coupon.product_ids!.includes(item.productId)\n        );\n        if (!hasEligibleProduct) {\n          return Err(ErrorFactory.validationError(\n            `Coupon ${coupon.code} is not valid for the products in your cart`\n          ));\n        }\n      }\n\n      // Check excluded products\n      if (coupon.excluded_product_ids && coupon.excluded_product_ids.length > 0) {\n        const hasExcludedProduct = cart.items.some(item => \n          coupon.excluded_product_ids!.includes(item.productId)\n        );\n        if (hasExcludedProduct) {\n          return Err(ErrorFactory.validationError(\n            `Coupon ${coupon.code} cannot be used with some products in your cart`\n          ));\n        }\n      }\n\n      // Check individual use restriction\n      if (coupon.individual_use && cart.appliedCoupons.length > 0) {\n        return Err(ErrorFactory.validationError(\n          `Coupon ${coupon.code} cannot be combined with other coupons`\n        ));\n      }\n\n      return Ok(undefined);\n\n    } catch (error) {\n      return Err(ErrorFactory.cartError(\n        'Failed to validate coupon eligibility',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Check if a coupon is eligible for the current cart (simplified version)\n   */\n  private async isCouponEligibleForCart(coupon: WooCommerceCoupon, cart: Cart): Promise<boolean> {\n    try {\n      const validationResult = await this.validateCouponEligibility(coupon, cart);\n      return validationResult.success;\n    } catch {\n      return false;\n    }\n  }\n\n  private validateAddItemRequest(request: CartAddItemRequest): Result<void, WooError> {\n    try {\n      CartAddItemRequestSchema.parse(request);\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Invalid add item request',\n        error\n      ));\n    }\n  }\n\n  private async fetchProductData(request: CartAddItemRequest): Promise<Result<WooCommerceProduct, WooError>> {\n    // Use cache first\n    const cacheKey = `products:single:${request.productId}`;\n    const cachedResult = await this.cache.get<WooCommerceProduct>(cacheKey);\n    \n    if (cachedResult.success && cachedResult.data) {\n      return Ok(cachedResult.data);\n    }\n\n    // Fetch from API\n    const response = await this.client.get<WooCommerceProduct>(`/products/${request.productId}`);\n    \n    if (!response.success) {\n      if (response.error.statusCode === 404) {\n        return Err(ErrorFactory.productNotFoundError(request.productId));\n      }\n      return response;\n    }\n\n    // Cache the result\n    await this.cache.set(cacheKey, response.data.data);\n    \n    return Ok(response.data.data);\n  }\n\n  private validateStock(product: WooCommerceProduct, requestedQuantity: number): Result<void, WooError> {\n    if (product.stock_status === 'outofstock') {\n      return Err(ErrorFactory.validationError('Product is out of stock'));\n    }\n\n    if (product.stock_quantity !== null && product.stock_quantity !== undefined && requestedQuantity > product.stock_quantity) {\n      return Err(ErrorFactory.validationError(\n        `Only ${product.stock_quantity} items available in stock`\n      ));\n    }\n\n    return Ok(undefined);\n  }\n\n  private generateCartItemKey(request: CartAddItemRequest): string {\n    let key = `${request.productId}`;\n    \n    if (request.variationId) {\n      key += `-${request.variationId}`;\n    }\n    \n    if (request.attributes) {\n      const sortedAttrs = Object.keys(request.attributes)\n        .sort()\n        .map(k => `${k}:${request.attributes![k]}`)\n        .join('|');\n      key += `-${sortedAttrs}`;\n    }\n    \n    return key;\n  }\n\n  private createCartItem(\n    product: WooCommerceProduct, \n    request: CartAddItemRequest, \n    itemKey: string\n  ): CartItem {\n    const now = new Date();\n    const price = parseFloat(product.price) || 0;\n    const regularPrice = parseFloat(product.regular_price) || 0;\n    const salePrice = product.sale_price ? parseFloat(product.sale_price) : undefined;\n    const totalPrice = price * request.quantity;\n\n    const cartItem: CartItem = {\n      key: itemKey,\n      productId: product.id,\n      variationId: request.variationId,\n      quantity: request.quantity,\n      name: product.name,\n      price,\n      regularPrice,\n      salePrice,\n      totalPrice,\n      total: totalPrice,\n      sku: product.sku || undefined,\n      weight: product.weight ? parseFloat(product.weight) : undefined,\n      stockQuantity: product.stock_quantity || undefined,\n      stockStatus: product.stock_status,\n      backordersAllowed: product.backorders_allowed || false,\n      soldIndividually: product.sold_individually || false,\n      downloadable: product.downloadable || false,\n      virtual: product.virtual || false,\n      meta: [],\n      addedAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    return cartItem;\n  }\n\n  private createEmptyCart(): Cart {\n    const now = new Date();\n    const sessionId = generateId(); // Using test utility for now\n\n    return {\n      items: [],\n      itemCount: 0,\n      totals: this.calculator.calculate([]),\n      appliedCoupons: [],\n      shippingMethods: [],\n      chosenShippingMethods: [],\n      fees: [],\n      needsShipping: false,\n      needsPayment: false,\n      hasCalculatedShipping: false,\n      currency: 'USD', // TODO: Get from config/API\n      currencySymbol: '$',\n      pricesIncludeTax: this.config.taxCalculation.pricesIncludeTax,\n      taxDisplayMode: this.config.taxCalculation.displayMode === 'both' ? 'excl' : this.config.taxCalculation.displayMode,\n      crossSells: [],\n      isEmpty: true,\n      createdAt: now,\n      updatedAt: now,\n      sessionId\n    };\n  }\n\n  private updateCartWithItems(cart: Cart, items: readonly CartItem[]): Cart {\n    const itemCount = items.reduce((sum, item) => sum + item.quantity, 0);\n    const totals = this.calculator.calculate(items, cart.appliedCoupons);\n    \n    return {\n      ...cart,\n      items,\n      itemCount,\n      totals,\n      isEmpty: items.length === 0,\n      needsShipping: items.some(item => item.weight !== undefined || item.dimensions !== undefined),\n      needsPayment: totals.total > 0,\n      updatedAt: new Date()\n    };\n  }\n\n  // CART SYNCHRONIZATION METHODS\n\n  /**\n   * Set user authentication context for cart synchronization\n   */\n  setAuthContext(authContext: UserAuthContext | null): void {\n    this.authContext = authContext;\n    \n    // Trigger sync if user just authenticated and sync on auth is enabled\n    if (authContext?.isAuthenticated && this.config.sync.enabled && this.config.sync.syncOnAuth) {\n      this.syncCartWithServer().catch(error => {\n        console.error('Failed to sync cart on authentication:', error);\n      });\n    }\n  }\n\n  /**\n   * Get current authentication context\n   */\n  getAuthContext(): UserAuthContext | null {\n    return this.authContext;\n  }\n\n  /**\n   * Get cart synchronization status\n   */\n  getSyncStatus(): CartSyncStatus {\n    return this.syncManager.getStatus();\n  }\n\n  /**\n   * Get last sync timestamp\n   */\n  getLastSyncAt(): Date | undefined {\n    return this.syncManager.getLastSyncAt();\n  }\n\n  /**\n   * Add cart sync event handler\n   */\n  addSyncEventHandler(handler: CartSyncEventHandler): void {\n    this.syncManager.addEventHandler(handler);\n  }\n\n  /**\n   * Remove cart sync event handler\n   */\n  removeSyncEventHandler(handler: CartSyncEventHandler): void {\n    this.syncManager.removeEventHandler(handler);\n  }\n\n  /**\n   * Manually trigger cart synchronization\n   */\n  async syncCartWithServer(): Promise<Result<CartSyncResult, WooError>> {\n    if (!this.config.sync.enabled) {\n      return Ok({\n        success: true,\n        status: 'idle',\n        conflicts: [],\n        syncedAt: new Date(),\n        changes: {\n          itemsAdded: 0,\n          itemsUpdated: 0,\n          itemsRemoved: 0,\n          couponsAdded: 0,\n          couponsRemoved: 0\n        }\n      });\n    }\n\n    if (!this.authContext?.isAuthenticated) {\n      return Err(ErrorFactory.cartError(\n        'User must be authenticated for cart synchronization',\n        { context: 'manual_sync' }\n      ));\n    }\n\n    const cartResult = await this.getCart();\n    if (!cartResult.success) {\n      return cartResult;\n    }\n\n    const syncResult = await this.syncManager.syncCart(cartResult.data, this.authContext);\n    \n    if (syncResult.success && syncResult.data.mergedCart) {\n      // Update local cart with merged cart\n      this.currentCart = syncResult.data.mergedCart;\n      \n      // Save merged cart to local persistence\n      await this.persistence.save(syncResult.data.mergedCart);\n    }\n\n    return syncResult;\n  }\n\n  /**\n   * Enable cart synchronization\n   */\n  enableSync(): void {\n    this.syncManager.enable();\n  }\n\n  /**\n   * Disable cart synchronization\n   */\n  disableSync(): void {\n    this.syncManager.disable();\n  }\n\n  /**\n   * Process offline sync queue\n   */\n  async processOfflineQueue(): Promise<Result<void, WooError>> {\n    if (!this.authContext?.isAuthenticated) {\n      return Ok(undefined);\n    }\n\n    const cartResult = await this.getCart();\n    if (!cartResult.success) {\n      return cartResult;\n    }\n\n    return this.syncManager.processQueue(cartResult.data, this.authContext);\n  }\n\n  /**\n   * Clean up cart service resources\n   */\n  destroy(): void {\n    this.syncManager.destroy();\n    this.currentCart = null;\n    this.authContext = null;\n  }\n} ","/**\n * Advanced Search Engine types for WooCommerce Headless SDK\n * Following the enhanced unified-10x-dev framework\n */\n\nimport { z } from 'zod';\nimport { WooCommerceProduct } from './commerce';\n\n/**\n * Search operators for query building\n */\nexport type SearchOperator = 'AND' | 'OR' | 'NOT';\n\n/**\n * Filter operators for advanced filtering\n */\nexport type FilterOperator = \n  | 'eq'          // equals\n  | 'ne'          // not equals\n  | 'gt'          // greater than\n  | 'gte'         // greater than or equal\n  | 'lt'          // less than\n  | 'lte'         // less than or equal\n  | 'in'          // in array\n  | 'nin'         // not in array\n  | 'contains'    // string contains\n  | 'startswith'  // string starts with\n  | 'endswith'    // string ends with\n  | 'between'     // range between two values\n  | 'exists'      // field exists\n  | 'empty';      // field is empty\n\n/**\n * Sort direction\n */\nexport type SortDirection = 'asc' | 'desc';\n\n/**\n * Search result highlight\n */\nexport interface SearchHighlight {\n  readonly field: string;\n  readonly matches: readonly {\n    readonly text: string;\n    readonly indices: readonly [number, number][];\n  }[];\n}\n\n/**\n * Single search filter\n */\nexport interface SearchFilter {\n  readonly field: string;\n  readonly operator: FilterOperator;\n  readonly value: unknown;\n  readonly label?: string;\n}\n\n/**\n * Range filter for numeric/date values\n */\nexport interface RangeFilter {\n  readonly field: string;\n  readonly min?: number | string;\n  readonly max?: number | string;\n  readonly label?: string;\n}\n\n/**\n * Multi-select filter option\n */\nexport interface FilterOption {\n  readonly value: string | number;\n  readonly label: string;\n  readonly count: number;\n  readonly selected: boolean;\n}\n\n/**\n * Facet definition for filtering\n */\nexport interface SearchFacet {\n  readonly field: string;\n  readonly label: string;\n  readonly type: 'terms' | 'range' | 'date_range' | 'boolean';\n  readonly options: readonly FilterOption[];\n  readonly multiSelect: boolean;\n  readonly collapsed: boolean;\n}\n\n/**\n * Search suggestion\n */\nexport interface SearchSuggestion {\n  readonly text: string;\n  readonly type: 'query' | 'product' | 'category' | 'brand';\n  readonly score: number;\n  readonly metadata?: Record<string, unknown>;\n}\n\n/**\n * Search result item\n */\nexport interface SearchResultItem {\n  readonly item: WooCommerceProduct;\n  readonly score: number;\n  readonly highlights?: readonly SearchHighlight[];\n  readonly matchedFields: readonly string[];\n}\n\n/**\n * Search aggregation result\n */\nexport interface SearchAggregation {\n  readonly field: string;\n  readonly type: 'terms' | 'stats' | 'histogram';\n  readonly buckets?: readonly {\n    readonly key: string | number;\n    readonly count: number;\n    readonly selected: boolean;\n  }[];\n  readonly stats?: {\n    readonly min: number;\n    readonly max: number;\n    readonly avg: number;\n    readonly count: number;\n  };\n}\n\n/**\n * Search sorting configuration\n */\nexport interface SearchSort {\n  readonly field: string;\n  readonly direction: SortDirection;\n  readonly label?: string;\n}\n\n/**\n * Search pagination\n */\nexport interface SearchPagination {\n  readonly page: number;\n  readonly limit: number;\n  readonly offset: number;\n  readonly total: number;\n  readonly totalPages: number;\n}\n\n/**\n * Search query configuration\n */\nexport interface SearchQuery {\n  readonly text: string | undefined;\n  readonly filters: readonly SearchFilter[];\n  readonly rangeFilters: readonly RangeFilter[];\n  readonly categoryIds?: readonly number[];\n  readonly tagIds?: readonly number[];\n  readonly productIds?: readonly number[];\n  readonly excludeProductIds?: readonly number[];\n  readonly inStock: boolean | undefined;\n  readonly onSale: boolean | undefined;\n  readonly featured: boolean | undefined;\n  readonly minPrice: number | undefined;\n  readonly maxPrice: number | undefined;\n  readonly minRating: number | undefined;\n  readonly attributes?: Record<string, string | string[]>;\n  readonly sort: readonly SearchSort[];\n  readonly pagination: SearchPagination;\n  readonly operator: SearchOperator;\n  readonly fuzzy: boolean;\n  readonly highlight: boolean;\n  readonly facets: boolean;\n  readonly suggestions: boolean;\n}\n\n/**\n * Search results\n */\nexport interface SearchResults {\n  readonly query: SearchQuery;\n  readonly items: readonly SearchResultItem[];\n  readonly aggregations: readonly SearchAggregation[];\n  readonly facets: readonly SearchFacet[];\n  readonly suggestions: readonly SearchSuggestion[];\n  readonly pagination: SearchPagination;\n  readonly processingTime: number; // milliseconds\n  readonly totalHits: number;\n  readonly maxScore: number;\n  readonly debug?: {\n    readonly parsedQuery: Record<string, unknown>;\n    readonly executionStats: Record<string, unknown>;\n  };\n}\n\n/**\n * Search analytics event\n */\nexport interface SearchAnalyticsEvent {\n  readonly type: 'search' | 'filter' | 'sort' | 'paginate' | 'suggestion_click' | 'result_click';\n  readonly query: string | undefined;\n  readonly filters?: readonly SearchFilter[];\n  readonly resultPosition?: number;\n  readonly productId?: number;\n  readonly timestamp: Date;\n  readonly sessionId: string;\n  readonly userId?: string;\n  readonly metadata?: Record<string, unknown>;\n}\n\n/**\n * Search history entry\n */\nexport interface SearchHistoryEntry {\n  readonly query: string;\n  readonly timestamp: Date;\n  readonly resultCount: number;\n  readonly clickedResults: readonly number[]; // product IDs\n  readonly conversions: readonly number[]; // product IDs that led to purchase\n}\n\n/**\n * Search configuration\n */\nexport interface AdvancedSearchConfig {\n  readonly fuzzy: {\n    readonly enabled: boolean;\n    readonly threshold: number; // 0.0 = exact match, 1.0 = match anything\n    readonly distance: number; // maximum Levenshtein distance\n    readonly minMatchCharLength: number;\n    readonly includeScore: boolean;\n  };\n  readonly highlighting: {\n    readonly enabled: boolean;\n    readonly preTag: string;\n    readonly postTag: string;\n    readonly fragmentSize: number;\n    readonly maxFragments: number;\n  };\n  readonly suggestions: {\n    readonly enabled: boolean;\n    readonly maxSuggestions: number;\n    readonly minQueryLength: number;\n    readonly showPopular: boolean;\n    readonly showRecent: boolean;\n  };\n  readonly facets: {\n    readonly enabled: boolean;\n    readonly maxFacets: number;\n    readonly maxFacetValues: number;\n    readonly minDocumentCount: number;\n  };\n  readonly analytics: {\n    readonly enabled: boolean;\n    readonly trackQueries: boolean;\n    readonly trackFilters: boolean;\n    readonly trackClicks: boolean;\n    readonly trackConversions: boolean;\n    readonly sessionTimeout: number; // minutes\n  };\n  readonly caching: {\n    readonly enabled: boolean;\n    readonly ttl: number; // milliseconds\n    readonly maxCacheSize: number; // number of cached queries\n    readonly cacheKey: string;\n  };\n  readonly performance: {\n    readonly maxResults: number;\n    readonly searchTimeout: number; // milliseconds\n    readonly debounceDelay: number; // milliseconds for auto-complete\n    readonly prefetchResults: boolean;\n  };\n}\n\n/**\n * Search builder for constructing complex queries\n */\nexport interface SearchQueryBuilder {\n  text(query: string): SearchQueryBuilder;\n  filter(field: string, operator: FilterOperator, value: unknown): SearchQueryBuilder;\n  range(field: string, min?: number, max?: number): SearchQueryBuilder;\n  category(categoryId: number | number[]): SearchQueryBuilder;\n  tag(tagId: number | number[]): SearchQueryBuilder;\n  price(min?: number, max?: number): SearchQueryBuilder;\n  rating(min: number): SearchQueryBuilder;\n  inStock(inStock?: boolean): SearchQueryBuilder;\n  onSale(onSale?: boolean): SearchQueryBuilder;\n  featured(featured?: boolean): SearchQueryBuilder;\n  attribute(name: string, value: string | string[]): SearchQueryBuilder;\n  sort(field: string, direction?: SortDirection): SearchQueryBuilder;\n  page(page: number): SearchQueryBuilder;\n  limit(limit: number): SearchQueryBuilder;\n  fuzzy(enabled?: boolean): SearchQueryBuilder;\n  highlight(enabled?: boolean): SearchQueryBuilder;\n  facets(enabled?: boolean): SearchQueryBuilder;\n  suggestions(enabled?: boolean): SearchQueryBuilder;\n  build(): SearchQuery;\n  reset(): SearchQueryBuilder;\n}\n\n// Zod schemas for validation\nexport const SearchFilterSchema = z.object({\n  field: z.string(),\n  operator: z.enum(['eq', 'ne', 'gt', 'gte', 'lt', 'lte', 'in', 'nin', 'contains', 'startswith', 'endswith', 'between', 'exists', 'empty']),\n  value: z.unknown(),\n  label: z.string().optional(),\n});\n\nexport const RangeFilterSchema = z.object({\n  field: z.string(),\n  min: z.union([z.number(), z.string()]).optional(),\n  max: z.union([z.number(), z.string()]).optional(),\n  label: z.string().optional(),\n});\n\nexport const SearchSortSchema = z.object({\n  field: z.string(),\n  direction: z.enum(['asc', 'desc']),\n  label: z.string().optional(),\n});\n\nexport const SearchPaginationSchema = z.object({\n  page: z.number().min(1),\n  limit: z.number().min(1).max(100),\n  offset: z.number().min(0),\n  total: z.number().min(0),\n  totalPages: z.number().min(0),\n});\n\nexport const SearchQuerySchema = z.object({\n  text: z.string().optional(),\n  filters: z.array(SearchFilterSchema),\n  rangeFilters: z.array(RangeFilterSchema),\n  categoryIds: z.array(z.number().positive()).optional(),\n  tagIds: z.array(z.number().positive()).optional(),\n  productIds: z.array(z.number().positive()).optional(),\n  excludeProductIds: z.array(z.number().positive()).optional(),\n  inStock: z.boolean().optional(),\n  onSale: z.boolean().optional(),\n  featured: z.boolean().optional(),\n  minPrice: z.number().min(0).optional(),\n  maxPrice: z.number().min(0).optional(),\n  minRating: z.number().min(0).max(5).optional(),\n  attributes: z.record(z.union([z.string(), z.array(z.string())])).optional(),\n  sort: z.array(SearchSortSchema),\n  pagination: SearchPaginationSchema,\n  operator: z.enum(['AND', 'OR', 'NOT']),\n  fuzzy: z.boolean(),\n  highlight: z.boolean(),\n  facets: z.boolean(),\n  suggestions: z.boolean(),\n});\n\nexport const SearchAnalyticsEventSchema = z.object({\n  type: z.enum(['search', 'filter', 'sort', 'paginate', 'suggestion_click', 'result_click']),\n  query: z.string().optional(),\n  filters: z.array(SearchFilterSchema).optional(),\n  resultPosition: z.number().positive().optional(),\n  productId: z.number().positive().optional(),\n  timestamp: z.date(),\n  sessionId: z.string(),\n  userId: z.string().optional(),\n  metadata: z.record(z.unknown()).optional(),\n});\n\n// Type guards\nexport function isSearchQuery(obj: unknown): obj is SearchQuery {\n  try {\n    SearchQuerySchema.parse(obj);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isSearchFilter(obj: unknown): obj is SearchFilter {\n  try {\n    SearchFilterSchema.parse(obj);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isSearchAnalyticsEvent(obj: unknown): obj is SearchAnalyticsEvent {\n  try {\n    SearchAnalyticsEventSchema.parse(obj);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Quick search parameters for simple searches\n */\nexport interface QuickSearchParams {\n  readonly query?: string;\n  readonly category?: number;\n  readonly minPrice?: number;\n  readonly maxPrice?: number;\n  readonly inStock?: boolean;\n  readonly onSale?: boolean;\n  readonly featured?: boolean;\n  readonly page?: number;\n  readonly limit?: number;\n  readonly sort?: string; // field:direction format, e.g., 'price:asc'\n}\n\n/**\n * Auto-complete request\n */\nexport interface AutoCompleteRequest {\n  readonly query: string;\n  readonly limit?: number;\n  readonly categories?: readonly number[];\n  readonly includeProducts?: boolean;\n  readonly includeCategories?: boolean;\n  readonly includeBrands?: boolean;\n}\n\n/**\n * Auto-complete response\n */\nexport interface AutoCompleteResponse {\n  readonly query: string;\n  readonly suggestions: readonly SearchSuggestion[];\n  readonly products: readonly WooCommerceProduct[];\n  readonly categories: readonly {\n    readonly id: number;\n    readonly name: string;\n    readonly count: number;\n  }[];\n  readonly processingTime: number;\n} ","/**\n * Advanced Search Engine for WooCommerce Headless SDK\n * Following the enhanced unified-10x-dev framework\n */\n\nimport Fuse from 'fuse.js';\nimport { HttpClient } from '../../core/client';\nimport { CacheManager } from '../../core/cache';\nimport { Result, Ok, Err } from '../../types/result';\nimport { WooError, ErrorFactory } from '../../types/errors';\nimport { WooCommerceProduct, ProductSchema } from '../../types/commerce';\nimport { AdvancedSearchConfig } from '../../types/config';\nimport {\n  SearchQuery,\n  SearchResults,\n  SearchResultItem,\n  SearchFilter,\n  RangeFilter,\n  SearchFacet,\n  SearchSuggestion,\n  SearchAggregation,\n  SearchPagination,\n  SearchAnalyticsEvent,\n  SearchHistoryEntry,\n  SearchQueryBuilder,\n  SearchHighlight,\n  QuickSearchParams,\n  AutoCompleteRequest,\n  AutoCompleteResponse,\n  FilterOperator,\n  SortDirection,\n  SearchSort,\n  SearchOperator,\n  SearchQuerySchema,\n  isSearchQuery\n} from '../../types/search';\nimport { generateId } from '../../test/utils';\n\n/**\n * Search analytics manager\n */\nclass SearchAnalyticsManager {\n  private readonly config: AdvancedSearchConfig;\n  private readonly cache: CacheManager;\n  private readonly sessionId: string;\n  private searchHistory: SearchHistoryEntry[] = [];\n\n  constructor(config: AdvancedSearchConfig, cache: CacheManager) {\n    this.config = config;\n    this.cache = cache;\n    this.sessionId = generateId();\n  }\n\n  /**\n   * Track search event\n   */\n  async trackEvent(event: SearchAnalyticsEvent): Promise<Result<void, WooError>> {\n    try {\n      if (!this.config.analytics.enabled) {\n        return Ok(undefined);\n      }\n\n      // Store event in cache for batching\n      const eventKey = `search-analytics:${event.type}:${Date.now()}`;\n      await this.cache.set(eventKey, event);\n\n      // Update search history for query events\n      if (event.type === 'search' && event.query) {\n        await this.updateSearchHistory(event.query, 0); // result count will be updated later\n      }\n\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError(\n        'Failed to track search event',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get search history\n   */\n  async getSearchHistory(limit: number = 10): Promise<Result<SearchHistoryEntry[], WooError>> {\n    try {\n      const cacheKey = 'search-history';\n      const cachedHistory = await this.cache.get<SearchHistoryEntry[]>(cacheKey);\n      \n      if (cachedHistory.success && cachedHistory.data) {\n        return Ok(cachedHistory.data.slice(0, limit));\n      }\n\n      return Ok([]);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError(\n        'Failed to get search history',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Update search history\n   */\n  private async updateSearchHistory(query: string, resultCount: number): Promise<void> {\n    const entry: SearchHistoryEntry = {\n      query,\n      timestamp: new Date(),\n      resultCount,\n      clickedResults: [],\n      conversions: []\n    };\n\n    this.searchHistory.unshift(entry);\n    this.searchHistory = this.searchHistory.slice(0, 50); // Keep last 50 searches\n\n    await this.cache.set('search-history', this.searchHistory);\n  }\n\n  /**\n   * Get session ID\n   */\n  getSessionId(): string {\n    return this.sessionId;\n  }\n}\n\n/**\n * Mutable query builder state interface\n */\ninterface MutableSearchQuery {\n  text?: string;\n  filters: SearchFilter[];\n  rangeFilters: RangeFilter[];\n  categoryIds?: number[];\n  tagIds?: number[];\n  productIds?: number[];\n  excludeProductIds?: number[];\n  inStock?: boolean;\n  onSale?: boolean;\n  featured?: boolean;\n  minPrice?: number;\n  maxPrice?: number;\n  minRating?: number;\n  attributes?: Record<string, string | string[]>;\n  sort: SearchSort[];\n  pagination: SearchPagination;\n  operator: SearchOperator;\n  fuzzy: boolean;\n  highlight: boolean;\n  facets: boolean;\n  suggestions: boolean;\n}\n\n/**\n * Search query builder implementation\n */\nclass SearchQueryBuilderImpl implements SearchQueryBuilder {\n  private query: MutableSearchQuery = {\n    filters: [],\n    rangeFilters: [],\n    sort: [],\n    operator: 'AND',\n    fuzzy: true,\n    highlight: true,\n    facets: true,\n    suggestions: true,\n    pagination: {\n      page: 1,\n      limit: 20,\n      offset: 0,\n      total: 0,\n      totalPages: 0\n    }\n  };\n\n  text(queryText: string): SearchQueryBuilder {\n    this.query.text = queryText;\n    return this;\n  }\n\n  filter(field: string, operator: FilterOperator, value: unknown): SearchQueryBuilder {\n    this.query.filters.push({ field, operator, value });\n    return this;\n  }\n\n  range(field: string, min?: number, max?: number): SearchQueryBuilder {\n    if (min !== undefined || max !== undefined) {\n      const rangeFilter: RangeFilter = { \n        field,\n        ...(min !== undefined && { min }),\n        ...(max !== undefined && { max })\n      };\n      this.query.rangeFilters.push(rangeFilter);\n    }\n    return this;\n  }\n\n  category(categoryId: number | number[]): SearchQueryBuilder {\n    this.query.categoryIds = Array.isArray(categoryId) ? categoryId : [categoryId];\n    return this;\n  }\n\n  tag(tagId: number | number[]): SearchQueryBuilder {\n    this.query.tagIds = Array.isArray(tagId) ? tagId : [tagId];\n    return this;\n  }\n\n  price(min?: number, max?: number): SearchQueryBuilder {\n    if (min !== undefined) this.query.minPrice = min;\n    if (max !== undefined) this.query.maxPrice = max;\n    return this;\n  }\n\n  rating(min: number): SearchQueryBuilder {\n    this.query.minRating = min;\n    return this;\n  }\n\n  inStock(inStock: boolean = true): SearchQueryBuilder {\n    this.query.inStock = inStock;\n    return this;\n  }\n\n  onSale(onSale: boolean = true): SearchQueryBuilder {\n    this.query.onSale = onSale;\n    return this;\n  }\n\n  featured(featured: boolean = true): SearchQueryBuilder {\n    this.query.featured = featured;\n    return this;\n  }\n\n  attribute(name: string, value: string | string[]): SearchQueryBuilder {\n    if (!this.query.attributes) {\n      this.query.attributes = {};\n    }\n    this.query.attributes[name] = value;\n    return this;\n  }\n\n  sort(field: string, direction: SortDirection = 'asc'): SearchQueryBuilder {\n    this.query.sort.push({ field, direction });\n    return this;\n  }\n\n  page(pageNum: number): SearchQueryBuilder {\n    this.query.pagination = {\n      ...this.query.pagination,\n      page: pageNum,\n      offset: (pageNum - 1) * this.query.pagination.limit\n    };\n    return this;\n  }\n\n  limit(limitNum: number): SearchQueryBuilder {\n    this.query.pagination = {\n      ...this.query.pagination,\n      limit: limitNum,\n      offset: (this.query.pagination.page - 1) * limitNum\n    };\n    return this;\n  }\n\n  fuzzy(enabled: boolean = true): SearchQueryBuilder {\n    this.query.fuzzy = enabled;\n    return this;\n  }\n\n  highlight(enabled: boolean = true): SearchQueryBuilder {\n    this.query.highlight = enabled;\n    return this;\n  }\n\n  facets(enabled: boolean = true): SearchQueryBuilder {\n    this.query.facets = enabled;\n    return this;\n  }\n\n  suggestions(enabled: boolean = true): SearchQueryBuilder {\n    this.query.suggestions = enabled;\n    return this;\n  }\n\n  build(): SearchQuery {\n    // Convert mutable query to readonly SearchQuery\n    const completeQuery: SearchQuery = {\n      text: this.query.text || '',\n      filters: [...this.query.filters],\n      rangeFilters: [...this.query.rangeFilters],\n      ...(this.query.categoryIds && { categoryIds: [...this.query.categoryIds] }),\n      ...(this.query.tagIds && { tagIds: [...this.query.tagIds] }),\n      ...(this.query.productIds && { productIds: [...this.query.productIds] }),\n      ...(this.query.excludeProductIds && { excludeProductIds: [...this.query.excludeProductIds] }),\n      inStock: this.query.inStock,\n      onSale: this.query.onSale,\n      featured: this.query.featured,\n      minPrice: this.query.minPrice,\n      maxPrice: this.query.maxPrice,\n      minRating: this.query.minRating,\n      attributes: this.query.attributes ? { ...this.query.attributes } : undefined,\n      sort: [...this.query.sort],\n      pagination: { ...this.query.pagination },\n      operator: this.query.operator,\n      fuzzy: this.query.fuzzy,\n      highlight: this.query.highlight,\n      facets: this.query.facets,\n      suggestions: this.query.suggestions\n    };\n\n    return completeQuery;\n  }\n\n  reset(): SearchQueryBuilder {\n    this.query = {\n      filters: [],\n      rangeFilters: [],\n      sort: [],\n      operator: 'AND',\n      fuzzy: true,\n      highlight: true,\n      facets: true,\n      suggestions: true,\n      pagination: {\n        page: 1,\n        limit: 20,\n        offset: 0,\n        total: 0,\n        totalPages: 0\n      }\n    };\n    return this;\n  }\n}\n\n/**\n * Main advanced search service\n */\nexport class SearchService {\n  private readonly client: HttpClient;\n  private readonly cache: CacheManager;\n  private readonly config: AdvancedSearchConfig;\n  private readonly analytics: SearchAnalyticsManager;\n  private fuseInstance: Fuse<WooCommerceProduct> | null = null;\n  private productsIndex: WooCommerceProduct[] = [];\n\n  constructor(\n    client: HttpClient,\n    cache: CacheManager,\n    config: AdvancedSearchConfig\n  ) {\n    this.client = client;\n    this.cache = cache;\n    this.config = config;\n    this.analytics = new SearchAnalyticsManager(config, cache);\n    this.initializeFuseInstance();\n  }\n\n  /**\n   * Initialize Fuse.js search index\n   */\n  private async initializeFuseInstance(): Promise<void> {\n    try {\n      // Try to load cached products index\n      const cachedIndex = await this.cache.get<WooCommerceProduct[]>('search-index');\n      if (cachedIndex.success && cachedIndex.data) {\n        this.productsIndex = cachedIndex.data;\n        this.createFuseInstance();\n      } else {\n        // Load initial products for index\n        await this.refreshSearchIndex();\n      }\n    } catch (error) {\n      console.warn('Failed to initialize search index:', error);\n    }\n  }\n\n  /**\n   * Create Fuse.js instance with configuration\n   */\n  private createFuseInstance(): void {\n    const fuseOptions: Fuse.IFuseOptions<WooCommerceProduct> = {\n      includeScore: this.config.fuzzy.includeScore,\n      includeMatches: this.config.highlighting.enabled,\n      threshold: this.config.fuzzy.threshold,\n      distance: this.config.fuzzy.distance,\n      minMatchCharLength: this.config.fuzzy.minMatchCharLength,\n      keys: [\n        { name: 'name', weight: 0.4 },\n        { name: 'description', weight: 0.2 },\n        { name: 'short_description', weight: 0.2 },\n        { name: 'sku', weight: 0.3 },\n        { name: 'categories.name', weight: 0.1 },\n        { name: 'tags.name', weight: 0.1 }\n      ]\n    };\n\n    this.fuseInstance = new Fuse(this.productsIndex, fuseOptions);\n  }\n\n  /**\n   * Refresh search index with latest products\n   */\n  async refreshSearchIndex(): Promise<Result<void, WooError>> {\n    try {\n      // Fetch all products for indexing (in chunks to avoid timeout)\n      const allProducts: WooCommerceProduct[] = [];\n      let page = 1;\n      const limit = 100;\n      let hasMore = true;\n\n      while (hasMore) {\n        const response = await this.client.get<WooCommerceProduct[]>(\n          `/products?page=${page}&per_page=${limit}&status=publish`\n        );\n\n        if (!response.success) {\n          return response;\n        }\n\n        const products = response.data.data;\n        if (products.length === 0) {\n          hasMore = false;\n        } else {\n          allProducts.push(...products);\n          page++;\n        }\n\n        // Prevent infinite loops\n        if (page > 50) {\n          break;\n        }\n      }\n\n      this.productsIndex = allProducts;\n      this.createFuseInstance();\n\n      // Cache the index\n      await this.cache.set('search-index', allProducts);\n\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to refresh search index',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Quick search with simple parameters\n   */\n  async quickSearch(params: QuickSearchParams): Promise<Result<SearchResults, WooError>> {\n    try {\n      const builder = this.createQueryBuilder();\n\n      if (params.query) {\n        builder.text(params.query);\n      }\n\n      if (params.category) {\n        builder.category(params.category);\n      }\n\n      if (params.minPrice !== undefined || params.maxPrice !== undefined) {\n        builder.price(params.minPrice, params.maxPrice);\n      }\n\n      if (params.inStock !== undefined) {\n        builder.inStock(params.inStock);\n      }\n\n      if (params.onSale !== undefined) {\n        builder.onSale(params.onSale);\n      }\n\n      if (params.featured !== undefined) {\n        builder.featured(params.featured);\n      }\n\n      if (params.page !== undefined) {\n        builder.page(params.page);\n      }\n\n      if (params.limit !== undefined) {\n        builder.limit(params.limit);\n      }\n\n      if (params.sort) {\n        const [field, direction] = params.sort.split(':');\n        builder.sort(field, (direction as SortDirection) || 'asc');\n      }\n\n      return this.search(builder.build());\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to perform quick search',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Advanced search with full query object\n   */\n  async search(query: SearchQuery): Promise<Result<SearchResults, WooError>> {\n    const startTime = performance.now();\n\n    try {\n      // Validate query\n      const validationResult = this.validateSearchQuery(query);\n      if (!validationResult.success) {\n        return validationResult;\n      }\n\n      // Check cache first\n      const cacheKey = this.generateCacheKey(query);\n      if (this.config.caching.enabled) {\n        const cachedResult = await this.cache.get<SearchResults>(cacheKey);\n        if (cachedResult.success && cachedResult.data) {\n          return Ok(cachedResult.data);\n        }\n      }\n\n      // Track search analytics\n      await this.analytics.trackEvent({\n        type: 'search',\n        query: query.text,\n        filters: query.filters,\n        timestamp: new Date(),\n        sessionId: this.analytics.getSessionId()\n      });\n\n      // Perform search\n      let searchResults: SearchResultItem[] = [];\n\n      if (query.text && this.fuseInstance) {\n        // Use Fuse.js for text search\n        const fuseResults = this.fuseInstance.search(query.text);\n        searchResults = fuseResults.map(result => ({\n          item: result.item,\n          score: result.score || 0,\n          highlights: this.extractHighlights(result),\n          matchedFields: this.extractMatchedFields(result)\n        }));\n      } else {\n        // Use all products if no text query\n        searchResults = this.productsIndex.map(product => ({\n          item: product,\n          score: 1.0,\n          highlights: [],\n          matchedFields: []\n        }));\n      }\n\n      // Apply filters\n      searchResults = this.applyFilters(searchResults, query);\n\n      // Apply sorting\n      searchResults = this.applySorting(searchResults, query.sort);\n\n      // Calculate totals\n      const totalHits = searchResults.length;\n      const maxScore = searchResults.length > 0 ? Math.max(...searchResults.map(r => r.score)) : 0;\n\n      // Apply pagination\n      const { paginatedResults, pagination } = this.applyPagination(searchResults, query.pagination);\n\n      // Generate facets and aggregations\n      const facets = query.facets ? this.generateFacets(searchResults, query) : [];\n      const aggregations = this.generateAggregations(searchResults, query);\n\n      // Generate suggestions\n      const suggestions = query.suggestions ? await this.generateSuggestions(query.text || '') : [];\n\n      const processingTime = performance.now() - startTime;\n\n      const results: SearchResults = {\n        query,\n        items: paginatedResults,\n        aggregations,\n        facets,\n        suggestions,\n        pagination,\n        processingTime,\n        totalHits,\n        maxScore,\n        debug: this.config.analytics.enabled ? {\n          parsedQuery: query,\n          executionStats: {\n            indexSize: this.productsIndex.length,\n            processingTime,\n            cacheHit: false\n          }\n        } : undefined\n      };\n\n      // Cache results\n      if (this.config.caching.enabled) {\n        await this.cache.set(cacheKey, results);\n      }\n\n      return Ok(results);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Search failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Auto-complete suggestions\n   */\n  async autoComplete(request: AutoCompleteRequest): Promise<Result<AutoCompleteResponse, WooError>> {\n    const startTime = performance.now();\n\n    try {\n      if (request.query.length < this.config.suggestions.minQueryLength) {\n        return Ok({\n          query: request.query,\n          suggestions: [],\n          products: [],\n          categories: [],\n          processingTime: performance.now() - startTime\n        });\n      }\n\n      const suggestions: SearchSuggestion[] = [];\n      const products: WooCommerceProduct[] = [];\n\n      if (this.fuseInstance && request.includeProducts) {\n        const fuseResults = this.fuseInstance.search(request.query, {\n          limit: request.limit || 5\n        });\n\n        products.push(...fuseResults.map(result => result.item));\n\n        // Generate query suggestions based on product matches\n        fuseResults.forEach(result => {\n          suggestions.push({\n            text: result.item.name,\n            type: 'product',\n            score: result.score || 0,\n            metadata: { productId: result.item.id }\n          });\n        });\n      }\n\n      // TODO: Add category suggestions\n      const categories: { id: number; name: string; count: number }[] = [];\n\n      const response: AutoCompleteResponse = {\n        query: request.query,\n        suggestions: suggestions.slice(0, request.limit || 10),\n        products,\n        categories,\n        processingTime: performance.now() - startTime\n      };\n\n      return Ok(response);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Auto-complete failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Create query builder\n   */\n  createQueryBuilder(): SearchQueryBuilder {\n    return new SearchQueryBuilderImpl();\n  }\n\n  /**\n   * Get search analytics\n   */\n  async getSearchHistory(limit?: number): Promise<Result<SearchHistoryEntry[], WooError>> {\n    return this.analytics.getSearchHistory(limit);\n  }\n\n  /**\n   * Track search result click\n   */\n  async trackResultClick(productId: number, position: number, query?: string): Promise<Result<void, WooError>> {\n    return this.analytics.trackEvent({\n      type: 'result_click',\n      query,\n      productId,\n      resultPosition: position,\n      timestamp: new Date(),\n      sessionId: this.analytics.getSessionId()\n    });\n  }\n\n  // Private helper methods\n\n  private validateSearchQuery(query: SearchQuery): Result<void, WooError> {\n    try {\n      SearchQuerySchema.parse(query);\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Invalid search query',\n        error\n      ));\n    }\n  }\n\n  private generateCacheKey(query: SearchQuery): string {\n    const keyData = {\n      text: query.text,\n      filters: query.filters,\n      rangeFilters: query.rangeFilters,\n      sort: query.sort,\n      pagination: { page: query.pagination.page, limit: query.pagination.limit }\n    };\n    return `search:${btoa(JSON.stringify(keyData))}`;\n  }\n\n  private extractHighlights(fuseResult: Fuse.FuseResult<WooCommerceProduct>): SearchHighlight[] {\n    if (!this.config.highlighting.enabled || !fuseResult.matches) {\n      return [];\n    }\n\n    return fuseResult.matches.map(match => ({\n      field: match.key || '',\n      matches: [{\n        text: match.value || '',\n        indices: match.indices || []\n      }]\n    }));\n  }\n\n  private extractMatchedFields(fuseResult: Fuse.FuseResult<WooCommerceProduct>): string[] {\n    if (!fuseResult.matches) {\n      return [];\n    }\n\n    return fuseResult.matches.map(match => match.key || '').filter(Boolean);\n  }\n\n  private applyFilters(results: SearchResultItem[], query: SearchQuery): SearchResultItem[] {\n    let filteredResults = [...results];\n\n    // Apply basic filters\n    if (query.categoryIds && query.categoryIds.length > 0) {\n      filteredResults = filteredResults.filter(result =>\n        result.item.categories.some(cat => query.categoryIds!.includes(cat.id))\n      );\n    }\n\n    if (query.inStock !== undefined) {\n      filteredResults = filteredResults.filter(result =>\n        query.inStock ? result.item.stock_status === 'instock' : result.item.stock_status !== 'instock'\n      );\n    }\n\n    if (query.onSale !== undefined) {\n      filteredResults = filteredResults.filter(result =>\n        query.onSale ? result.item.on_sale : !result.item.on_sale\n      );\n    }\n\n    if (query.featured !== undefined) {\n      filteredResults = filteredResults.filter(result =>\n        query.featured ? result.item.featured : !result.item.featured\n      );\n    }\n\n    // Apply price filters\n    if (query.minPrice !== undefined || query.maxPrice !== undefined) {\n      filteredResults = filteredResults.filter(result => {\n        const price = parseFloat(result.item.price) || 0;\n        const minOk = query.minPrice === undefined || price >= query.minPrice;\n        const maxOk = query.maxPrice === undefined || price <= query.maxPrice;\n        return minOk && maxOk;\n      });\n    }\n\n    // Apply custom filters\n    query.filters.forEach(filter => {\n      filteredResults = this.applyCustomFilter(filteredResults, filter);\n    });\n\n    // Apply range filters\n    query.rangeFilters.forEach(filter => {\n      filteredResults = this.applyRangeFilter(filteredResults, filter);\n    });\n\n    return filteredResults;\n  }\n\n  private applyCustomFilter(results: SearchResultItem[], filter: SearchFilter): SearchResultItem[] {\n    // TODO: Implement custom filter logic based on filter.field and filter.operator\n    return results;\n  }\n\n  private applyRangeFilter(results: SearchResultItem[], filter: RangeFilter): SearchResultItem[] {\n    // TODO: Implement range filter logic\n    return results;\n  }\n\n  private applySorting(results: SearchResultItem[], sorts: readonly { field: string; direction: SortDirection }[]): SearchResultItem[] {\n    if (sorts.length === 0) {\n      // Default sort by relevance score\n      return results.sort((a, b) => b.score - a.score);\n    }\n\n    return results.sort((a, b) => {\n      for (const sort of sorts) {\n        let aValue: any;\n        let bValue: any;\n\n        switch (sort.field) {\n          case 'price':\n            aValue = parseFloat(a.item.price) || 0;\n            bValue = parseFloat(b.item.price) || 0;\n            break;\n          case 'name':\n            aValue = a.item.name;\n            bValue = b.item.name;\n            break;\n          case 'date':\n            aValue = new Date(a.item.date_created);\n            bValue = new Date(b.item.date_created);\n            break;\n          case 'rating':\n            aValue = parseFloat(a.item.average_rating) || 0;\n            bValue = parseFloat(b.item.average_rating) || 0;\n            break;\n          case 'popularity':\n            aValue = a.item.total_sales || 0;\n            bValue = b.item.total_sales || 0;\n            break;\n          default:\n            aValue = a.score;\n            bValue = b.score;\n        }\n\n        if (aValue < bValue) return sort.direction === 'asc' ? -1 : 1;\n        if (aValue > bValue) return sort.direction === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n  }\n\n  private applyPagination(\n    results: SearchResultItem[], \n    pagination: SearchPagination\n  ): { paginatedResults: SearchResultItem[]; pagination: SearchPagination } {\n    const total = results.length;\n    const totalPages = Math.ceil(total / pagination.limit);\n    const offset = (pagination.page - 1) * pagination.limit;\n    const paginatedResults = results.slice(offset, offset + pagination.limit);\n\n    return {\n      paginatedResults,\n      pagination: {\n        ...pagination,\n        total,\n        totalPages,\n        offset\n      }\n    };\n  }\n\n  private generateFacets(results: SearchResultItem[], query: SearchQuery): SearchFacet[] {\n    const facets: SearchFacet[] = [];\n\n    // TODO: Generate facets based on product attributes, categories, etc.\n    // This would analyze the current result set and generate facet options\n\n    return facets;\n  }\n\n  private generateAggregations(results: SearchResultItem[], query: SearchQuery): SearchAggregation[] {\n    const aggregations: SearchAggregation[] = [];\n\n    // Price range aggregation\n    if (results.length > 0) {\n      const prices = results.map(r => parseFloat(r.item.price) || 0).filter(p => p > 0);\n      if (prices.length > 0) {\n        aggregations.push({\n          field: 'price',\n          type: 'stats',\n          stats: {\n            min: Math.min(...prices),\n            max: Math.max(...prices),\n            avg: prices.reduce((a, b) => a + b, 0) / prices.length,\n            count: prices.length\n          }\n        });\n      }\n    }\n\n    return aggregations;\n  }\n\n  private async generateSuggestions(query: string): Promise<SearchSuggestion[]> {\n    const suggestions: SearchSuggestion[] = [];\n\n    if (!query || query.length < this.config.suggestions.minQueryLength) {\n      return suggestions;\n    }\n\n    // Get recent search history for suggestions\n    const historyResult = await this.analytics.getSearchHistory(5);\n    if (historyResult.success) {\n      historyResult.data.forEach(entry => {\n        if (entry.query.toLowerCase().includes(query.toLowerCase())) {\n          suggestions.push({\n            text: entry.query,\n            type: 'query',\n            score: entry.resultCount / 100, // Simple scoring based on result count\n            metadata: { timestamp: entry.timestamp }\n          });\n        }\n      });\n    }\n\n    return suggestions.slice(0, this.config.suggestions.maxSuggestions);\n  }\n} ","/**\n * User Data Integration types for WooCommerce Headless SDK\n * Following the enhanced unified-10x-dev framework\n * Works with external authentication systems (e.g., Better Auth)\n */\n\nimport { z } from 'zod';\n\n/**\n * User roles in WordPress/WooCommerce\n */\nexport type UserRole = \n  | 'customer' \n  | 'shop_manager' \n  | 'administrator' \n  | 'editor' \n  | 'author' \n  | 'contributor' \n  | 'subscriber';\n\n/**\n * User account status\n */\nexport type UserStatus = 'active' | 'inactive' | 'pending' | 'suspended';\n\n/**\n * Gender options\n */\nexport type Gender = 'male' | 'female' | 'other' | 'prefer_not_to_say';\n\n/**\n * Address type\n */\nexport type AddressType = 'billing' | 'shipping';\n\n/**\n * User address information\n */\nexport interface UserAddress {\n  readonly type: AddressType;\n  readonly firstName: string;\n  readonly lastName: string;\n  readonly company?: string;\n  readonly address1: string;\n  readonly address2?: string;\n  readonly city: string;\n  readonly state: string;\n  readonly postcode: string;\n  readonly country: string; // ISO 3166-1 alpha-2 country code\n  readonly phone?: string;\n  readonly email?: string;\n  readonly isDefault: boolean;\n}\n\n/**\n * User preferences and settings\n */\nexport interface UserPreferences {\n  readonly language: string; // ISO 639-1 language code\n  readonly currency: string; // ISO 4217 currency code\n  readonly timezone: string; // IANA timezone identifier\n  readonly dateFormat: string;\n  readonly timeFormat: '12h' | '24h';\n  readonly emailNotifications: {\n    readonly orderUpdates: boolean;\n    readonly promotions: boolean;\n    readonly newsletter: boolean;\n    readonly wishlistReminders: boolean;\n    readonly backInStock: boolean;\n    readonly priceDrops: boolean;\n  };\n  readonly privacy: {\n    readonly profileVisibility: 'public' | 'private' | 'friends';\n    readonly showPurchaseHistory: boolean;\n    readonly allowRecommendations: boolean;\n    readonly dataSharing: boolean;\n  };\n}\n\n/**\n * User profile information\n */\nexport interface UserProfile {\n  readonly id: number;\n  readonly wordpressUserId: number; // WordPress user ID\n  readonly username: string;\n  readonly email: string;\n  readonly firstName: string;\n  readonly lastName: string;\n  readonly displayName: string;\n  readonly avatar?: string; // Avatar URL\n  readonly bio?: string;\n  readonly website?: string;\n  readonly phone?: string;\n  readonly dateOfBirth?: string; // ISO 8601 date\n  readonly gender?: Gender;\n  readonly roles: readonly UserRole[];\n  readonly status: UserStatus;\n  readonly dateRegistered: string; // ISO 8601 datetime\n  readonly lastLogin?: string; // ISO 8601 datetime\n  readonly isEmailVerified: boolean;\n  readonly isPhoneVerified: boolean;\n}\n\n/**\n * WooCommerce customer data\n */\nexport interface CustomerData {\n  readonly id: number;\n  readonly email: string;\n  readonly firstName: string;\n  readonly lastName: string;\n  readonly username: string;\n  readonly role: UserRole;\n  readonly billing: UserAddress;\n  readonly shipping: UserAddress;\n  readonly isPayingCustomer: boolean;\n  readonly ordersCount: number;\n  readonly totalSpent: string; // Monetary amount as string\n  readonly avatarUrl: string;\n  readonly dateCreated: string; // ISO 8601 datetime\n  readonly dateModified: string; // ISO 8601 datetime\n  readonly metaData: readonly {\n    readonly key: string;\n    readonly value: unknown;\n  }[];\n}\n\n/**\n * User's order summary\n */\nexport interface UserOrderSummary {\n  readonly id: number;\n  readonly orderNumber: string;\n  readonly status: string;\n  readonly currency: string;\n  readonly total: string;\n  readonly totalTax: string;\n  readonly subtotal: string;\n  readonly shippingTotal: string;\n  readonly dateCreated: string;\n  readonly dateModified: string;\n  readonly itemCount: number;\n  readonly paymentMethod: string;\n  readonly paymentMethodTitle: string;\n}\n\n/**\n * User wishlist item\n */\nexport interface WishlistItem {\n  readonly id: string;\n  readonly productId: number;\n  readonly variationId?: number;\n  readonly quantity: number;\n  readonly dateAdded: string;\n  readonly notes?: string;\n  readonly priority: 'low' | 'medium' | 'high';\n  readonly isPublic: boolean;\n}\n\n/**\n * User's complete wishlist\n */\nexport interface UserWishlist {\n  readonly id: string;\n  readonly userId: number;\n  readonly name: string;\n  readonly description?: string;\n  readonly items: readonly WishlistItem[];\n  readonly isPublic: boolean;\n  readonly shareToken?: string;\n  readonly dateCreated: string;\n  readonly dateModified: string;\n}\n\n/**\n * User activity log entry\n */\nexport interface UserActivity {\n  readonly id: string;\n  readonly userId: number;\n  readonly type: 'login' | 'logout' | 'order' | 'review' | 'wishlist' | 'profile_update' | 'address_update';\n  readonly description: string;\n  readonly metadata?: Record<string, unknown>;\n  readonly ipAddress?: string;\n  readonly userAgent?: string;\n  readonly timestamp: string; // ISO 8601 datetime\n}\n\n/**\n * User sync configuration\n */\nexport interface UserSyncConfig {\n  readonly enabled: boolean;\n  readonly syncInterval: number; // Sync interval in seconds\n  readonly syncOnLogin: boolean;\n  readonly syncProfile: boolean;\n  readonly syncAddresses: boolean;\n  readonly syncPreferences: boolean;\n  readonly syncOrderHistory: boolean;\n  readonly syncWishlist: boolean;\n  readonly maxOrderHistory: number; // Maximum orders to sync\n  readonly cacheUserData: boolean;\n  readonly cacheTtl: number; // Cache TTL in milliseconds\n}\n\n/**\n * User data sync request\n */\nexport interface UserSyncRequest {\n  readonly userId: number;\n  readonly externalUserId?: string; // ID from external auth system\n  readonly syncProfile?: boolean;\n  readonly syncAddresses?: boolean;\n  readonly syncPreferences?: boolean;\n  readonly syncOrderHistory?: boolean;\n  readonly syncWishlist?: boolean;\n  readonly forceRefresh?: boolean;\n}\n\n/**\n * User data sync response\n */\nexport interface UserSyncResponse {\n  readonly userId: number;\n  readonly syncedAt: string;\n  readonly profile?: UserProfile;\n  readonly customerData?: CustomerData;\n  readonly addresses?: readonly UserAddress[];\n  readonly preferences?: UserPreferences;\n  readonly orderHistory?: readonly UserOrderSummary[];\n  readonly wishlist?: UserWishlist;\n  readonly syncErrors?: readonly string[];\n}\n\n/**\n * User authentication context (from external auth system)\n */\nexport interface UserAuthContext {\n  readonly userId: number;\n  readonly externalUserId?: string; // ID from external auth (e.g., Better Auth)\n  readonly email: string;\n  readonly isAuthenticated: boolean;\n  readonly accessToken?: string; // If needed for API calls\n  readonly refreshToken?: string;\n  readonly tokenExpiry?: string;\n  readonly permissions?: readonly string[];\n  readonly sessionId?: string;\n}\n\n/**\n * User update request\n */\nexport interface UserUpdateRequest {\n  readonly profile?: Partial<Pick<UserProfile, 'firstName' | 'lastName' | 'displayName' | 'bio' | 'website' | 'phone' | 'dateOfBirth' | 'gender'>>;\n  readonly addresses?: readonly UserAddress[];\n  readonly preferences?: Partial<UserPreferences>;\n}\n\n/**\n * Address validation result\n */\nexport interface AddressValidationResult {\n  readonly isValid: boolean;\n  readonly errors: readonly string[];\n  readonly warnings: readonly string[];\n  readonly suggestedAddress?: UserAddress | undefined;\n}\n\n// Zod schemas for validation\nexport const UserAddressSchema = z.object({\n  type: z.enum(['billing', 'shipping']),\n  firstName: z.string().min(1),\n  lastName: z.string().min(1),\n  company: z.string().optional(),\n  address1: z.string().min(1),\n  address2: z.string().optional(),\n  city: z.string().min(1),\n  state: z.string().min(1),\n  postcode: z.string().min(1),\n  country: z.string().length(2), // ISO 3166-1 alpha-2\n  phone: z.string().optional(),\n  email: z.string().email().optional(),\n  isDefault: z.boolean(),\n});\n\nexport const UserPreferencesSchema = z.object({\n  language: z.string().length(2), // ISO 639-1\n  currency: z.string().length(3), // ISO 4217\n  timezone: z.string(),\n  dateFormat: z.string(),\n  timeFormat: z.enum(['12h', '24h']),\n  emailNotifications: z.object({\n    orderUpdates: z.boolean(),\n    promotions: z.boolean(),\n    newsletter: z.boolean(),\n    wishlistReminders: z.boolean(),\n    backInStock: z.boolean(),\n    priceDrops: z.boolean(),\n  }),\n  privacy: z.object({\n    profileVisibility: z.enum(['public', 'private', 'friends']),\n    showPurchaseHistory: z.boolean(),\n    allowRecommendations: z.boolean(),\n    dataSharing: z.boolean(),\n  }),\n});\n\nexport const UserProfileSchema = z.object({\n  id: z.number().positive(),\n  wordpressUserId: z.number().positive(),\n  username: z.string().min(1),\n  email: z.string().email(),\n  firstName: z.string().min(1),\n  lastName: z.string().min(1),\n  displayName: z.string().min(1),\n  avatar: z.string().url().optional(),\n  bio: z.string().optional(),\n  website: z.string().url().optional(),\n  phone: z.string().optional(),\n  dateOfBirth: z.string().optional(),\n  gender: z.enum(['male', 'female', 'other', 'prefer_not_to_say']).optional(),\n  roles: z.array(z.enum(['customer', 'shop_manager', 'administrator', 'editor', 'author', 'contributor', 'subscriber'])),\n  status: z.enum(['active', 'inactive', 'pending', 'suspended']),\n  dateRegistered: z.string(),\n  lastLogin: z.string().optional(),\n  isEmailVerified: z.boolean(),\n  isPhoneVerified: z.boolean(),\n});\n\nexport const UserSyncRequestSchema = z.object({\n  userId: z.number().positive(),\n  externalUserId: z.string().optional(),\n  syncProfile: z.boolean().optional(),\n  syncAddresses: z.boolean().optional(),\n  syncPreferences: z.boolean().optional(),\n  syncOrderHistory: z.boolean().optional(),\n  syncWishlist: z.boolean().optional(),\n  forceRefresh: z.boolean().optional(),\n});\n\nexport const UserAuthContextSchema = z.object({\n  userId: z.number().positive(),\n  externalUserId: z.string().optional(),\n  email: z.string().email(),\n  isAuthenticated: z.boolean(),\n  accessToken: z.string().optional(),\n  refreshToken: z.string().optional(),\n  tokenExpiry: z.string().optional(),\n  permissions: z.array(z.string()).optional(),\n  sessionId: z.string().optional(),\n});\n\n// Type guards\nexport function isUserAddress(obj: unknown): obj is UserAddress {\n  try {\n    UserAddressSchema.parse(obj);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isUserProfile(obj: unknown): obj is UserProfile {\n  try {\n    UserProfileSchema.parse(obj);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function isUserAuthContext(obj: unknown): obj is UserAuthContext {\n  try {\n    UserAuthContextSchema.parse(obj);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * User query parameters for fetching user lists\n */\nexport interface UserListParams {\n  readonly page?: number;\n  readonly limit?: number;\n  readonly search?: string;\n  readonly role?: UserRole;\n  readonly status?: UserStatus;\n  readonly orderBy?: 'id' | 'username' | 'email' | 'registered' | 'display_name';\n  readonly order?: 'asc' | 'desc';\n  readonly include?: readonly number[];\n  readonly exclude?: readonly number[];\n}\n\n/**\n * User list response\n */\nexport interface UserListResponse {\n  readonly users: readonly UserProfile[];\n  readonly total: number;\n  readonly pages: number;\n  readonly page: number;\n  readonly limit: number;\n}\n\n/**\n * User statistics\n */\nexport interface UserStats {\n  readonly totalUsers: number;\n  readonly activeUsers: number;\n  readonly newUsersThisMonth: number;\n  readonly totalCustomers: number;\n  readonly payingCustomers: number;\n  readonly averageOrderValue: string;\n  readonly totalOrdersCount: number;\n  readonly topSpendingCustomers: readonly {\n    readonly userId: number;\n    readonly email: string;\n    readonly totalSpent: string;\n    readonly ordersCount: number;\n  }[];\n} ","/**\n * Email Verification Service for WooCommerce Headless SDK\n * Following the Enhanced Unified 10X Developer Framework\n */\n\nimport { HttpClient } from '../../core/client';\nimport { CacheManager } from '../../core/cache';\nimport { Result, Ok, Err } from '../../types/result';\nimport { WooError, ErrorFactory } from '../../types/errors';\n\n/**\n * Email verification token\n */\nexport interface EmailVerificationToken {\n  readonly token: string;\n  readonly userId: number;\n  readonly email: string;\n  readonly createdAt: Date;\n  readonly expiresAt: Date;\n  readonly isUsed: boolean;\n  readonly attempts: number;\n}\n\n/**\n * Email verification request\n */\nexport interface EmailVerificationRequest {\n  readonly userId: number;\n  readonly email: string;\n  readonly templateType?: 'welcome' | 'change_email' | 'resend';\n  readonly returnUrl?: string;\n  readonly locale?: string;\n}\n\n/**\n * Email verification response\n */\nexport interface EmailVerificationResponse {\n  readonly success: boolean;\n  readonly tokenId: string;\n  readonly expiresAt: Date;\n  readonly message: string;\n}\n\n/**\n * Email verification confirmation request\n */\nexport interface EmailVerificationConfirmRequest {\n  readonly token: string;\n  readonly userId?: number; // Optional for additional security\n}\n\n/**\n * Email verification confirmation response\n */\nexport interface EmailVerificationConfirmResponse {\n  readonly success: boolean;\n  readonly userId: number;\n  readonly email: string;\n  readonly verifiedAt: Date;\n  readonly message: string;\n}\n\n/**\n * Email verification status\n */\nexport interface EmailVerificationStatus {\n  readonly userId: number;\n  readonly email: string;\n  readonly isVerified: boolean;\n  readonly verificationDate?: Date;\n  readonly pendingVerification: boolean;\n  readonly lastTokenSent?: Date;\n  readonly attemptsRemaining: number;\n}\n\n/**\n * Email template configuration\n */\nexport interface EmailTemplate {\n  readonly type: 'welcome' | 'change_email' | 'resend';\n  readonly subject: string;\n  readonly htmlBody: string;\n  readonly textBody: string;\n  readonly fromEmail: string;\n  readonly fromName: string;\n}\n\n/**\n * Email verification configuration\n */\nexport interface EmailVerificationConfig {\n  readonly enabled: boolean;\n  readonly tokenExpiryMinutes: number;\n  readonly maxAttemptsPerDay: number;\n  readonly maxResendAttempts: number;\n  readonly resendCooldownMinutes: number;\n  readonly baseUrl: string;\n  readonly verificationPath: string;\n  readonly autoVerifyOnRegistration: boolean;\n  readonly requireVerificationForPurchase: boolean;\n  readonly emailService: {\n    readonly provider: 'smtp' | 'sendgrid' | 'mailgun' | 'ses' | 'custom';\n    readonly apiKey?: string;\n    readonly apiUrl?: string;\n    readonly fromEmail: string;\n    readonly fromName: string;\n  };\n  readonly templates: {\n    readonly welcome: EmailTemplate;\n    readonly changeEmail: EmailTemplate;\n    readonly resend: EmailTemplate;\n  };\n}\n\n/**\n * Email verification service\n */\nexport class EmailVerificationService {\n  private readonly client: HttpClient;\n  private readonly cache: CacheManager;\n  private readonly config: EmailVerificationConfig;\n\n  constructor(\n    client: HttpClient,\n    cache: CacheManager,\n    config: EmailVerificationConfig\n  ) {\n    this.client = client;\n    this.cache = cache;\n    this.config = config;\n  }\n\n  /**\n   * Send email verification\n   */\n  async sendVerification(request: EmailVerificationRequest): Promise<Result<EmailVerificationResponse, WooError>> {\n    try {\n      if (!this.config.enabled) {\n        return Err(ErrorFactory.configurationError(\n          'Email verification is disabled',\n          'Enable email verification in configuration to use this feature'\n        ));\n      }\n\n      // Check rate limiting\n      const rateLimitResult = await this.checkRateLimit(request.userId, request.email);\n      if (!rateLimitResult.success) {\n        return rateLimitResult;\n      }\n\n      // Generate verification token\n      const token = this.generateVerificationToken();\n      const expiresAt = new Date(Date.now() + (this.config.tokenExpiryMinutes * 60 * 1000));\n\n      // Store token in cache and database\n      const tokenData: EmailVerificationToken = {\n        token,\n        userId: request.userId,\n        email: request.email,\n        createdAt: new Date(),\n        expiresAt,\n        isUsed: false,\n        attempts: 0\n      };\n\n      await this.storeVerificationToken(tokenData);\n\n      // Send email\n      const emailResult = await this.sendVerificationEmail(request, token);\n      if (!emailResult.success) {\n        // Clean up token if email failed\n        await this.removeVerificationToken(token);\n        return emailResult;\n      }\n\n      // Update rate limiting\n      await this.updateRateLimit(request.userId, request.email);\n\n      return Ok({\n        success: true,\n        tokenId: token,\n        expiresAt,\n        message: 'Verification email sent successfully'\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to send verification email',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Confirm email verification\n   */\n  async confirmVerification(request: EmailVerificationConfirmRequest): Promise<Result<EmailVerificationConfirmResponse, WooError>> {\n    try {\n      if (!this.config.enabled) {\n        return Err(ErrorFactory.configurationError(\n          'Email verification is disabled'\n        ));\n      }\n\n      // Retrieve and validate token\n      const tokenResult = await this.getVerificationToken(request.token);\n      if (!tokenResult.success) {\n        return Err(ErrorFactory.validationError(\n          'Invalid or expired verification token'\n        ));\n      }\n\n      const tokenData = tokenResult.data;\n\n      // Check if token is already used\n      if (tokenData.isUsed) {\n        return Err(ErrorFactory.validationError(\n          'Verification token has already been used'\n        ));\n      }\n\n      // Check if token is expired\n      if (new Date() > tokenData.expiresAt) {\n        await this.removeVerificationToken(request.token);\n        return Err(ErrorFactory.validationError(\n          'Verification token has expired'\n        ));\n      }\n\n      // Additional user ID check if provided\n      if (request.userId && request.userId !== tokenData.userId) {\n        return Err(ErrorFactory.validationError(\n          'Token does not match user'\n        ));\n      }\n\n      // Mark email as verified in WooCommerce/WordPress\n      const verificationResult = await this.markEmailAsVerified(tokenData.userId, tokenData.email);\n      if (!verificationResult.success) {\n        return verificationResult;\n      }\n\n      // Mark token as used\n      await this.markTokenAsUsed(request.token);\n\n      // Clear rate limiting for this user\n      await this.clearRateLimit(tokenData.userId, tokenData.email);\n\n      const verifiedAt = new Date();\n\n      return Ok({\n        success: true,\n        userId: tokenData.userId,\n        email: tokenData.email,\n        verifiedAt,\n        message: 'Email verified successfully'\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to confirm email verification',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get email verification status\n   */\n  async getVerificationStatus(userId: number): Promise<Result<EmailVerificationStatus, WooError>> {\n    try {\n      // Get user data from WordPress/WooCommerce\n      const userResponse = await this.client.get<any>(`/wp/v2/users/${userId}`);\n      if (!userResponse.success) {\n        return Err(ErrorFactory.apiError(\n          'Failed to get user data',\n          404,\n          'User not found'\n        ));\n      }\n\n      const userData = userResponse.data.data;\n      const email = userData.email;\n\n      // Check if email is verified (from user meta)\n      const isVerified = await this.isEmailVerified(userId);\n      const verificationDate = await this.getVerificationDate(userId);\n      \n             // Check for pending verification tokens\n       const pendingTokens = await this.getPendingTokens(userId, email);\n       const pendingVerification = pendingTokens.length > 0;\n       const lastTokenSent: Date | undefined = pendingTokens.length > 0 \n         ? pendingTokens[0].createdAt \n         : undefined;\n\n      // Check rate limiting\n      const rateLimitInfo = await this.getRateLimitInfo(userId, email);\n      const attemptsRemaining = Math.max(0, this.config.maxResendAttempts - rateLimitInfo.attempts);\n\n             const status: EmailVerificationStatus = {\n         userId,\n         email,\n         isVerified,\n         ...(verificationDate && { verificationDate }),\n         pendingVerification,\n         ...(lastTokenSent && { lastTokenSent }),\n         attemptsRemaining\n       };\n\n       return Ok(status);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to get verification status',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Resend verification email\n   */\n  async resendVerification(userId: number): Promise<Result<EmailVerificationResponse, WooError>> {\n    try {\n      // Get user email\n      const userResponse = await this.client.get<any>(`/wp/v2/users/${userId}`);\n      if (!userResponse.success) {\n        return Err(ErrorFactory.apiError(\n          'User not found',\n          404\n        ));\n      }\n\n      const email = userResponse.data.data.email;\n\n      // Check if already verified\n      const isVerified = await this.isEmailVerified(userId);\n      if (isVerified) {\n        return Err(ErrorFactory.validationError(\n          'Email is already verified'\n        ));\n      }\n\n      // Invalidate existing tokens\n      await this.invalidateUserTokens(userId, email);\n\n      // Send new verification\n      return this.sendVerification({\n        userId,\n        email,\n        templateType: 'resend'\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to resend verification email',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Check if email verification is required for a specific action\n   */\n  isVerificationRequired(action: 'purchase' | 'profile_update' | 'password_change'): boolean {\n    switch (action) {\n      case 'purchase':\n        return this.config.requireVerificationForPurchase;\n      case 'profile_update':\n      case 'password_change':\n        return this.config.enabled;\n      default:\n        return false;\n    }\n  }\n\n  // Private helper methods\n\n  /**\n   * Generate verification token\n   */\n  private generateVerificationToken(): string {\n    const timestamp = Date.now().toString(36);\n    const random = Math.random().toString(36).substr(2, 16);\n    const hash = this.simpleHash(`${timestamp}-${random}`);\n    return `${timestamp}${random}${hash}`.substr(0, 64);\n  }\n\n  /**\n   * Simple hash function for token generation\n   */\n  private simpleHash(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash).toString(36);\n  }\n\n  /**\n   * Store verification token\n   */\n  private async storeVerificationToken(tokenData: EmailVerificationToken): Promise<Result<void, WooError>> {\n    try {\n      // Store in cache for quick access\n      const cacheKey = `email_verification:${tokenData.token}`;\n      await this.cache.set(cacheKey, tokenData, this.config.tokenExpiryMinutes * 60);\n\n      // Store in user meta (WordPress)\n      const metaKey = '_email_verification_tokens';\n      const existingTokens = await this.getUserTokens(tokenData.userId);\n      const updatedTokens = [...existingTokens, tokenData];\n\n      await this.client.post(`/wp/v2/users/${tokenData.userId}`, {\n        meta: {\n          [metaKey]: JSON.stringify(updatedTokens)\n        }\n      });\n\n      return Ok(undefined);\n\n    } catch (error) {\n      return Err(ErrorFactory.cacheError(\n        'Failed to store verification token',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get verification token\n   */\n  private async getVerificationToken(token: string): Promise<Result<EmailVerificationToken, WooError>> {\n    try {\n      // Try cache first\n      const cacheKey = `email_verification:${token}`;\n      const cached = await this.cache.get<EmailVerificationToken>(cacheKey);\n      \n      if (cached.success && cached.data) {\n        return Ok(cached.data);\n      }\n\n      // Search in user meta if not in cache\n      // This is a fallback and would be slower\n      return Err(ErrorFactory.validationError(\n        'Verification token not found'\n      ));\n\n    } catch (error) {\n      return Err(ErrorFactory.cacheError(\n        'Failed to retrieve verification token',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Mark email as verified\n   */\n  private async markEmailAsVerified(userId: number, email: string): Promise<Result<void, WooError>> {\n    try {\n      const verificationData = {\n        isEmailVerified: true,\n        emailVerifiedAt: new Date().toISOString(),\n        verifiedEmail: email\n      };\n\n      await this.client.post(`/wp/v2/users/${userId}`, {\n        meta: {\n          '_email_verified': 'true',\n          '_email_verified_at': verificationData.emailVerifiedAt,\n          '_verified_email': email\n        }\n      });\n\n      return Ok(undefined);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to mark email as verified',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Check if email is verified\n   */\n  private async isEmailVerified(userId: number): Promise<boolean> {\n    try {\n      const userResponse = await this.client.get<any>(`/wp/v2/users/${userId}`);\n      if (userResponse.success) {\n        const meta = userResponse.data.data.meta || {};\n        return meta._email_verified === 'true';\n      }\n      return false;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get verification date\n   */\n  private async getVerificationDate(userId: number): Promise<Date | undefined> {\n    try {\n      const userResponse = await this.client.get<any>(`/wp/v2/users/${userId}`);\n      if (userResponse.success) {\n        const meta = userResponse.data.data.meta || {};\n        const verifiedAt = meta._email_verified_at;\n        return verifiedAt ? new Date(verifiedAt) : undefined;\n      }\n      return undefined;\n    } catch {\n      return undefined;\n    }\n  }\n\n  /**\n   * Send verification email\n   */\n  private async sendVerificationEmail(\n    request: EmailVerificationRequest,\n    token: string\n  ): Promise<Result<EmailVerificationResponse, WooError>> {\n    try {\n      const template = this.getEmailTemplate(request.templateType || 'welcome');\n      const verificationUrl = this.buildVerificationUrl(token, request.returnUrl);\n\n      const emailData = {\n        to: request.email,\n        subject: template.subject,\n        html: this.processTemplate(template.htmlBody, {\n          verificationUrl,\n          userId: request.userId,\n          email: request.email,\n          expiryMinutes: this.config.tokenExpiryMinutes\n        }),\n        text: this.processTemplate(template.textBody, {\n          verificationUrl,\n          userId: request.userId,\n          email: request.email,\n          expiryMinutes: this.config.tokenExpiryMinutes\n        }),\n        from: {\n          email: template.fromEmail,\n          name: template.fromName\n        }\n      };\n\n      // Send email based on provider\n      const emailResult = await this.sendEmail(emailData);\n      if (!emailResult.success) {\n        return emailResult;\n      }\n\n      return Ok({\n        success: true,\n        tokenId: token,\n        expiresAt: new Date(Date.now() + (this.config.tokenExpiryMinutes * 60 * 1000)),\n        message: 'Verification email sent successfully'\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to send verification email',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Build verification URL\n   */\n  private buildVerificationUrl(token: string, returnUrl?: string): string {\n    const baseUrl = this.config.baseUrl.replace(/\\/$/, '');\n    const path = this.config.verificationPath.replace(/^\\//, '');\n    let url = `${baseUrl}/${path}?token=${encodeURIComponent(token)}`;\n    \n    if (returnUrl) {\n      url += `&return_url=${encodeURIComponent(returnUrl)}`;\n    }\n    \n    return url;\n  }\n\n  /**\n   * Get email template\n   */\n  private getEmailTemplate(type: 'welcome' | 'change_email' | 'resend'): EmailTemplate {\n    return this.config.templates[type];\n  }\n\n  /**\n   * Process email template\n   */\n  private processTemplate(template: string, variables: Record<string, any>): string {\n    let processed = template;\n    \n    for (const [key, value] of Object.entries(variables)) {\n      const placeholder = `{{${key}}}`;\n      processed = processed.replace(new RegExp(placeholder, 'g'), String(value));\n    }\n    \n    return processed;\n  }\n\n  /**\n   * Send email via configured provider\n   */\n  private async sendEmail(emailData: any): Promise<Result<EmailVerificationResponse, WooError>> {\n    try {\n      // This would integrate with the configured email service\n      // For now, return success as placeholder\n      console.log('📧 Email would be sent:', emailData.subject, 'to', emailData.to);\n      \n      return Ok({\n        success: true,\n        tokenId: 'sent',\n        expiresAt: new Date(),\n        message: 'Email sent successfully'\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Email delivery failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Check rate limiting\n   */\n  private async checkRateLimit(userId: number, email: string): Promise<Result<void, WooError>> {\n    const rateLimitInfo = await this.getRateLimitInfo(userId, email);\n    \n    if (rateLimitInfo.attempts >= this.config.maxResendAttempts) {\n      const cooldownEnd = new Date(rateLimitInfo.lastAttempt.getTime() + (this.config.resendCooldownMinutes * 60 * 1000));\n      \n      if (new Date() < cooldownEnd) {\n        return Err(ErrorFactory.validationError(\n          `Too many verification attempts. Please wait ${this.config.resendCooldownMinutes} minutes before trying again.`\n        ));\n      }\n    }\n\n    return Ok(undefined);\n  }\n\n  /**\n   * Get rate limit info\n   */\n  private async getRateLimitInfo(userId: number, email: string): Promise<{ attempts: number; lastAttempt: Date }> {\n    try {\n      const cacheKey = `email_verification_rate_limit:${userId}:${email}`;\n      const cached = await this.cache.get<{ attempts: number; lastAttempt: string }>(cacheKey);\n      \n      if (cached.success && cached.data) {\n        return {\n          attempts: cached.data.attempts,\n          lastAttempt: new Date(cached.data.lastAttempt)\n        };\n      }\n      \n      return { attempts: 0, lastAttempt: new Date(0) };\n    } catch {\n      return { attempts: 0, lastAttempt: new Date(0) };\n    }\n  }\n\n  /**\n   * Update rate limit\n   */\n  private async updateRateLimit(userId: number, email: string): Promise<void> {\n    try {\n      const cacheKey = `email_verification_rate_limit:${userId}:${email}`;\n      const currentInfo = await this.getRateLimitInfo(userId, email);\n      \n      const updatedInfo = {\n        attempts: currentInfo.attempts + 1,\n        lastAttempt: new Date().toISOString()\n      };\n      \n      await this.cache.set(cacheKey, updatedInfo, 24 * 60 * 60); // 24 hours\n    } catch (error) {\n      console.warn('Failed to update rate limit:', error);\n    }\n  }\n\n  /**\n   * Clear rate limit\n   */\n  private async clearRateLimit(userId: number, email: string): Promise<void> {\n    try {\n      const cacheKey = `email_verification_rate_limit:${userId}:${email}`;\n      await this.cache.delete(cacheKey);\n    } catch (error) {\n      console.warn('Failed to clear rate limit:', error);\n    }\n  }\n\n  /**\n   * Get user tokens\n   */\n  private async getUserTokens(userId: number): Promise<EmailVerificationToken[]> {\n    try {\n      const userResponse = await this.client.get<any>(`/wp/v2/users/${userId}`);\n      if (userResponse.success) {\n        const meta = userResponse.data.data.meta || {};\n        const tokensJson = meta._email_verification_tokens;\n        return tokensJson ? JSON.parse(tokensJson) : [];\n      }\n      return [];\n    } catch {\n      return [];\n    }\n  }\n\n  /**\n   * Get pending tokens\n   */\n  private async getPendingTokens(userId: number, email: string): Promise<EmailVerificationToken[]> {\n    const allTokens = await this.getUserTokens(userId);\n    const now = new Date();\n    \n    return allTokens.filter(token => \n      token.email === email &&\n      !token.isUsed &&\n      new Date(token.expiresAt) > now\n    );\n  }\n\n  /**\n   * Mark token as used\n   */\n  private async markTokenAsUsed(token: string): Promise<void> {\n    try {\n      const cacheKey = `email_verification:${token}`;\n      const tokenData = await this.cache.get<EmailVerificationToken>(cacheKey);\n      \n      if (tokenData.success && tokenData.data) {\n        const updatedToken = {\n          ...tokenData.data,\n          isUsed: true\n        };\n        \n        await this.cache.set(cacheKey, updatedToken, this.config.tokenExpiryMinutes * 60);\n      }\n    } catch (error) {\n      console.warn('Failed to mark token as used:', error);\n    }\n  }\n\n  /**\n   * Remove verification token\n   */\n  private async removeVerificationToken(token: string): Promise<void> {\n    try {\n      const cacheKey = `email_verification:${token}`;\n      await this.cache.delete(cacheKey);\n    } catch (error) {\n      console.warn('Failed to remove verification token:', error);\n    }\n  }\n\n  /**\n   * Invalidate user tokens\n   */\n  private async invalidateUserTokens(userId: number, email: string): Promise<void> {\n    try {\n      const tokens = await this.getPendingTokens(userId, email);\n      \n      for (const token of tokens) {\n        await this.removeVerificationToken(token.token);\n      }\n    } catch (error) {\n      console.warn('Failed to invalidate user tokens:', error);\n    }\n  }\n}\n\n/**\n * Default email verification configuration\n */\nexport const DEFAULT_EMAIL_VERIFICATION_CONFIG: EmailVerificationConfig = {\n  enabled: true,\n  tokenExpiryMinutes: 60,\n  maxAttemptsPerDay: 5,\n  maxResendAttempts: 3,\n  resendCooldownMinutes: 15,\n  baseUrl: '',\n  verificationPath: '/verify-email',\n  autoVerifyOnRegistration: false,\n  requireVerificationForPurchase: false,\n  emailService: {\n    provider: 'smtp',\n    fromEmail: 'noreply@example.com',\n    fromName: 'WooCommerce Store'\n  },\n  templates: {\n    welcome: {\n      type: 'welcome',\n      subject: 'Welcome! Please verify your email address',\n      htmlBody: `\n        <h2>Welcome to our store!</h2>\n        <p>Please click the link below to verify your email address:</p>\n        <a href=\"{{verificationUrl}}\" style=\"background: #0073aa; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;\">Verify Email</a>\n        <p>This link will expire in {{expiryMinutes}} minutes.</p>\n        <p>If you didn't create this account, please ignore this email.</p>\n      `,\n      textBody: `\n        Welcome to our store!\n        \n        Please verify your email address by clicking this link:\n        {{verificationUrl}}\n        \n        This link will expire in {{expiryMinutes}} minutes.\n        \n        If you didn't create this account, please ignore this email.\n      `,\n      fromEmail: 'noreply@example.com',\n      fromName: 'WooCommerce Store'\n    },\n    changeEmail: {\n      type: 'change_email',\n      subject: 'Verify your new email address',\n      htmlBody: `\n        <h2>Email Address Change</h2>\n        <p>You requested to change your email address. Please click the link below to verify your new email:</p>\n        <a href=\"{{verificationUrl}}\" style=\"background: #0073aa; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;\">Verify New Email</a>\n        <p>This link will expire in {{expiryMinutes}} minutes.</p>\n        <p>If you didn't request this change, please contact support immediately.</p>\n      `,\n      textBody: `\n        Email Address Change\n        \n        You requested to change your email address. Please verify your new email by clicking this link:\n        {{verificationUrl}}\n        \n        This link will expire in {{expiryMinutes}} minutes.\n        \n        If you didn't request this change, please contact support immediately.\n      `,\n      fromEmail: 'noreply@example.com',\n      fromName: 'WooCommerce Store'\n    },\n    resend: {\n      type: 'resend',\n      subject: 'Email verification - Resent',\n      htmlBody: `\n        <h2>Email Verification</h2>\n        <p>Here's your requested email verification link:</p>\n        <a href=\"{{verificationUrl}}\" style=\"background: #0073aa; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;\">Verify Email</a>\n        <p>This link will expire in {{expiryMinutes}} minutes.</p>\n        <p>If you continue to have issues, please contact support.</p>\n      `,\n      textBody: `\n        Email Verification\n        \n        Here's your requested email verification link:\n        {{verificationUrl}}\n        \n        This link will expire in {{expiryMinutes}} minutes.\n        \n        If you continue to have issues, please contact support.\n      `,\n      fromEmail: 'noreply@example.com',\n      fromName: 'WooCommerce Store'\n    }\n  }\n};","/**\n * Download Management Service for WooCommerce Headless SDK\n * Following the Enhanced Unified 10X Developer Framework\n */\n\nimport { HttpClient } from '../../core/client';\nimport { CacheManager } from '../../core/cache';\nimport { Result, Ok, Err } from '../../types/result';\nimport { WooError, ErrorFactory } from '../../types/errors';\n\n/**\n * Digital product interface\n */\nexport interface DigitalProduct {\n  readonly id: number;\n  readonly name: string;\n  readonly downloadableFiles: readonly DownloadableFile[];\n  readonly downloadLimit?: number;\n  readonly downloadExpiry?: number; // Days until download expires\n  readonly fileSize: number;\n  readonly fileType: string;\n  readonly isDownloadable: boolean;\n}\n\n/**\n * Downloadable file interface\n */\nexport interface DownloadableFile {\n  readonly id: string;\n  readonly name: string;\n  readonly file: string; // URL or file path\n  readonly downloadCount: number;\n  readonly remainingDownloads?: number;\n  readonly fileSize: number;\n  readonly fileType: string;\n  readonly checksum?: string; // For file integrity verification\n}\n\n/**\n * Download link interface\n */\nexport interface DownloadLink {\n  readonly downloadId: string;\n  readonly customerId: number;\n  readonly orderId: number;\n  readonly productId: number;\n  readonly downloadUrl: string;\n  readonly accessToken: string;\n  readonly expiresAt: Date;\n  readonly downloadsRemaining: number;\n  readonly fileSize: number;\n  readonly fileName: string;\n  readonly secureUrl: string;\n}\n\n/**\n * Download permission interface\n */\nexport interface DownloadPermission {\n  readonly permissionId: string;\n  readonly customerId: number;\n  readonly orderId: number;\n  readonly productId: number;\n  readonly downloadId: string;\n  readonly downloadsRemaining: number;\n  readonly accessGranted: Date;\n  readonly accessExpires: Date | undefined;\n  readonly orderKey: string;\n  readonly isActive: boolean;\n}\n\n/**\n * Customer download interface\n */\nexport interface CustomerDownload {\n  readonly permissionId: string;\n  readonly orderId: number;\n  readonly orderDate: Date;\n  readonly productId: number;\n  readonly productName: string;\n  readonly downloadId: string;\n  readonly fileName: string;\n  readonly fileSize: number;\n  readonly downloadsRemaining: number;\n  readonly accessExpires: Date | undefined;\n  readonly downloadUrl: string;\n  readonly isExpired: boolean;\n  readonly canDownload: boolean;\n}\n\n/**\n * Download analytics interface\n */\nexport interface DownloadAnalytics {\n  readonly downloadId: string;\n  readonly customerId: number;\n  readonly productId: number;\n  readonly downloadedAt: Date;\n  readonly ipAddress: string;\n  readonly userAgent: string;\n  readonly fileSize: number;\n  readonly downloadDuration?: number;\n  readonly successful: boolean;\n  readonly errorMessage?: string;\n  readonly bandwidth: number; // bytes per second\n}\n\n/**\n * Download request interface\n */\nexport interface DownloadRequest {\n  readonly permissionId: string;\n  readonly customerId: number;\n  readonly ipAddress: string;\n  readonly userAgent: string;\n  readonly validateOwnership?: boolean;\n}\n\n/**\n * Download validation result\n */\nexport interface DownloadValidationResult {\n  readonly isValid: boolean;\n  readonly permission: DownloadPermission | undefined;\n  readonly errors: readonly string[];\n  readonly warnings: readonly string[];\n}\n\n/**\n * Download statistics\n */\nexport interface DownloadStatistics {\n  readonly totalDownloads: number;\n  readonly totalBandwidth: number;\n  readonly popularProducts: readonly {\n    readonly productId: number;\n    readonly productName: string;\n    readonly downloadCount: number;\n  }[];\n  readonly downloadsByDate: readonly {\n    readonly date: string;\n    readonly count: number;\n    readonly bandwidth: number;\n  }[];\n  readonly averageFileSize: number;\n  readonly successRate: number;\n}\n\n/**\n * Download configuration\n */\nexport interface DownloadConfig {\n  readonly enabled: boolean;\n  readonly maxDownloadsPerProduct: number;\n  readonly defaultExpiryDays: number;\n  readonly maxFileSize: number; // bytes\n  readonly allowedFileTypes: readonly string[];\n  readonly secureDownloads: boolean;\n  readonly trackAnalytics: boolean;\n  readonly rateLimiting: {\n    readonly enabled: boolean;\n    readonly maxDownloadsPerHour: number;\n    readonly maxBandwidthPerHour: number; // bytes\n  };\n  readonly security: {\n    readonly tokenExpiryMinutes: number;\n    readonly ipValidation: boolean;\n    readonly checksumValidation: boolean;\n    readonly encryptFiles: boolean;\n  };\n  readonly storage: {\n    readonly provider: 'local' | 'aws-s3' | 'google-cloud' | 'azure';\n    readonly basePath: string;\n    readonly secureBasePath: string;\n    readonly cdnUrl?: string;\n  };\n}\n\n/**\n * File stream interface for downloads\n */\nexport interface FileStream {\n  readonly stream: ReadableStream;\n  readonly fileName: string;\n  readonly fileSize: number;\n  readonly mimeType: string;\n  readonly headers: Record<string, string>;\n}\n\n/**\n * Download management service\n */\nexport class DownloadManagementService {\n  private readonly client: HttpClient;\n  private readonly cache: CacheManager;\n  private readonly config: DownloadConfig;\n\n  constructor(\n    client: HttpClient,\n    cache: CacheManager,\n    config: DownloadConfig\n  ) {\n    this.client = client;\n    this.cache = cache;\n    this.config = config;\n  }\n\n  /**\n   * Get customer's downloadable products\n   */\n  async getCustomerDownloads(customerId: number): Promise<Result<CustomerDownload[], WooError>> {\n    try {\n      if (!this.config.enabled) {\n        return Err(ErrorFactory.configurationError(\n          'Download management is disabled',\n          'Enable download management in configuration to use this feature'\n        ));\n      }\n\n      // Get customer's download permissions from WooCommerce\n      const response = await this.client.get<any>(`/customers/${customerId}/downloads`);\n      \n      if (!response.success) {\n        return Err(ErrorFactory.apiError(\n          'Failed to fetch customer downloads',\n          response.error?.statusCode || 500,\n          response.error\n        ));\n      }\n\n      const downloads = response.data.data;\n      const customerDownloads: CustomerDownload[] = [];\n\n      for (const download of downloads) {\n        const customerDownload = await this.mapToCustomerDownload(download);\n        if (customerDownload) {\n          customerDownloads.push(customerDownload);\n        }\n      }\n\n      // Sort by order date (newest first)\n      customerDownloads.sort((a, b) => b.orderDate.getTime() - a.orderDate.getTime());\n\n      return Ok(customerDownloads);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to get customer downloads',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Generate secure download link\n   */\n  async generateDownloadLink(request: DownloadRequest): Promise<Result<DownloadLink, WooError>> {\n    try {\n      // Validate download permission\n      const validationResult = await this.validateDownloadPermission(request);\n      if (!validationResult.isValid || !validationResult.permission) {\n        return Err(ErrorFactory.validationError(\n          'Download permission validation failed',\n          validationResult.errors.join(', ')\n        ));\n      }\n\n      const permission = validationResult.permission;\n\n      // Check rate limiting\n      if (this.config.rateLimiting.enabled) {\n        const rateLimitResult = await this.checkRateLimit(request.customerId, request.ipAddress);\n        if (!rateLimitResult.success) {\n          return rateLimitResult;\n        }\n      }\n\n      // Generate secure access token\n      const accessToken = this.generateSecureToken(permission);\n      const expiresAt = new Date(Date.now() + (this.config.security.tokenExpiryMinutes * 60 * 1000));\n\n      // Get file information\n      const fileInfo = await this.getFileInformation(permission.downloadId);\n      if (!fileInfo.success) {\n        return fileInfo;\n      }\n\n      const file = fileInfo.data;\n\n      // Generate secure download URL\n      const secureUrl = this.generateSecureUrl(accessToken, permission.downloadId);\n\n      // Cache the token for validation\n      await this.cacheDownloadToken(accessToken, permission, expiresAt);\n\n      const downloadLink: DownloadLink = {\n        downloadId: permission.downloadId,\n        customerId: permission.customerId,\n        orderId: permission.orderId,\n        productId: permission.productId,\n        downloadUrl: secureUrl,\n        accessToken,\n        expiresAt,\n        downloadsRemaining: permission.downloadsRemaining,\n        fileSize: file.fileSize,\n        fileName: file.fileName,\n        secureUrl\n      };\n\n      return Ok(downloadLink);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to generate download link',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Validate download permission\n   */\n  async validateDownloadPermission(request: DownloadRequest): Promise<DownloadValidationResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    try {\n      // Get permission from WooCommerce\n      const permissionResponse = await this.client.get<any>(`/customers/${request.customerId}/downloads/${request.permissionId}`);\n      \n      if (!permissionResponse.success) {\n        errors.push('Download permission not found');\n        return { isValid: false, permission: undefined, errors, warnings };\n      }\n\n      const permissionData = permissionResponse.data.data;\n      const permission = this.mapToDownloadPermission(permissionData);\n\n      // Validate ownership\n      if (request.validateOwnership && permission.customerId !== request.customerId) {\n        errors.push('Customer does not own this download');\n      }\n\n      // Check if permission is active\n      if (!permission.isActive) {\n        errors.push('Download permission is not active');\n      }\n\n      // Check download limits\n      if (permission.downloadsRemaining <= 0) {\n        errors.push('Download limit exceeded');\n      }\n\n      // Check expiration\n      if (permission.accessExpires && new Date() > permission.accessExpires) {\n        errors.push('Download access has expired');\n      }\n\n      // IP validation if enabled\n      if (this.config.security.ipValidation) {\n        const ipValidation = await this.validateCustomerIP(request.customerId, request.ipAddress);\n        if (!ipValidation) {\n          warnings.push('Download from unusual IP address');\n        }\n      }\n\n      return {\n        isValid: errors.length === 0,\n        permission: errors.length === 0 ? permission : undefined,\n        errors,\n        warnings\n      };\n\n    } catch (error) {\n      errors.push('Failed to validate download permission');\n      return { isValid: false, permission: undefined, errors, warnings };\n    }\n  }\n\n  /**\n   * Track download attempt\n   */\n  async trackDownload(analytics: DownloadAnalytics): Promise<Result<void, WooError>> {\n    try {\n      if (!this.config.trackAnalytics) {\n        return Ok(undefined);\n      }\n\n      // Store analytics in cache for immediate access\n      const cacheKey = `download_analytics:${analytics.downloadId}:${Date.now()}`;\n      await this.cache.set(cacheKey, analytics, 24 * 60 * 60); // 24 hours\n\n      // Store in WooCommerce (could be custom table or meta data)\n      const analyticsData = {\n        download_id: analytics.downloadId,\n        customer_id: analytics.customerId,\n        product_id: analytics.productId,\n        downloaded_at: analytics.downloadedAt.toISOString(),\n        ip_address: analytics.ipAddress,\n        user_agent: analytics.userAgent,\n        file_size: analytics.fileSize,\n        download_duration: analytics.downloadDuration,\n        successful: analytics.successful,\n        error_message: analytics.errorMessage,\n        bandwidth: analytics.bandwidth\n      };\n\n      // This would typically go to a custom analytics endpoint\n      await this.client.post('/download-analytics', analyticsData);\n\n      return Ok(undefined);\n\n    } catch (error) {\n      // Don't fail the download if analytics tracking fails\n      console.warn('Failed to track download analytics:', error);\n      return Ok(undefined);\n    }\n  }\n\n  /**\n   * Serve secure file download\n   */\n  async serveFile(downloadToken: string): Promise<Result<FileStream, WooError>> {\n    try {\n      // Validate download token\n      const tokenValidation = await this.validateDownloadToken(downloadToken);\n      if (!tokenValidation.success) {\n        return tokenValidation;\n      }\n\n      const { permission, fileInfo } = tokenValidation.data;\n\n      // Update download count\n      await this.updateDownloadCount(permission.permissionId);\n\n      // Generate file stream\n      const fileStream = await this.createFileStream(fileInfo.filePath, fileInfo.fileName, fileInfo.fileSize);\n      if (!fileStream.success) {\n        return fileStream;\n      }\n\n      // Track download start\n      const startTime = Date.now();\n      await this.trackDownload({\n        downloadId: permission.downloadId,\n        customerId: permission.customerId,\n        productId: permission.productId,\n        downloadedAt: new Date(),\n        ipAddress: '', // Would be provided by the request context\n        userAgent: '', // Would be provided by the request context\n        fileSize: fileInfo.fileSize,\n        successful: true,\n        bandwidth: 0 // Would be calculated during transfer\n      });\n\n      return Ok(fileStream.data);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to serve file download',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get download statistics\n   */\n  async getDownloadStatistics(\n    customerId?: number,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<Result<DownloadStatistics, WooError>> {\n    try {\n      if (!this.config.trackAnalytics) {\n        return Err(ErrorFactory.configurationError(\n          'Download analytics is disabled'\n        ));\n      }\n\n      // Build query parameters\n      const params: any = {};\n      if (customerId) params.customer_id = customerId;\n      if (startDate) params.start_date = startDate.toISOString().split('T')[0];\n      if (endDate) params.end_date = endDate.toISOString().split('T')[0];\n\n      // Get analytics data\n      const response = await this.client.get<any>('/download-analytics/stats', params);\n      \n      if (!response.success) {\n        return Err(ErrorFactory.apiError(\n          'Failed to fetch download statistics',\n          response.error?.statusCode || 500,\n          response.error\n        ));\n      }\n\n      const data = response.data.data;\n      \n      const statistics: DownloadStatistics = {\n        totalDownloads: data.total_downloads || 0,\n        totalBandwidth: data.total_bandwidth || 0,\n        popularProducts: data.popular_products?.map((p: any) => ({\n          productId: p.product_id,\n          productName: p.product_name,\n          downloadCount: p.download_count\n        })) || [],\n        downloadsByDate: data.downloads_by_date?.map((d: any) => ({\n          date: d.date,\n          count: d.count,\n          bandwidth: d.bandwidth\n        })) || [],\n        averageFileSize: data.average_file_size || 0,\n        successRate: data.success_rate || 100\n      };\n\n      return Ok(statistics);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to get download statistics',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Cleanup expired downloads\n   */\n  async cleanupExpiredDownloads(): Promise<Result<number, WooError>> {\n    try {\n      let cleanedCount = 0;\n\n      // Note: Since CacheManager doesn't have a keys() method,\n      // this cleanup would need to be implemented differently\n      // For now, we'll return 0 and add a note for future implementation\n      \n      // TODO: Implement cleanup using a separate tracking mechanism\n      // or extend CacheManager to support key pattern matching\n      \n      return Ok(cleanedCount);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to cleanup expired downloads',\n        500,\n        error\n      ));\n    }\n  }\n\n  // Private helper methods\n\n  /**\n   * Map WooCommerce download data to CustomerDownload\n   */\n  private async mapToCustomerDownload(downloadData: any): Promise<CustomerDownload | null> {\n    try {\n      const now = new Date();\n      const accessExpires = downloadData.access_expires ? new Date(downloadData.access_expires) : undefined;\n      const isExpired = accessExpires ? now > accessExpires : false;\n      const canDownload = downloadData.downloads_remaining > 0 && !isExpired;\n\n      return {\n        permissionId: downloadData.permission_id,\n        orderId: downloadData.order_id,\n        orderDate: new Date(downloadData.order_date),\n        productId: downloadData.product_id,\n        productName: downloadData.product_name,\n        downloadId: downloadData.download_id,\n        fileName: downloadData.file_name,\n        fileSize: downloadData.file_size || 0,\n        downloadsRemaining: downloadData.downloads_remaining,\n        accessExpires,\n        downloadUrl: '', // Will be generated when needed\n        isExpired,\n        canDownload\n      };\n    } catch (error) {\n      console.warn('Failed to map download data:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Map to DownloadPermission\n   */\n  private mapToDownloadPermission(data: any): DownloadPermission {\n    return {\n      permissionId: data.permission_id,\n      customerId: data.customer_id,\n      orderId: data.order_id,\n      productId: data.product_id,\n      downloadId: data.download_id,\n      downloadsRemaining: data.downloads_remaining,\n      accessGranted: new Date(data.access_granted),\n      accessExpires: data.access_expires ? new Date(data.access_expires) : undefined,\n      orderKey: data.order_key,\n      isActive: data.is_active || true\n    };\n  }\n\n  /**\n   * Generate secure token\n   */\n  private generateSecureToken(permission: DownloadPermission): string {\n    const timestamp = Date.now().toString(36);\n    const random = Math.random().toString(36).substr(2, 16);\n    const hash = this.simpleHash(`${permission.permissionId}-${permission.customerId}-${timestamp}`);\n    return `dl_${timestamp}${random}${hash}`.substr(0, 64);\n  }\n\n  /**\n   * Simple hash function\n   */\n  private simpleHash(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash;\n    }\n    return Math.abs(hash).toString(36);\n  }\n\n  /**\n   * Generate secure download URL\n   */\n  private generateSecureUrl(token: string, downloadId: string): string {\n    const baseUrl = this.config.storage.basePath;\n    return `${baseUrl}/download/${token}/${downloadId}`;\n  }\n\n  /**\n   * Cache download token\n   */\n  private async cacheDownloadToken(\n    token: string, \n    permission: DownloadPermission, \n    expiresAt: Date\n  ): Promise<void> {\n    const cacheKey = `download_token:${token}`;\n    const tokenData = {\n      permission,\n      expiresAt: expiresAt.toISOString(),\n      createdAt: new Date().toISOString()\n    };\n    \n    const ttl = Math.floor((expiresAt.getTime() - Date.now()) / 1000);\n    await this.cache.set(cacheKey, tokenData, ttl);\n  }\n\n  /**\n   * Validate download token\n   */\n  private async validateDownloadToken(token: string): Promise<Result<{ permission: DownloadPermission; fileInfo: any }, WooError>> {\n    try {\n      const cacheKey = `download_token:${token}`;\n      const tokenData = await this.cache.get<{\n        permission: DownloadPermission;\n        expiresAt: string;\n        createdAt: string;\n      }>(cacheKey);\n      \n      if (!tokenData.success || !tokenData.data) {\n        return Err(ErrorFactory.validationError(\n          'Invalid or expired download token'\n        ));\n      }\n\n      const data = tokenData.data;\n      const expiresAt = new Date(data.expiresAt);\n      \n      if (new Date() > expiresAt) {\n        await this.cache.delete(cacheKey);\n        return Err(ErrorFactory.validationError(\n          'Download token has expired'\n        ));\n      }\n\n      // Get file information\n      const fileInfo = await this.getFileInformation(data.permission.downloadId);\n      if (!fileInfo.success) {\n        return fileInfo;\n      }\n\n      return Ok({\n        permission: data.permission,\n        fileInfo: fileInfo.data\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Failed to validate download token'\n      ));\n    }\n  }\n\n  /**\n   * Get file information\n   */\n  private async getFileInformation(downloadId: string): Promise<Result<any, WooError>> {\n    try {\n      // This would fetch file metadata from WooCommerce or file system\n      // For now, return placeholder data\n      const fileInfo = {\n        downloadId,\n        fileName: `file_${downloadId}.zip`,\n        fileSize: 1024 * 1024, // 1MB placeholder\n        filePath: `/secure/downloads/${downloadId}`,\n        mimeType: 'application/zip'\n      };\n\n      return Ok(fileInfo);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to get file information',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Create file stream\n   */\n  private async createFileStream(\n    filePath: string, \n    fileName: string, \n    fileSize: number\n  ): Promise<Result<FileStream, WooError>> {\n    try {\n      // This would create an actual file stream\n      // For now, return placeholder\n      const stream = new ReadableStream({\n        start(controller) {\n          // Placeholder stream implementation\n          controller.enqueue(new Uint8Array([1, 2, 3, 4, 5]));\n          controller.close();\n        }\n      });\n\n      const fileStream: FileStream = {\n        stream,\n        fileName,\n        fileSize,\n        mimeType: this.getMimeType(fileName),\n        headers: {\n          'Content-Disposition': `attachment; filename=\"${fileName}\"`,\n          'Content-Length': fileSize.toString(),\n          'Content-Type': this.getMimeType(fileName),\n          'Cache-Control': 'no-cache, no-store, must-revalidate'\n        }\n      };\n\n      return Ok(fileStream);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to create file stream',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get MIME type from file name\n   */\n  private getMimeType(fileName: string): string {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    const mimeTypes: Record<string, string> = {\n      'pdf': 'application/pdf',\n      'zip': 'application/zip',\n      'exe': 'application/octet-stream',\n      'dmg': 'application/octet-stream',\n      'mp4': 'video/mp4',\n      'mp3': 'audio/mpeg',\n      'jpg': 'image/jpeg',\n      'jpeg': 'image/jpeg',\n      'png': 'image/png',\n      'txt': 'text/plain'\n    };\n    \n    return mimeTypes[extension || ''] || 'application/octet-stream';\n  }\n\n  /**\n   * Check rate limiting\n   */\n  private async checkRateLimit(customerId: number, ipAddress: string): Promise<Result<void, WooError>> {\n    if (!this.config.rateLimiting.enabled) {\n      return Ok(undefined);\n    }\n\n    try {\n      const hourlyKey = `rate_limit:downloads:${customerId}:${new Date().getHours()}`;\n      const cached = await this.cache.get<number>(hourlyKey);\n      const currentCount = cached.success ? (cached.data || 0) : 0;\n\n      if (currentCount >= this.config.rateLimiting.maxDownloadsPerHour) {\n        return Err(ErrorFactory.validationError(\n          `Download rate limit exceeded. Maximum ${this.config.rateLimiting.maxDownloadsPerHour} downloads per hour.`\n        ));\n      }\n\n      // Update count\n      await this.cache.set(hourlyKey, currentCount + 1, 3600); // 1 hour TTL\n\n      return Ok(undefined);\n\n    } catch (error) {\n      // Don't fail downloads if rate limiting check fails\n      console.warn('Rate limiting check failed:', error);\n      return Ok(undefined);\n    }\n  }\n\n  /**\n   * Validate customer IP\n   */\n  private async validateCustomerIP(customerId: number, ipAddress: string): Promise<boolean> {\n    try {\n      // This would implement IP validation logic\n      // For now, return true as placeholder\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Update download count\n   */\n  private async updateDownloadCount(permissionId: string): Promise<void> {\n    try {\n      // Update download count in WooCommerce\n      await this.client.post(`/download-permissions/${permissionId}/increment`);\n    } catch (error) {\n      console.warn('Failed to update download count:', error);\n    }\n  }\n}\n\n/**\n * Default download management configuration\n */\nexport const DEFAULT_DOWNLOAD_CONFIG: DownloadConfig = {\n  enabled: true,\n  maxDownloadsPerProduct: 5,\n  defaultExpiryDays: 30,\n  maxFileSize: 500 * 1024 * 1024, // 500MB\n  allowedFileTypes: ['pdf', 'zip', 'exe', 'dmg', 'mp4', 'mp3', 'jpg', 'png'],\n  secureDownloads: true,\n  trackAnalytics: true,\n  rateLimiting: {\n    enabled: true,\n    maxDownloadsPerHour: 10,\n    maxBandwidthPerHour: 1024 * 1024 * 1024 // 1GB\n  },\n  security: {\n    tokenExpiryMinutes: 60,\n    ipValidation: false,\n    checksumValidation: true,\n    encryptFiles: false\n  },\n  storage: {\n    provider: 'local',\n    basePath: '/downloads',\n    secureBasePath: '/secure/downloads'\n  }\n};","/**\n * User Data Integration Service for WooCommerce Headless SDK\n * Following the enhanced unified-10x-dev framework\n * Works with external authentication systems (e.g., Better Auth)\n */\n\nimport { HttpClient } from '../../core/client';\nimport { CacheManager } from '../../core/cache';\nimport { Result, Ok, Err } from '../../types/result';\nimport { WooError, ErrorFactory } from '../../types/errors';\nimport { UserSyncConfig } from '../../types/config';\nimport {\n  UserProfile,\n  CustomerData,\n  UserAddress,\n  UserPreferences,\n  UserOrderSummary,\n  UserWishlist,\n  WishlistItem,\n  UserActivity,\n  UserAuthContext,\n  UserSyncRequest,\n  UserSyncResponse,\n  UserUpdateRequest,\n  AddressValidationResult,\n  UserListParams,\n  UserListResponse,\n  UserStats,\n  UserRole,\n  UserStatus,\n  UserProfileSchema,\n  UserAddressSchema,\n  UserPreferencesSchema,\n  UserSyncRequestSchema,\n  UserAuthContextSchema,\n  isUserProfile,\n  isUserAddress,\n  isUserAuthContext\n} from '../../types/user';\nimport { generateId } from '../../test/utils';\nimport { \n  EmailVerificationService, \n  EmailVerificationConfig, \n  EmailVerificationRequest,\n  EmailVerificationConfirmRequest,\n  EmailVerificationResponse,\n  EmailVerificationConfirmResponse,\n  EmailVerificationStatus,\n  DEFAULT_EMAIL_VERIFICATION_CONFIG\n} from './email-verification';\nimport { \n  DownloadManagementService, \n  DownloadConfig, \n  CustomerDownload, \n  DownloadRequest, \n  DownloadLink, \n  DownloadStatistics,\n  DEFAULT_DOWNLOAD_CONFIG \n} from './download-management';\n\n/**\n * User cache manager for optimized data access\n */\nclass UserCacheManager {\n  private readonly cache: CacheManager;\n  private readonly config: UserSyncConfig;\n\n  constructor(cache: CacheManager, config: UserSyncConfig) {\n    this.cache = cache;\n    this.config = config;\n  }\n\n  /**\n   * Get cached user profile\n   */\n  async getUserProfile(userId: number): Promise<Result<UserProfile | null, WooError>> {\n    if (!this.config.cacheUserData) {\n      return Ok(null);\n    }\n\n    try {\n      const cacheKey = `user-profile:${userId}`;\n      const cached = await this.cache.get<UserProfile>(cacheKey);\n      return Ok(cached.success ? cached.data : null);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError(\n        'Failed to get cached user profile',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Cache user profile\n   */\n  async cacheUserProfile(profile: UserProfile): Promise<Result<void, WooError>> {\n    if (!this.config.cacheUserData) {\n      return Ok(undefined);\n    }\n\n    try {\n      const cacheKey = `user-profile:${profile.id}`;\n      await this.cache.set(cacheKey, profile, this.config.cacheTtl);\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError(\n        'Failed to cache user profile',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Clear user cache\n   */\n  async clearUserCache(userId: number): Promise<Result<void, WooError>> {\n    try {\n      const keys = [\n        `user-profile:${userId}`,\n        `user-addresses:${userId}`,\n        `user-preferences:${userId}`,\n        `user-orders:${userId}`,\n        `user-wishlist:${userId}`\n      ];\n\n      for (const key of keys) {\n        await this.cache.delete(key);\n      }\n\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError(\n        'Failed to clear user cache',\n        error\n      ));\n    }\n  }\n}\n\n/**\n * Address validation service\n */\nclass AddressValidator {\n  /**\n   * Validate user address\n   */\n  static validateAddress(address: UserAddress): AddressValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Required field validation\n    if (!address.firstName.trim()) {\n      errors.push('First name is required');\n    }\n    if (!address.lastName.trim()) {\n      errors.push('Last name is required');\n    }\n    if (!address.address1.trim()) {\n      errors.push('Address line 1 is required');\n    }\n    if (!address.city.trim()) {\n      errors.push('City is required');\n    }\n    if (!address.state.trim()) {\n      errors.push('State/Province is required');\n    }\n    if (!address.postcode.trim()) {\n      errors.push('Postal code is required');\n    }\n    if (!address.country.trim() || address.country.length !== 2) {\n      errors.push('Valid country code is required');\n    }\n\n    // Email validation if provided\n    if (address.email && !this.isValidEmail(address.email)) {\n      errors.push('Invalid email format');\n    }\n\n    // Phone validation if provided\n    if (address.phone && !this.isValidPhone(address.phone)) {\n      warnings.push('Phone number format may be invalid');\n    }\n\n    // Postal code format warnings\n    if (!this.isValidPostalCode(address.postcode, address.country)) {\n      warnings.push('Postal code format may be invalid for the selected country');\n    }\n\n    const result: AddressValidationResult = {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n    \n    // Only add suggestedAddress if we have one\n    // TODO: Implement address suggestion service\n    \n    return result;\n  }\n\n  private static isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  private static isValidPhone(phone: string): boolean {\n    // Basic phone validation - can be enhanced with more specific patterns\n    const phoneRegex = /^[\\+]?[1-9][\\d]{0,15}$/;\n    return phoneRegex.test(phone.replace(/[\\s\\-\\(\\)]/g, ''));\n  }\n\n  private static isValidPostalCode(postcode: string, country: string): boolean {\n    // Basic postal code validation - can be enhanced with country-specific patterns\n    const patterns: Record<string, RegExp> = {\n      'US': /^\\d{5}(-\\d{4})?$/,\n      'CA': /^[A-Za-z]\\d[A-Za-z][ -]?\\d[A-Za-z]\\d$/,\n      'GB': /^[A-Z]{1,2}\\d[A-Z\\d]? ?\\d[A-Z]{2}$/,\n      'DE': /^\\d{5}$/,\n      'FR': /^\\d{5}$/,\n      'AU': /^\\d{4}$/\n    };\n\n    const pattern = patterns[country.toUpperCase()];\n    return pattern ? pattern.test(postcode) : true; // Default to valid for unknown countries\n  }\n}\n\n/**\n * Main User Service class\n */\nexport class UserService {\n  private readonly client: HttpClient;\n  private readonly cache: CacheManager;\n  private readonly config: UserSyncConfig;\n  private readonly userCache: UserCacheManager;\n  private readonly emailVerification: EmailVerificationService;\n  private readonly downloads: DownloadManagementService;\n  private currentAuthContext: UserAuthContext | null = null;\n\n  constructor(\n    client: HttpClient,\n    cache: CacheManager,\n    config: UserSyncConfig,\n    emailVerificationConfig?: EmailVerificationConfig,\n    downloadConfig?: DownloadConfig\n  ) {\n    this.client = client;\n    this.cache = cache;\n    this.config = config;\n    this.userCache = new UserCacheManager(cache, config);\n    this.emailVerification = new EmailVerificationService(\n      client,\n      cache,\n      emailVerificationConfig || DEFAULT_EMAIL_VERIFICATION_CONFIG\n    );\n    this.downloads = new DownloadManagementService(\n      client,\n      cache,\n      downloadConfig || DEFAULT_DOWNLOAD_CONFIG\n    );\n  }\n\n  /**\n   * Set authentication context from external auth system\n   */\n  setAuthContext(authContext: UserAuthContext): Result<void, WooError> {\n    try {\n      // Validate the auth context\n      if (!isUserAuthContext(authContext)) {\n        return Err(ErrorFactory.validationError(\n          'Invalid authentication context',\n          'AuthContext must contain valid user information'\n        ));\n      }\n\n      this.currentAuthContext = authContext;\n\n      // Trigger sync if enabled and configured\n      if (this.config.enabled && this.config.syncOnLogin) {\n        // Don't await - let sync happen in background\n        const syncRequest: UserSyncRequest = {\n          userId: authContext.userId\n        };\n        if (authContext.externalUserId) {\n          (syncRequest as any).externalUserId = authContext.externalUserId;\n        }\n        this.syncUserData(syncRequest).catch(error => {\n          console.warn('Background user sync failed:', error);\n        });\n      }\n\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to set authentication context',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get current authenticated user context\n   */\n  getCurrentAuthContext(): UserAuthContext | null {\n    return this.currentAuthContext;\n  }\n\n  /**\n   * Clear authentication context\n   */\n  clearAuthContext(): Result<void, WooError> {\n    try {\n      if (this.currentAuthContext) {\n        // Clear user cache when logging out\n        this.userCache.clearUserCache(this.currentAuthContext.userId);\n      }\n      this.currentAuthContext = null;\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to clear authentication context',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Sync user data with WordPress/WooCommerce\n   */\n  async syncUserData(request: UserSyncRequest): Promise<Result<UserSyncResponse, WooError>> {\n    try {\n      // Validate request\n      const validationResult = this.validateSyncRequest(request);\n      if (!validationResult.success) {\n        return validationResult;\n      }\n\n      if (!this.config.enabled) {\n        return Err(ErrorFactory.configurationError(\n          'User sync is disabled',\n          'Enable user sync in configuration to use this feature'\n        ));\n      }\n\n      // Build response object with collected data\n      const syncErrors: string[] = [];\n      let profile: UserProfile | undefined;\n      let customerData: CustomerData | undefined;\n      let addresses: readonly UserAddress[] | undefined;\n      let preferences: UserPreferences | undefined;\n      let orderHistory: readonly UserOrderSummary[] | undefined;\n      let wishlist: UserWishlist | undefined;\n\n      // Sync profile data\n      if (request.syncProfile !== false && this.config.syncProfile) {\n        const profileResult = await this.syncUserProfile(request.userId);\n        if (profileResult.success) {\n          profile = profileResult.data.profile;\n          customerData = profileResult.data.customerData;\n        } else {\n          syncErrors.push(`Profile sync failed: ${profileResult.error.message}`);\n        }\n      }\n\n      // Sync addresses\n      if (request.syncAddresses !== false && this.config.syncAddresses) {\n        const addressResult = await this.syncUserAddresses(request.userId);\n        if (addressResult.success) {\n          addresses = addressResult.data;\n        } else {\n          syncErrors.push(`Address sync failed: ${addressResult.error.message}`);\n        }\n      }\n\n      // Sync preferences\n      if (request.syncPreferences !== false && this.config.syncPreferences) {\n        const prefResult = await this.syncUserPreferences(request.userId);\n        if (prefResult.success) {\n          preferences = prefResult.data;\n        } else {\n          syncErrors.push(`Preferences sync failed: ${prefResult.error.message}`);\n        }\n      }\n\n      // Sync order history\n      if (request.syncOrderHistory !== false && this.config.syncOrderHistory) {\n        const orderResult = await this.syncUserOrderHistory(request.userId);\n        if (orderResult.success) {\n          orderHistory = orderResult.data;\n        } else {\n          syncErrors.push(`Order history sync failed: ${orderResult.error.message}`);\n        }\n      }\n\n      // Sync wishlist\n      if (request.syncWishlist !== false && this.config.syncWishlist) {\n        const wishlistResult = await this.syncUserWishlist(request.userId);\n        if (wishlistResult.success) {\n          wishlist = wishlistResult.data;\n        } else {\n          syncErrors.push(`Wishlist sync failed: ${wishlistResult.error.message}`);\n        }\n      }\n\n      // Construct final response\n      const response: UserSyncResponse = {\n        userId: request.userId,\n        syncedAt: new Date().toISOString(),\n        profile,\n        customerData,\n        addresses,\n        preferences,\n        orderHistory,\n        wishlist,\n        syncErrors: syncErrors.length > 0 ? syncErrors : undefined\n      };\n\n      return Ok(response);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'User data sync failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get user profile by ID\n   */\n  async getUserProfile(userId: number, useCache: boolean = true): Promise<Result<UserProfile, WooError>> {\n    try {\n      // Check cache first\n      if (useCache) {\n        const cachedResult = await this.userCache.getUserProfile(userId);\n        if (cachedResult.success && cachedResult.data) {\n          return Ok(cachedResult.data);\n        }\n      }\n\n      // Fetch from WordPress API\n      const response = await this.client.get<any>(`/wp/v2/users/${userId}`);\n      if (!response.success) {\n        return response;\n      }\n\n      const userData = response.data.data;\n      \n      // Transform WordPress user data to our UserProfile format\n      const profile: UserProfile = {\n        id: userData.id,\n        wordpressUserId: userData.id,\n        username: userData.username || userData.slug,\n        email: userData.email,\n        firstName: userData.first_name || '',\n        lastName: userData.last_name || '',\n        displayName: userData.display_name || userData.name,\n        avatar: userData.avatar_urls?.['96'] || undefined,\n        bio: userData.description || undefined,\n        website: userData.url || undefined,\n        roles: userData.roles || ['customer'],\n        status: 'active', // Default status\n        dateRegistered: userData.date || new Date().toISOString(),\n        lastLogin: undefined, // Not available in standard WP API\n        isEmailVerified: true, // Assume verified if user exists\n        isPhoneVerified: false // Default to false\n      };\n\n      // Cache the profile\n      await this.userCache.cacheUserProfile(profile);\n\n      return Ok(profile);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to get user profile',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Update user profile\n   */\n  async updateUserProfile(userId: number, updates: UserUpdateRequest): Promise<Result<UserProfile, WooError>> {\n    try {\n      const updateData: any = {};\n\n      if (updates.profile) {\n        if (updates.profile.firstName) updateData.first_name = updates.profile.firstName;\n        if (updates.profile.lastName) updateData.last_name = updates.profile.lastName;\n        if (updates.profile.displayName) updateData.display_name = updates.profile.displayName;\n        if (updates.profile.bio) updateData.description = updates.profile.bio;\n        if (updates.profile.website) updateData.url = updates.profile.website;\n      }\n\n      const response = await this.client.post<any>(`/wp/v2/users/${userId}`, updateData);\n      if (!response.success) {\n        return response;\n      }\n\n      // Clear cache and fetch updated profile\n      await this.userCache.clearUserCache(userId);\n      return this.getUserProfile(userId, false);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to update user profile',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get customer data from WooCommerce\n   */\n  async getCustomerData(customerId: number): Promise<Result<CustomerData, WooError>> {\n    try {\n      const response = await this.client.get<any>(`/customers/${customerId}`);\n      if (!response.success) {\n        return response;\n      }\n\n      const customerData = response.data.data;\n      \n      // Transform WooCommerce customer data\n      const customer: CustomerData = {\n        id: customerData.id,\n        email: customerData.email,\n        firstName: customerData.first_name,\n        lastName: customerData.last_name,\n        username: customerData.username,\n        role: customerData.role || 'customer',\n        billing: this.transformWooAddressToUserAddress(customerData.billing, 'billing'),\n        shipping: this.transformWooAddressToUserAddress(customerData.shipping, 'shipping'),\n        isPayingCustomer: customerData.is_paying_customer || false,\n        ordersCount: customerData.orders_count || 0,\n        totalSpent: customerData.total_spent || '0',\n        avatarUrl: customerData.avatar_url || '',\n        dateCreated: customerData.date_created,\n        dateModified: customerData.date_modified,\n        metaData: customerData.meta_data || []\n      };\n\n      return Ok(customer);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to get customer data',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Validate address\n   */\n  validateAddress(address: UserAddress): AddressValidationResult {\n    return AddressValidator.validateAddress(address);\n  }\n\n  // Email Verification Methods\n\n  /**\n   * Send email verification\n   */\n  async sendEmailVerification(request: EmailVerificationRequest): Promise<Result<EmailVerificationResponse, WooError>> {\n    return this.emailVerification.sendVerification(request);\n  }\n\n  /**\n   * Confirm email verification\n   */\n  async confirmEmailVerification(request: EmailVerificationConfirmRequest): Promise<Result<EmailVerificationConfirmResponse, WooError>> {\n    return this.emailVerification.confirmVerification(request);\n  }\n\n  /**\n   * Get email verification status\n   */\n  async getEmailVerificationStatus(userId: number): Promise<Result<EmailVerificationStatus, WooError>> {\n    return this.emailVerification.getVerificationStatus(userId);\n  }\n\n  /**\n   * Resend email verification\n   */\n  async resendEmailVerification(userId: number): Promise<Result<EmailVerificationResponse, WooError>> {\n    return this.emailVerification.resendVerification(userId);\n  }\n\n  /**\n   * Check if email verification is required for a specific action\n   */\n  isEmailVerificationRequired(action: 'purchase' | 'profile_update' | 'password_change'): boolean {\n    return this.emailVerification.isVerificationRequired(action);\n  }\n\n  // Download Management Methods\n\n  /**\n   * Get customer's downloadable products\n   */\n  async getCustomerDownloads(customerId: number): Promise<Result<CustomerDownload[], WooError>> {\n    return this.downloads.getCustomerDownloads(customerId);\n  }\n\n  /**\n   * Generate secure download link\n   */\n  async generateDownloadLink(request: DownloadRequest): Promise<Result<DownloadLink, WooError>> {\n    return this.downloads.generateDownloadLink(request);\n  }\n\n  /**\n   * Get download statistics\n   */\n  async getDownloadStatistics(\n    customerId?: number,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<Result<DownloadStatistics, WooError>> {\n    return this.downloads.getDownloadStatistics(customerId, startDate, endDate);\n  }\n\n  /**\n   * Cleanup expired downloads\n   */\n  async cleanupExpiredDownloads(): Promise<Result<number, WooError>> {\n    return this.downloads.cleanupExpiredDownloads();\n  }\n\n  /**\n   * Get user order history\n   */\n  async getUserOrderHistory(\n    userId: number, \n    page: number = 1, \n    limit: number = 10\n  ): Promise<Result<UserOrderSummary[], WooError>> {\n    try {\n      const response = await this.client.get<any>(\n        `/orders?customer=${userId}&page=${page}&per_page=${Math.min(limit, this.config.maxOrderHistory)}`\n      );\n      \n      if (!response.success) {\n        return response;\n      }\n\n      const orders = response.data.data.map((order: any): UserOrderSummary => ({\n        id: order.id,\n        orderNumber: order.number,\n        status: order.status,\n        currency: order.currency,\n        total: order.total,\n        totalTax: order.total_tax,\n        subtotal: order.subtotal,\n        shippingTotal: order.shipping_total,\n        dateCreated: order.date_created,\n        dateModified: order.date_modified,\n        itemCount: order.line_items?.length || 0,\n        paymentMethod: order.payment_method,\n        paymentMethodTitle: order.payment_method_title\n      }));\n\n      return Ok(orders);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to get user order history',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Log user activity\n   */\n  async logUserActivity(activity: Omit<UserActivity, 'id' | 'timestamp'>): Promise<Result<void, WooError>> {\n    try {\n      const activityEntry: UserActivity = {\n        ...activity,\n        id: generateId(),\n        timestamp: new Date().toISOString()\n      };\n\n      // Store activity in cache for now (could be enhanced to store in database)\n      const cacheKey = `user-activity:${activity.userId}:${activityEntry.id}`;\n      await this.cache.set(cacheKey, activityEntry, 86400000); // 24 hours\n\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError(\n        'Failed to log user activity',\n        error\n      ));\n    }\n  }\n\n  // Private helper methods\n\n  private validateSyncRequest(request: UserSyncRequest): Result<void, WooError> {\n    try {\n      UserSyncRequestSchema.parse(request);\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Invalid sync request',\n        error\n      ));\n    }\n  }\n\n  private async syncUserProfile(userId: number): Promise<Result<{ profile: UserProfile; customerData?: CustomerData }, WooError>> {\n    const profileResult = await this.getUserProfile(userId, false);\n    if (!profileResult.success) {\n      return profileResult;\n    }\n\n    const profile = profileResult.data;\n    \n    // Try to get WooCommerce customer data\n    let customerData: CustomerData | undefined;\n    const customerResult = await this.getCustomerData(userId);\n    if (customerResult.success) {\n      customerData = customerResult.data;\n    }\n\n    return Ok({ profile, customerData });\n  }\n\n  private async syncUserAddresses(userId: number): Promise<Result<UserAddress[], WooError>> {\n    // This would typically fetch addresses from WooCommerce customer data\n    const customerResult = await this.getCustomerData(userId);\n    if (!customerResult.success) {\n      return customerResult;\n    }\n\n    const addresses: UserAddress[] = [];\n    const customer = customerResult.data;\n\n    if (customer.billing) {\n      addresses.push(customer.billing);\n    }\n    if (customer.shipping) {\n      addresses.push(customer.shipping);\n    }\n\n    return Ok(addresses);\n  }\n\n  private async syncUserPreferences(userId: number): Promise<Result<UserPreferences, WooError>> {\n    // Default preferences - could be enhanced to fetch from user meta\n    const preferences: UserPreferences = {\n      language: 'en',\n      currency: 'USD',\n      timezone: 'UTC',\n      dateFormat: 'YYYY-MM-DD',\n      timeFormat: '24h',\n      emailNotifications: {\n        orderUpdates: true,\n        promotions: false,\n        newsletter: false,\n        wishlistReminders: true,\n        backInStock: true,\n        priceDrops: false\n      },\n      privacy: {\n        profileVisibility: 'private',\n        showPurchaseHistory: false,\n        allowRecommendations: true,\n        dataSharing: false\n      }\n    };\n\n    return Ok(preferences);\n  }\n\n  private async syncUserOrderHistory(userId: number): Promise<Result<UserOrderSummary[], WooError>> {\n    return this.getUserOrderHistory(userId, 1, this.config.maxOrderHistory);\n  }\n\n  private async syncUserWishlist(userId: number): Promise<Result<UserWishlist, WooError>> {\n    // Placeholder implementation - would need a wishlist plugin or custom implementation\n    const wishlist: UserWishlist = {\n      id: `wishlist-${userId}`,\n      userId,\n      name: 'My Wishlist',\n      items: [],\n      isPublic: false,\n      dateCreated: new Date().toISOString(),\n      dateModified: new Date().toISOString()\n    };\n\n    return Ok(wishlist);\n  }\n\n  private transformWooAddressToUserAddress(wooAddress: any, type: 'billing' | 'shipping'): UserAddress {\n    return {\n      type,\n      firstName: wooAddress.first_name || '',\n      lastName: wooAddress.last_name || '',\n      company: wooAddress.company || undefined,\n      address1: wooAddress.address_1 || '',\n      address2: wooAddress.address_2 || undefined,\n      city: wooAddress.city || '',\n      state: wooAddress.state || '',\n      postcode: wooAddress.postcode || '',\n      country: wooAddress.country || '',\n      phone: wooAddress.phone || undefined,\n      email: wooAddress.email || undefined,\n      isDefault: true\n    };\n  }\n}\n\n// Export download management types and service\nexport type { \n  DigitalProduct, \n  DownloadableFile, \n  DownloadLink, \n  DownloadPermission, \n  CustomerDownload, \n  DownloadAnalytics, \n  DownloadRequest, \n  DownloadValidationResult, \n  DownloadStatistics, \n  DownloadConfig, \n  FileStream \n} from './download-management';\n\nexport { DownloadManagementService, DEFAULT_DOWNLOAD_CONFIG } from './download-management'; ","/**\n * Review and Rating management module for WooCommerce Headless SDK\n * Following the enhanced unified-10x-dev framework\n */\n\nimport { HttpClient } from '../../core/client';\nimport { CacheManager } from '../../core/cache';\nimport { Result, Ok, Err } from '../../types/result';\nimport { WooError, ErrorFactory } from '../../types/errors';\nimport { \n  ProductReview,\n  CreateReviewRequest,\n  UpdateReviewRequest,\n  ReviewListParams,\n  ReviewListResponse,\n  ReviewAnalytics,\n  ReviewValidationResult,\n  ReviewVote,\n  ReviewModeration,\n  RatingDistribution,\n  ReviewStatus,\n  ReviewSearchConfig,\n  ReviewFilter,\n  ReviewImage\n} from '../../types/review';\n/**\n * Review validation schema\n */\nconst CreateReviewSchema = {\n  product_id: { min: 1, type: 'number' },\n  review: { min: 10, max: 10000, type: 'string' },\n  reviewer: { min: 1, max: 100, type: 'string' },\n  reviewer_email: { type: 'email' },\n  rating: { min: 1, max: 5, type: 'number' },\n  parent_id: { type: 'number', optional: true },\n  images: { type: 'array', optional: true }\n};\n\n/**\n * Review service class with comprehensive functionality\n */\nexport class ReviewService {\n  private readonly client: HttpClient;\n  private readonly cache: CacheManager;\n  private readonly rateLimitStore = new Map<string, { count: number; resetTime: number }>();\n\n  constructor(client: HttpClient, cache: CacheManager) {\n    this.client = client;\n    this.cache = cache;\n  }\n\n  /**\n   * List reviews with advanced filtering and pagination\n   */\n  async list(params: ReviewListParams = {}): Promise<Result<ReviewListResponse, WooError>> {\n    try {\n      // Validate parameters\n      const validationResult = this.validateListParams(params);\n      if (!validationResult.success) {\n        return validationResult;\n      }\n\n      // Build query parameters\n      const queryParams = this.buildQueryParams(params);\n      const cacheKey = `reviews:list:${JSON.stringify(queryParams)}`;\n\n      // Check cache\n      const cachedResult = await this.cache.get<ReviewListResponse>(cacheKey);\n      if (cachedResult.success && cachedResult.data) {\n        return Ok(cachedResult.data);\n      }\n\n      // Make API request\n      const response = await this.client.get<ProductReview[]>(\n        `/products/reviews?${new URLSearchParams(queryParams as any).toString()}`\n      );\n\n      if (!response.success) {\n        return response;\n      }\n\n      // Extract pagination from headers\n      const totalReviews = parseInt(response.data.headers['x-wp-total'] || '0');\n      const totalPages = parseInt(response.data.headers['x-wp-totalpages'] || '0');\n\n      // Process and validate reviews\n      const reviews = response.data.data;\n      \n      // Calculate rating distribution and average\n      const ratingDistribution = this.calculateRatingDistribution(reviews);\n      const averageRating = ratingDistribution.average;\n\n      const result: ReviewListResponse = {\n        reviews,\n        totalReviews,\n        totalPages,\n        currentPage: params.page || 1,\n        perPage: params.limit || 10,\n        averageRating,\n        ratingDistribution\n      };\n\n      // Cache the result with TTL\n      await this.cache.set(cacheKey, result, 300); // 5 minutes cache\n\n      return Ok(result);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to list reviews',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get a single review by ID\n   */\n  async get(reviewId: number): Promise<Result<ProductReview, WooError>> {\n    try {\n      if (!reviewId || reviewId <= 0) {\n        return Err(ErrorFactory.validationError('Invalid review ID'));\n      }\n\n      const cacheKey = `reviews:single:${reviewId}`;\n\n      // Check cache\n      const cachedResult = await this.cache.get<ProductReview>(cacheKey);\n      if (cachedResult.success && cachedResult.data) {\n        return Ok(cachedResult.data);\n      }\n\n      // Make API request\n      const response = await this.client.get<ProductReview>(`/products/reviews/${reviewId}`);\n\n      if (!response.success) {\n        if (response.error.statusCode === 404) {\n          return Err(ErrorFactory.validationError('Review not found'));\n        }\n        return response;\n      }\n\n      const review = response.data.data;\n\n      // Cache the result\n      await this.cache.set(cacheKey, review, 600); // 10 minutes cache\n\n      return Ok(review);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to get review',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Create a new review with validation and rate limiting\n   */\n  async create(reviewData: CreateReviewRequest): Promise<Result<ProductReview, WooError>> {\n    try {\n      // Validate request data\n      const validation = await this.validateReview(reviewData);\n      if (!validation.isValid) {\n        return Err(ErrorFactory.validationError(\n          'Review validation failed',\n          validation.errors\n        ));\n      }\n\n      // Check rate limiting\n      const rateLimitCheck = await this.checkRateLimit(reviewData.reviewer_email);\n      if (!rateLimitCheck.success) {\n        return rateLimitCheck;\n      }\n\n      // Process images if provided\n      let processedImages: ReviewImage[] = [];\n      if (reviewData.images && reviewData.images.length > 0) {\n        const imageResult = await this.processReviewImages(reviewData.images);\n        if (!imageResult.success) {\n          return imageResult;\n        }\n        processedImages = imageResult.data;\n      }\n\n      // Prepare review payload\n      const reviewPayload = {\n        product_id: reviewData.product_id,\n        review: this.sanitizeContent(reviewData.review),\n        reviewer: this.sanitizeContent(reviewData.reviewer),\n        reviewer_email: reviewData.reviewer_email,\n        rating: reviewData.rating,\n        parent: reviewData.parent_id || 0,\n        status: validation.requiresModeration ? 'hold' : 'approved'\n      };\n\n      // Submit review\n      const response = await this.client.post<ProductReview>('/products/reviews', reviewPayload);\n\n      if (!response.success) {\n        return response;\n      }\n\n      const createdReview = response.data.data;\n\n      // Attach images if any\n      if (processedImages.length > 0) {\n        await this.attachImagesToReview(createdReview.id, processedImages);\n      }\n\n      // Update rate limiting counter\n      this.updateRateLimit(reviewData.reviewer_email);\n\n      // Invalidate related caches\n      await this.invalidateReviewCaches(reviewData.product_id);\n\n      // Log analytics event\n      await this.trackReviewEvent('review_created', {\n        reviewId: createdReview.id,\n        productId: reviewData.product_id,\n        rating: reviewData.rating,\n        hasImages: processedImages.length > 0\n      });\n\n      return Ok(createdReview);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to create review',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Update an existing review\n   */\n  async update(reviewId: number, updateData: UpdateReviewRequest): Promise<Result<ProductReview, WooError>> {\n    try {\n      if (!reviewId || reviewId <= 0) {\n        return Err(ErrorFactory.validationError('Invalid review ID'));\n      }\n\n      // Get existing review first\n      const existingReview = await this.get(reviewId);\n      if (!existingReview.success) {\n        return existingReview;\n      }\n\n      // Prepare update payload\n      const updatePayload: any = {};\n      \n      if (updateData.review !== undefined) {\n        updatePayload.review = this.sanitizeContent(updateData.review);\n      }\n      \n      if (updateData.rating !== undefined) {\n        if (updateData.rating < 1 || updateData.rating > 5) {\n          return Err(ErrorFactory.validationError('Rating must be between 1 and 5'));\n        }\n        updatePayload.rating = updateData.rating;\n      }\n      \n      if (updateData.status !== undefined) {\n        updatePayload.status = updateData.status;\n      }\n\n      // Update review\n      const response = await this.client.put<ProductReview>(`/products/reviews/${reviewId}`, updatePayload);\n\n      if (!response.success) {\n        return response;\n      }\n\n      const updatedReview = response.data.data;\n\n      // Update images if provided\n      if (updateData.images) {\n        await this.updateReviewImages(reviewId, updateData.images);\n      }\n\n      // Invalidate caches\n      await this.cache.delete(`reviews:single:${reviewId}`);\n      await this.invalidateReviewCaches(existingReview.data.product_id);\n\n      return Ok(updatedReview);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to update review',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Delete a review\n   */\n  async delete(reviewId: number, force = false): Promise<Result<boolean, WooError>> {\n    try {\n      if (!reviewId || reviewId <= 0) {\n        return Err(ErrorFactory.validationError('Invalid review ID'));\n      }\n\n      // Get review first to get product ID for cache invalidation\n      const existingReview = await this.get(reviewId);\n      if (!existingReview.success) {\n        return existingReview;\n      }\n\n      // Delete review\n      const response = await this.client.delete(`/products/reviews/${reviewId}?force=${force}`);\n\n      if (!response.success) {\n        return response;\n      }\n\n      // Invalidate caches\n      await this.cache.delete(`reviews:single:${reviewId}`);\n      await this.invalidateReviewCaches(existingReview.data.product_id);\n\n      return Ok(true);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to delete review',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get reviews for a specific product with analytics\n   */\n  async getProductReviews(productId: number, params: Omit<ReviewListParams, 'product'> = {}): Promise<Result<ReviewListResponse, WooError>> {\n    return this.list({ ...params, product: productId });\n  }\n\n  /**\n   * Get review analytics for a product\n   */\n  async getAnalytics(productId: number, period = '30d'): Promise<Result<ReviewAnalytics, WooError>> {\n    try {\n      if (!productId || productId <= 0) {\n        return Err(ErrorFactory.validationError('Invalid product ID'));\n      }\n\n      const cacheKey = `reviews:analytics:${productId}:${period}`;\n\n      // Check cache\n      const cachedResult = await this.cache.get<ReviewAnalytics>(cacheKey);\n      if (cachedResult.success && cachedResult.data) {\n        return Ok(cachedResult.data);\n      }\n\n      // Get all reviews for the product\n      const reviewsResult = await this.getProductReviews(productId, { limit: 1000 });\n      if (!reviewsResult.success) {\n        return reviewsResult;\n      }\n\n      const reviews = reviewsResult.data.reviews;\n      const ratingDistribution = this.calculateRatingDistribution(reviews);\n\n      // Calculate analytics\n      const verifiedReviews = reviews.filter(r => r.verified);\n      const reviewsWithReplies = reviews.filter(r => r.replies && r.replies.length > 0);\n      const totalHelpfulVotes = reviews.reduce((sum, r) => sum + r.helpful_votes, 0);\n\n      // Get previous period data for trend analysis\n      const previousPeriodData = await this.getPreviousPeriodData(productId, period);\n\n      const analytics: ReviewAnalytics = {\n        productId,\n        totalReviews: reviews.length,\n        averageRating: ratingDistribution.average,\n        ratingDistribution,\n        verifiedPurchaseRatio: reviews.length > 0 ? (verifiedReviews.length / reviews.length) * 100 : 0,\n        responseRate: reviews.length > 0 ? (reviewsWithReplies.length / reviews.length) * 100 : 0,\n        helpfulnessRatio: reviews.length > 0 ? totalHelpfulVotes / reviews.length : 0,\n        recentTrend: {\n          period,\n          averageRating: ratingDistribution.average,\n          reviewCount: reviews.length,\n          ratingChange: previousPeriodData ? ratingDistribution.average - previousPeriodData.averageRating : 0\n        },\n        topKeywords: await this.extractTopKeywords(reviews)\n      };\n\n      // Cache analytics\n      await this.cache.set(cacheKey, analytics, 3600); // 1 hour cache\n\n      return Ok(analytics);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to get review analytics',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Vote on review helpfulness\n   */\n  async voteHelpful(reviewId: number, voteType: 'helpful' | 'not_helpful', userEmail?: string): Promise<Result<ReviewVote, WooError>> {\n    try {\n      if (!reviewId || reviewId <= 0) {\n        return Err(ErrorFactory.validationError('Invalid review ID'));\n      }\n\n      // Check if user already voted\n      if (userEmail) {\n        const existingVote = await this.getUserVote(reviewId, userEmail);\n        if (existingVote) {\n          return Err(ErrorFactory.validationError('User has already voted on this review'));\n        }\n      }\n\n      // Submit vote\n      const votePayload = {\n        review_id: reviewId,\n        vote_type: voteType,\n        user_email: userEmail,\n        voted_at: new Date().toISOString()\n      };\n\n      const response = await this.client.post<ReviewVote>(`/products/reviews/${reviewId}/vote`, votePayload);\n\n      if (!response.success) {\n        return response;\n      }\n\n      // Invalidate review cache\n      await this.cache.delete(`reviews:single:${reviewId}`);\n\n      return Ok(response.data.data);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to vote on review',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Moderate a review (approve, hold, spam, trash)\n   */\n  async moderate(reviewId: number, action: ReviewStatus, reason?: string): Promise<Result<ReviewModeration, WooError>> {\n    try {\n      if (!reviewId || reviewId <= 0) {\n        return Err(ErrorFactory.validationError('Invalid review ID'));\n      }\n\n      const validActions: ReviewStatus[] = ['approved', 'hold', 'spam', 'trash'];\n      if (!validActions.includes(action)) {\n        return Err(ErrorFactory.validationError('Invalid moderation action'));\n      }\n\n      // Update review status\n      const updateResult = await this.update(reviewId, { status: action });\n      if (!updateResult.success) {\n        return updateResult;\n      }\n\n      // Log moderation action\n      const moderation: ReviewModeration = {\n        review_id: reviewId,\n        action,\n        reason,\n        moderated_at: new Date().toISOString(),\n        automated: false\n      };\n\n      // Track moderation event\n      await this.trackReviewEvent('review_moderated', {\n        reviewId,\n        action,\n        reason\n      });\n\n      return Ok(moderation);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to moderate review',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Search reviews with advanced filtering\n   */\n  async search(config: ReviewSearchConfig): Promise<Result<ReviewListResponse, WooError>> {\n    try {\n      // Convert search config to list params\n      const params: ReviewListParams = {\n        page: config.pagination.page,\n        limit: config.pagination.limit,\n        search: config.query\n      };\n\n      // Apply filters\n      if (config.filters) {\n        for (const filter of config.filters) {\n          this.applyFilterToParams(params, filter);\n        }\n      }\n\n      // Apply sorting\n      if (config.sort && config.sort.length > 0) {\n        const primarySort = config.sort[0];\n        params.orderby = primarySort.field as any;\n        params.order = primarySort.direction;\n      }\n\n      return this.list(params);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to search reviews',\n        500,\n        error\n      ));\n    }\n  }\n\n  // Private helper methods\n\n  private validateListParams(params: ReviewListParams): Result<void, WooError> {\n    if (params.page && params.page < 1) {\n      return Err(ErrorFactory.validationError('Page must be >= 1'));\n    }\n    \n    if (params.limit && (params.limit < 1 || params.limit > 100)) {\n      return Err(ErrorFactory.validationError('Limit must be between 1 and 100'));\n    }\n    \n    if (params.rating) {\n      const ratings = Array.isArray(params.rating) ? params.rating : [params.rating];\n      for (const rating of ratings) {\n        if (rating < 1 || rating > 5) {\n          return Err(ErrorFactory.validationError('Rating must be between 1 and 5'));\n        }\n      }\n    }\n\n    return Ok(undefined);\n  }\n\n  private buildQueryParams(params: ReviewListParams): Record<string, string> {\n    const queryParams: Record<string, string> = {};\n\n    if (params.page) queryParams.page = params.page.toString();\n    if (params.limit) queryParams.per_page = params.limit.toString();\n    if (params.product) {\n      queryParams.product = Array.isArray(params.product) \n        ? params.product.join(',') \n        : params.product.toString();\n    }\n    if (params.status) {\n      queryParams.status = Array.isArray(params.status) \n        ? params.status.join(',') \n        : params.status;\n    }\n    if (params.reviewer) queryParams.reviewer = params.reviewer;\n    if (params.reviewer_email) queryParams.reviewer_email = params.reviewer_email;\n    if (params.rating) {\n      queryParams.rating = Array.isArray(params.rating) \n        ? params.rating.join(',') \n        : params.rating.toString();\n    }\n    if (params.verified !== undefined) queryParams.verified = params.verified.toString();\n    if (params.after) queryParams.after = params.after;\n    if (params.before) queryParams.before = params.before;\n    if (params.search) queryParams.search = params.search;\n    if (params.orderby) queryParams.orderby = params.orderby;\n    if (params.order) queryParams.order = params.order;\n    if (params.include) queryParams.include = params.include.join(',');\n    if (params.exclude) queryParams.exclude = params.exclude.join(',');\n    if (params.parent) queryParams.parent = params.parent.toString();\n    if (params.offset) queryParams.offset = params.offset.toString();\n\n    return queryParams;\n  }\n\n  private calculateRatingDistribution(reviews: readonly ProductReview[]): RatingDistribution {\n    const distribution = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };\n    \n    for (const review of reviews) {\n      const rating = Math.floor(review.rating) as 1 | 2 | 3 | 4 | 5;\n      if (rating >= 1 && rating <= 5) {\n        distribution[rating]++;\n      }\n    }\n\n    const total = reviews.length;\n    const average = total > 0 \n      ? reviews.reduce((sum, r) => sum + r.rating, 0) / total \n      : 0;\n\n    const percentage = {\n      1: total > 0 ? (distribution[1] / total) * 100 : 0,\n      2: total > 0 ? (distribution[2] / total) * 100 : 0,\n      3: total > 0 ? (distribution[3] / total) * 100 : 0,\n      4: total > 0 ? (distribution[4] / total) * 100 : 0,\n      5: total > 0 ? (distribution[5] / total) * 100 : 0\n    };\n\n    return {\n      ...distribution,\n      total,\n      average: Math.round(average * 100) / 100,\n      percentage\n    };\n  }\n\n  private async validateReview(reviewData: CreateReviewRequest): Promise<ReviewValidationResult> {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    try {\n      // Schema validation\n      CreateReviewSchema.parse(reviewData);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        errors.push(...error.errors.map(e => e.message));\n      }\n    }\n\n    // Content validation\n    const spamScore = await this.calculateSpamScore(reviewData.review);\n    const requiresModeration = spamScore > 70 || this.containsProfanity(reviewData.review);\n\n    if (spamScore > 90) {\n      errors.push('Review appears to be spam');\n    } else if (spamScore > 70) {\n      warnings.push('Review may require manual moderation');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      canSubmit: errors.length === 0,\n      requiresModeration,\n      spamScore\n    };\n  }\n\n  private async checkRateLimit(userEmail: string): Promise<Result<void, WooError>> {\n    const now = Date.now();\n    const userKey = userEmail.toLowerCase();\n    const userLimit = this.rateLimitStore.get(userKey);\n\n    // Default rate limits\n    const maxPerHour = 5;\n    const hourInMs = 60 * 60 * 1000;\n\n    if (userLimit) {\n      if (now < userLimit.resetTime) {\n        if (userLimit.count >= maxPerHour) {\n          return Err(ErrorFactory.rateLimitError(\n            'Too many reviews submitted. Please wait before submitting another review.',\n            Math.ceil((userLimit.resetTime - now) / 1000)\n          ));\n        }\n      } else {\n        // Reset counter\n        this.rateLimitStore.set(userKey, { count: 0, resetTime: now + hourInMs });\n      }\n    } else {\n      // First time user\n      this.rateLimitStore.set(userKey, { count: 0, resetTime: now + hourInMs });\n    }\n\n    return Ok(undefined);\n  }\n\n  private updateRateLimit(userEmail: string): void {\n    const userKey = userEmail.toLowerCase();\n    const userLimit = this.rateLimitStore.get(userKey);\n    \n    if (userLimit) {\n      userLimit.count++;\n      this.rateLimitStore.set(userKey, userLimit);\n    }\n  }\n\n  private sanitizeContent(content: string): string {\n    // Basic HTML sanitization - in production, use a proper sanitization library\n    return content\n      .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n      .replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, '')\n      .trim();\n  }\n\n  private async calculateSpamScore(content: string): Promise<number> {\n    // Simple spam detection - in production, use more sophisticated methods\n    let score = 0;\n    \n    // Check for excessive caps\n    const capsRatio = (content.match(/[A-Z]/g) || []).length / content.length;\n    if (capsRatio > 0.5) score += 30;\n    \n    // Check for excessive punctuation\n    const punctuationRatio = (content.match(/[!?]{2,}/g) || []).length;\n    if (punctuationRatio > 2) score += 25;\n    \n    // Check for suspicious patterns\n    const suspiciousPatterns = [\n      /click here/gi,\n      /free offer/gi,\n      /limited time/gi,\n      /act now/gi\n    ];\n    \n    for (const pattern of suspiciousPatterns) {\n      if (pattern.test(content)) score += 20;\n    }\n    \n    return Math.min(score, 100);\n  }\n\n  private containsProfanity(content: string): boolean {\n    // Basic profanity filter - in production, use a comprehensive profanity filter\n    const profanityWords = ['spam', 'fake', 'scam']; // Minimal list for example\n    const lowerContent = content.toLowerCase();\n    \n    return profanityWords.some(word => lowerContent.includes(word));\n  }\n\n  private async processReviewImages(images: readonly (File | string)[]): Promise<Result<ReviewImage[], WooError>> {\n    // Image processing implementation would go here\n    // For now, return empty array\n    return Ok([]);\n  }\n\n  private async attachImagesToReview(reviewId: number, images: ReviewImage[]): Promise<void> {\n    // Implementation for attaching images to review\n  }\n\n  private async updateReviewImages(reviewId: number, images: ReviewImage[]): Promise<void> {\n    // Implementation for updating review images\n  }\n\n  private async invalidateReviewCaches(productId: number): Promise<void> {\n    // Invalidate all review-related caches for a product\n    const cacheKeys = [\n      `reviews:list:*${productId}*`,\n      `reviews:analytics:${productId}*`\n    ];\n    \n    for (const pattern of cacheKeys) {\n      await this.cache.deletePattern(pattern);\n    }\n  }\n\n  private async trackReviewEvent(event: string, data: any): Promise<void> {\n    // Analytics tracking implementation\n    console.log(`Review event: ${event}`, data);\n  }\n\n  private async getUserVote(reviewId: number, userEmail: string): Promise<ReviewVote | null> {\n    // Check if user has already voted - implementation would query database\n    return null;\n  }\n\n  private async getPreviousPeriodData(productId: number, period: string): Promise<{ averageRating: number } | null> {\n    // Get previous period data for trend analysis\n    return null;\n  }\n\n  private async extractTopKeywords(reviews: readonly ProductReview[]): Promise<Array<{keyword: string; count: number; sentiment: 'positive' | 'negative' | 'neutral'}>> {\n    // Extract and analyze keywords from reviews\n    // This would use NLP libraries in production\n    return [];\n  }\n\n  private applyFilterToParams(params: ReviewListParams, filter: ReviewFilter): void {\n    // Apply individual filter to params object\n    switch (filter.field) {\n      case 'rating':\n        if (filter.operator === 'eq') {\n          params.rating = filter.value as number;\n        }\n        break;\n      case 'verified':\n        if (filter.operator === 'eq') {\n          params.verified = filter.value as boolean;\n        }\n        break;\n      // Add more filter implementations\n    }\n  }\n} ","/**\n * Checkout System Types for WooCommerce Headless SDK\n * Following the Enhanced Unified 10X Developer Framework\n */\n\nimport { z } from 'zod';\n\n/**\n * Base address interface for billing and shipping\n */\nexport interface BaseAddress {\n  readonly firstName: string;\n  readonly lastName: string;\n  readonly company?: string;\n  readonly address1: string;\n  readonly address2?: string;\n  readonly city: string;\n  readonly state: string;\n  readonly postcode: string;\n  readonly country: string;\n  readonly email?: string;\n  readonly phone?: string;\n}\n\n/**\n * Billing address with required email\n */\nexport interface BillingAddress extends BaseAddress {\n  readonly email: string;\n}\n\n/**\n * Shipping address (email optional)\n */\nexport interface ShippingAddress extends BaseAddress {}\n\n/**\n * Address validation result\n */\nexport interface AddressValidation {\n  readonly isValid: boolean;\n  readonly errors: readonly string[];\n  readonly warnings: readonly string[];\n  readonly suggestedAddress?: BaseAddress;\n}\n\n/**\n * Country configuration for address validation\n */\nexport interface CountryConfig {\n  readonly code: string;\n  readonly name: string;\n  readonly postcodePattern?: string;\n  readonly stateRequired: boolean;\n  readonly postcodeRequired: boolean;\n  readonly phonePattern?: string;\n}\n\n/**\n * Payment method types\n */\nexport type PaymentMethodType = \n  | 'credit_card'\n  | 'stripe'\n  | 'stripe_checkout'\n  | 'paypal' \n  | 'apple_pay'\n  | 'google_pay'\n  | 'bank_transfer'\n  | 'cash_on_delivery'\n  | 'check';\n\n/**\n * Credit card information\n */\nexport interface CreditCard {\n  readonly number: string;\n  readonly expiryMonth: number;\n  readonly expiryYear: number;\n  readonly cvv: string;\n  readonly holderName: string;\n}\n\n/**\n * Payment method configuration\n */\nexport interface PaymentMethod {\n  readonly id: string;\n  readonly type: PaymentMethodType;\n  readonly title: string;\n  readonly description: string;\n  readonly enabled: boolean;\n  readonly testMode: boolean;\n  readonly settings: Record<string, unknown>;\n  readonly supportedCountries?: readonly string[];\n  readonly supportedCurrencies?: readonly string[];\n  readonly minimumAmount?: number;\n  readonly maximumAmount?: number;\n  readonly icon?: string;\n  readonly acceptedCards?: readonly string[];\n}\n\n/**\n * Shipping method types\n */\nexport type ShippingMethodType =\n  | 'flat_rate'\n  | 'free_shipping'\n  | 'local_pickup'\n  | 'table_rate'\n  | 'expedited'\n  | 'overnight';\n\n/**\n * Shipping rate calculation\n */\nexport interface ShippingRate {\n  readonly id: string;\n  readonly method: ShippingMethodType;\n  readonly title: string;\n  readonly description: string;\n  readonly cost: number;\n  readonly taxable: boolean;\n  readonly estimatedDelivery?: string;\n  readonly trackingAvailable: boolean;\n}\n\n/**\n * Shipping zone configuration\n */\nexport interface ShippingZone {\n  readonly id: string;\n  readonly name: string;\n  readonly countries: readonly string[];\n  readonly states: readonly string[];\n  readonly postcodes: readonly string[];\n  readonly methods: readonly ShippingRate[];\n}\n\n/**\n * Shipping method selection\n */\nexport interface SelectedShippingMethod {\n  readonly zoneId: string;\n  readonly methodId: string;\n  readonly rate: ShippingRate;\n  readonly title: string;\n  readonly cost: number;\n}\n\n/**\n * Order status types\n */\nexport type OrderStatus =\n  | 'pending'\n  | 'processing'\n  | 'on_hold'\n  | 'completed'\n  | 'cancelled'\n  | 'refunded'\n  | 'failed'\n  | 'draft';\n\n/**\n * Order totals breakdown\n */\nexport interface OrderTotals {\n  readonly subtotal: number;\n  readonly tax: number;\n  readonly shipping: number;\n  readonly shippingTax: number;\n  readonly discount: number;\n  readonly fees: number;\n  readonly feesTax: number;\n  readonly total: number;\n  readonly currency: string;\n}\n\n/**\n * Order line item\n */\nexport interface OrderLineItem {\n  readonly id: number;\n  readonly productId: number;\n  readonly variationId?: number;\n  readonly name: string;\n  readonly quantity: number;\n  readonly price: number;\n  readonly total: number;\n  readonly subtotal: number;\n  readonly totalTax: number;\n  readonly subtotalTax: number;\n  readonly sku?: string;\n  readonly meta: readonly {\n    readonly key: string;\n    readonly value: string;\n  }[];\n}\n\n/**\n * Complete order information\n */\nexport interface Order {\n  readonly id: number;\n  readonly number: string;\n  readonly status: OrderStatus;\n  readonly currency: string;\n  readonly dateCreated: Date;\n  readonly dateModified: Date;\n  readonly total: number;\n  readonly subtotal: number;\n  readonly totalTax: number;\n  readonly shippingTotal: number;\n  readonly shippingTax: number;\n  readonly discountTotal: number;\n  readonly discountTax: number;\n  readonly feeTotal: number;\n  readonly feeTax: number;\n  readonly customerId: number;\n  readonly customerNote?: string;\n  readonly billingAddress: BillingAddress;\n  readonly shippingAddress: ShippingAddress;\n  readonly paymentMethod: string;\n  readonly paymentMethodTitle: string;\n  readonly shippingMethod: string;\n  readonly shippingMethodTitle: string;\n  readonly lineItems: readonly OrderLineItem[];\n  readonly createdAt: Date;\n  readonly updatedAt: Date;\n  readonly completedAt?: Date;\n}\n\n/**\n * Checkout step types\n */\nexport type CheckoutStepType = \n  | 'address'\n  | 'shipping'\n  | 'payment'\n  | 'review'\n  | 'cart_review'\n  | 'shipping_address'\n  | 'billing_address'\n  | 'shipping_method'\n  | 'payment_method'\n  | 'order_review'\n  | 'payment_processing'\n  | 'order_confirmation';\n\n/**\n * Individual checkout step\n */\nexport interface CheckoutStep {\n  readonly type: CheckoutStepType;\n  readonly title: string;\n  readonly description: string;\n  readonly completed: boolean;\n  readonly valid: boolean;\n  readonly errors: readonly string[];\n  readonly data?: Record<string, unknown>;\n}\n\n/**\n * Checkout flow state\n */\nexport interface CheckoutFlow {\n  readonly steps: readonly CheckoutStep[];\n  readonly currentStep: CheckoutStepType;\n  readonly canProceed: boolean;\n  readonly canGoBack: boolean;\n  readonly progress: {\n    readonly current: number;\n    readonly total: number;\n    readonly percentage: number;\n  };\n}\n\n/**\n * Checkout session state\n */\nexport interface CheckoutSession {\n  readonly id: string;\n  readonly cartId: string;\n  readonly customerId?: number;\n  readonly billingAddress?: BillingAddress;\n  readonly shippingAddress?: ShippingAddress;\n  readonly useShippingAsBilling?: boolean;\n  readonly selectedShippingMethod?: SelectedShippingMethod;\n  readonly selectedPaymentMethod?: PaymentMethod;\n  readonly orderNotes?: string;\n  readonly termsAccepted?: boolean;\n  readonly newsletterOptIn?: boolean;\n  readonly isGuestCheckout?: boolean;\n  readonly orderTotals: OrderTotals;\n  readonly flow: CheckoutFlow;\n  readonly expiresAt: Date;\n  readonly createdAt: Date;\n  readonly updatedAt: Date;\n}\n\n/**\n * Checkout validation rules\n */\nexport interface CheckoutValidationRules {\n  readonly requireShippingAddress: boolean;\n  readonly requireBillingAddress: boolean;\n  readonly requireEmail?: boolean;\n  readonly requirePhoneNumber: boolean;\n  readonly requireCompanyName: boolean;\n  readonly allowGuestCheckout: boolean;\n  readonly minimumOrderAmount?: number;\n  readonly maximumOrderAmount?: number;\n  readonly restrictedCountries: readonly string[];\n  readonly requiredFields: readonly string[];\n  readonly returnUrl?: string;\n  readonly cancelUrl?: string;\n}\n\n/**\n * Checkout configuration\n */\nexport interface CheckoutConfig {\n  readonly enabled: boolean;\n  readonly guestCheckoutEnabled: boolean;\n  readonly termsPageId?: number;\n  readonly privacyPageId?: number;\n  readonly validationRules: CheckoutValidationRules;\n  readonly paymentMethods: readonly PaymentMethod[];\n  readonly shippingZones: readonly ShippingZone[];\n  readonly countries: readonly CountryConfig[];\n  readonly defaultCountry: string;\n  readonly sessionTtl: number; // in minutes\n  readonly autoCalculateTotals: boolean;\n}\n\n/**\n * Checkout form data for step updates\n */\nexport interface CheckoutFormData {\n  readonly step: CheckoutStepType;\n  readonly data: Record<string, unknown>;\n  readonly validate?: boolean;\n}\n\n/**\n * Checkout error types\n */\nexport type CheckoutErrorCode =\n  | 'INVALID_ADDRESS'\n  | 'UNSUPPORTED_COUNTRY'\n  | 'INVALID_POSTCODE'\n  | 'SHIPPING_NOT_AVAILABLE'\n  | 'PAYMENT_METHOD_UNAVAILABLE'\n  | 'INSUFFICIENT_STOCK'\n  | 'MINIMUM_ORDER_NOT_MET'\n  | 'MAXIMUM_ORDER_EXCEEDED'\n  | 'CHECKOUT_SESSION_EXPIRED'\n  | 'PAYMENT_PROCESSING_FAILED'\n  | 'ORDER_CREATION_FAILED'\n  | 'INVALID_CHECKOUT_DATA'\n  | 'TERMS_NOT_ACCEPTED';\n\n/**\n * Checkout specific error\n */\nexport interface CheckoutError {\n  readonly code: CheckoutErrorCode;\n  readonly message: string;\n  readonly field?: string;\n  readonly step?: CheckoutStepType;\n  readonly details?: Record<string, unknown>;\n}\n\n/**\n * Zod validation schemas\n */\nexport const BaseAddressSchema = z.object({\n  firstName: z.string().min(1, 'First name is required').max(100),\n  lastName: z.string().min(1, 'Last name is required').max(100),\n  company: z.string().max(100).optional(),\n  address1: z.string().min(1, 'Address is required').max(200),\n  address2: z.string().max(200).optional(),\n  city: z.string().min(1, 'City is required').max(100),\n  state: z.string().min(1, 'State is required').max(100),\n  postcode: z.string().min(1, 'Postcode is required').max(20),\n  country: z.string().length(2, 'Country must be 2-letter code'),\n  email: z.string().email().optional(),\n  phone: z.string().max(20).optional()\n});\n\nexport const BillingAddressSchema = BaseAddressSchema.extend({\n  email: z.string().email('Valid email is required')\n});\n\nexport const ShippingAddressSchema = BaseAddressSchema;\n\nexport const CreditCardSchema = z.object({\n  number: z.string().regex(/^\\d{13,19}$/, 'Invalid card number'),\n  expiryMonth: z.number().int().min(1).max(12),\n  expiryYear: z.number().int().min(new Date().getFullYear()),\n  cvv: z.string().regex(/^\\d{3,4}$/, 'Invalid CVV'),\n  holderName: z.string().min(1, 'Cardholder name is required').max(100)\n});\n\nexport const OrderTotalsSchema = z.object({\n  subtotal: z.number().min(0),\n  tax: z.number().min(0),\n  shipping: z.number().min(0),\n  shippingTax: z.number().min(0),\n  discount: z.number().min(0),\n  fees: z.number().min(0),\n  feesTax: z.number().min(0),\n  total: z.number().min(0),\n  currency: z.string().length(3)\n});\n\nexport const CheckoutFormDataSchema = z.object({\n  step: z.enum(['cart_review', 'shipping_address', 'billing_address', 'shipping_method', 'payment_method', 'order_review', 'payment_processing', 'order_confirmation']),\n  data: z.record(z.unknown()),\n  validate: z.boolean().optional()\n});\n\n/**\n * Type guards\n */\nexport function isBillingAddress(address: BaseAddress): address is BillingAddress {\n  return 'email' in address && typeof address.email === 'string' && address.email.length > 0;\n}\n\nexport function isValidCheckoutStep(step: string): step is CheckoutStepType {\n  return ['cart_review', 'shipping_address', 'billing_address', 'shipping_method', 'payment_method', 'order_review', 'payment_processing', 'order_confirmation'].includes(step);\n}\n\nexport function isValidPaymentMethod(method: string): method is PaymentMethodType {\n  return ['credit_card', 'stripe', 'stripe_checkout', 'paypal', 'apple_pay', 'google_pay', 'bank_transfer', 'cash_on_delivery', 'check'].includes(method);\n}\n\n/**\n * Validation functions\n */\nexport function validateBaseAddress(address: unknown): BaseAddress {\n  const parsed = BaseAddressSchema.parse(address);\n  // Handle exactOptionalPropertyTypes by removing undefined values\n  const result: BaseAddress = {\n    firstName: parsed.firstName,\n    lastName: parsed.lastName,\n    address1: parsed.address1,\n    city: parsed.city,\n    state: parsed.state,\n    postcode: parsed.postcode,\n    country: parsed.country,\n    ...(parsed.company !== undefined && { company: parsed.company }),\n    ...(parsed.address2 !== undefined && { address2: parsed.address2 }),\n    ...(parsed.email !== undefined && { email: parsed.email }),\n    ...(parsed.phone !== undefined && { phone: parsed.phone })\n  };\n  return result;\n}\n\nexport function validateBillingAddress(address: unknown): BillingAddress {\n  const parsed = BillingAddressSchema.parse(address);\n  // Handle exactOptionalPropertyTypes by removing undefined values\n  const result: BillingAddress = {\n    firstName: parsed.firstName,\n    lastName: parsed.lastName,\n    address1: parsed.address1,\n    city: parsed.city,\n    state: parsed.state,\n    postcode: parsed.postcode,\n    country: parsed.country,\n    email: parsed.email,\n    ...(parsed.company !== undefined && { company: parsed.company }),\n    ...(parsed.address2 !== undefined && { address2: parsed.address2 }),\n    ...(parsed.phone !== undefined && { phone: parsed.phone })\n  };\n  return result;\n}\n\nexport function validateShippingAddress(address: unknown): ShippingAddress {\n  const parsed = ShippingAddressSchema.parse(address);\n  // Handle exactOptionalPropertyTypes by removing undefined values\n  const result: ShippingAddress = {\n    firstName: parsed.firstName,\n    lastName: parsed.lastName,\n    address1: parsed.address1,\n    city: parsed.city,\n    state: parsed.state,\n    postcode: parsed.postcode,\n    country: parsed.country,\n    ...(parsed.company !== undefined && { company: parsed.company }),\n    ...(parsed.address2 !== undefined && { address2: parsed.address2 }),\n    ...(parsed.email !== undefined && { email: parsed.email }),\n    ...(parsed.phone !== undefined && { phone: parsed.phone })\n  };\n  return result;\n}\n\nexport function validateCreditCard(card: unknown): CreditCard {\n  return CreditCardSchema.parse(card);\n}\n\nexport function validateOrderTotals(totals: unknown): OrderTotals {\n  return OrderTotalsSchema.parse(totals);\n}\n\nexport function validateCheckoutFormData(data: unknown): CheckoutFormData {\n  const parsed = CheckoutFormDataSchema.parse(data);\n  // Handle exactOptionalPropertyTypes by removing undefined values\n  const result: CheckoutFormData = {\n    step: parsed.step,\n    data: parsed.data,\n    ...(parsed.validate !== undefined && { validate: parsed.validate })\n  };\n  return result;\n}\n\n/**\n * Helper functions\n */\nexport function createEmptyCheckoutFlow(): CheckoutFlow {\n  const steps: CheckoutStep[] = [\n    {\n      type: 'cart_review',\n      title: 'Review Cart',\n      description: 'Review items in your cart',\n      completed: false,\n      valid: false,\n      errors: []\n    },\n    {\n      type: 'shipping_address',\n      title: 'Shipping Address',\n      description: 'Enter your shipping address',\n      completed: false,\n      valid: false,\n      errors: []\n    },\n    {\n      type: 'billing_address',\n      title: 'Billing Address',\n      description: 'Enter your billing address',\n      completed: false,\n      valid: false,\n      errors: []\n    },\n    {\n      type: 'shipping_method',\n      title: 'Shipping Method',\n      description: 'Choose your shipping method',\n      completed: false,\n      valid: false,\n      errors: []\n    },\n    {\n      type: 'payment_method',\n      title: 'Payment Method',\n      description: 'Choose your payment method',\n      completed: false,\n      valid: false,\n      errors: []\n    },\n    {\n      type: 'order_review',\n      title: 'Review Order',\n      description: 'Review your order before payment',\n      completed: false,\n      valid: false,\n      errors: []\n    }\n  ];\n\n  return {\n    steps,\n    currentStep: 'cart_review',\n    canProceed: false,\n    canGoBack: false,\n    progress: {\n      current: 1,\n      total: steps.length,\n      percentage: Math.round((1 / steps.length) * 100)\n    }\n  };\n}\n\n/**\n * Default configurations\n */\nexport const DEFAULT_CHECKOUT_CONFIG: Partial<CheckoutConfig> = {\n  enabled: true,\n  guestCheckoutEnabled: true,\n  sessionTtl: 60, // 1 hour\n  autoCalculateTotals: true,\n  defaultCountry: 'US',\n  validationRules: {\n    requireShippingAddress: true,\n    requireBillingAddress: true,\n    requirePhoneNumber: false,\n    requireCompanyName: false,\n    allowGuestCheckout: true,\n    restrictedCountries: [],\n    requiredFields: ['firstName', 'lastName', 'address1', 'city', 'state', 'postcode', 'country', 'email']\n  }\n};\n\n/**\n * Payment transaction details\n */\nexport interface PaymentTransaction {\n  readonly id: string;\n  readonly paymentId: string;\n  readonly amount: number;\n  readonly currency: string;\n  readonly status: 'pending' | 'completed' | 'failed' | 'cancelled';\n  readonly method: PaymentMethodType;\n  readonly transactionId?: string;\n  readonly gatewayResponse?: Record<string, unknown>;\n  readonly processedAt?: Date;\n  readonly failureReason?: string;\n}\n\n/**\n * Payment initialization response\n */\nexport interface PaymentInitResponse {\n  readonly paymentId: string;\n  readonly redirectUrl: string | undefined; // Allow undefined explicitly\n  readonly requiresRedirect: boolean;\n  readonly clientSecret: string | undefined; // Allow undefined explicitly\n  readonly paymentIntentId: string | undefined; // Allow undefined explicitly\n  readonly instructions: string | undefined; // Allow undefined explicitly\n  readonly expiresAt: Date | undefined; // Allow undefined explicitly\n}\n\n/**\n * Payment status response\n */\nexport interface PaymentStatusResponse {\n  readonly paymentId: string;\n  readonly status: PaymentStatus;\n  readonly transactionId: string | undefined; // Allow undefined explicitly\n  readonly failureReason: string | undefined; // Allow undefined explicitly\n  readonly redirectUrl: string | undefined; // Allow undefined explicitly\n  readonly nextAction: {\n    readonly type: 'redirect' | 'authenticate' | 'confirm';\n    readonly url?: string;\n    readonly data?: Record<string, unknown>;\n  } | undefined; // Allow undefined explicitly\n}\n\n/**\n * Payment status enumeration\n */\nexport type PaymentStatus = \n  | 'pending'\n  | 'processing' \n  | 'completed'\n  | 'failed'\n  | 'cancelled'\n  | 'refunded'\n  | 'requires_action';\n\n/**\n * Payment request interface\n */\nexport interface PaymentRequest {\n  readonly orderId: string;\n  readonly amount: number;\n  readonly currency: string;\n  readonly paymentMethod: string;\n  readonly returnUrl?: string;\n  readonly metadata?: Record<string, unknown>;\n}\n\n/**\n * Payment initialization request\n */\nexport interface PaymentInitRequest {\n  readonly paymentMethodId: string;\n  readonly orderId: string;\n  readonly amount: number;\n  readonly currency: string;\n  readonly returnUrl: string;\n  readonly cancelUrl: string;\n  readonly metadata?: Record<string, unknown>;\n}\n\n/**\n * Payment status request\n */\nexport interface PaymentStatusRequest {\n  readonly paymentId: string;\n  readonly orderId: string;\n}\n\n/**\n * Payment callback data\n */\nexport interface PaymentCallbackData {\n  readonly paymentId: string;\n  readonly orderId: string;\n  readonly status: string;\n  readonly transactionId?: string;\n  readonly signature?: string;\n  readonly metadata?: Record<string, unknown>;\n}\n\n/**\n * Checkout validation result interface\n */\nexport interface CheckoutValidationResult {\n  readonly isValid: boolean;\n  readonly errors: readonly CheckoutError[];\n  readonly warnings: readonly CheckoutError[];\n}\n","/**\n * Address Management Service for WooCommerce Headless SDK\n * Following the Enhanced Unified 10X Developer Framework\n */\n\nimport { Result, Ok, Err, isErr, unwrap, unwrapErr } from '../../types/result';\nimport { WooError, ErrorFactory } from '../../types/errors';\nimport { \n  BaseAddress, \n  BillingAddress, \n  ShippingAddress,\n  AddressValidation,\n  CountryConfig,\n  CheckoutValidationRules,\n  validateBaseAddress,\n  validateBillingAddress,\n  validateShippingAddress\n} from '../../types/checkout';\n\n/**\n * Dynamic field requirements configuration\n */\nexport interface AddressFieldRequirements {\n  readonly firstName: boolean;\n  readonly lastName: boolean;\n  readonly company: boolean;\n  readonly address1: boolean;\n  readonly address2: boolean;\n  readonly city: boolean;\n  readonly state: boolean;\n  readonly postcode: boolean;\n  readonly country: boolean;\n  readonly email: boolean;\n  readonly phone: boolean;\n}\n\n/**\n * Address validation context\n */\nexport interface AddressValidationContext {\n  readonly fieldRequirements?: Partial<AddressFieldRequirements>;\n  readonly checkoutRules?: CheckoutValidationRules;\n  readonly isGuestCheckout?: boolean;\n  readonly addressType: 'billing' | 'shipping';\n}\n\n/**\n * Country-specific postal code patterns and validation rules\n */\nconst COUNTRY_CONFIGS: Record<string, CountryConfig> = {\n  'US': {\n    code: 'US',\n    name: 'United States',\n    postcodePattern: '^\\\\d{5}(-\\\\d{4})?$',\n    stateRequired: true,\n    postcodeRequired: true,\n    phonePattern: '^\\\\+?1?[-.\\\\s]?\\\\(?\\\\d{3}\\\\)?[-.\\\\s]?\\\\d{3}[-.\\\\s]?\\\\d{4}$'\n  },\n  'CA': {\n    code: 'CA',\n    name: 'Canada',\n    postcodePattern: '^[A-Za-z]\\\\d[A-Za-z]\\\\s?\\\\d[A-Za-z]\\\\d$',\n    stateRequired: true,\n    postcodeRequired: true,\n    phonePattern: '^\\\\+?1?[-.\\\\s]?\\\\(?\\\\d{3}\\\\)?[-.\\\\s]?\\\\d{3}[-.\\\\s]?\\\\d{4}$'\n  },\n  'GB': {\n    code: 'GB',\n    name: 'United Kingdom',\n    postcodePattern: '^[A-Za-z]{1,2}\\\\d[A-Za-z\\\\d]?\\\\s?\\\\d[A-Za-z]{2}$',\n    stateRequired: false,\n    postcodeRequired: true,\n    phonePattern: '^\\\\+?44[-.\\\\s]?\\\\d{4}[-.\\\\s]?\\\\d{6}$'\n  },\n  'DE': {\n    code: 'DE',\n    name: 'Germany',\n    postcodePattern: '^\\\\d{5}$',\n    stateRequired: false,\n    postcodeRequired: true,\n    phonePattern: '^\\\\+?49[-.\\\\s]?\\\\d{3,4}[-.\\\\s]?\\\\d{7,8}$'\n  },\n  'FR': {\n    code: 'FR',\n    name: 'France',\n    postcodePattern: '^\\\\d{5}$',\n    stateRequired: false,\n    postcodeRequired: true,\n    phonePattern: '^\\\\+?33[-.\\\\s]?\\\\d{1}[-.\\\\s]?\\\\d{2}[-.\\\\s]?\\\\d{2}[-.\\\\s]?\\\\d{2}[-.\\\\s]?\\\\d{2}$'\n  },\n  'AU': {\n    code: 'AU',\n    name: 'Australia',\n    postcodePattern: '^\\\\d{4}$',\n    stateRequired: true,\n    postcodeRequired: true,\n    phonePattern: '^\\\\+?61[-.\\\\s]?\\\\d{1}[-.\\\\s]?\\\\d{4}[-.\\\\s]?\\\\d{4}$'\n  },\n  'JP': {\n    code: 'JP',\n    name: 'Japan',\n    postcodePattern: '^\\\\d{3}-\\\\d{4}$',\n    stateRequired: true,\n    postcodeRequired: true,\n    phonePattern: '^\\\\+?81[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{4}$'\n  },\n  'BR': {\n    code: 'BR',\n    name: 'Brazil',\n    postcodePattern: '^\\\\d{5}-?\\\\d{3}$',\n    stateRequired: true,\n    postcodeRequired: true,\n    phonePattern: '^\\\\+?55[-.\\\\s]?\\\\d{2}[-.\\\\s]?\\\\d{4,5}[-.\\\\s]?\\\\d{4}$'\n  },\n  'IN': {\n    code: 'IN',\n    name: 'India',\n    postcodePattern: '^\\\\d{6}$',\n    stateRequired: true,\n    postcodeRequired: true,\n    phonePattern: '^\\\\+?91[-.\\\\s]?\\\\d{5}[-.\\\\s]?\\\\d{5}$'\n  },\n  'NL': {\n    code: 'NL',\n    name: 'Netherlands',\n    postcodePattern: '^\\\\d{4}\\\\s?[A-Za-z]{2}$',\n    stateRequired: false,\n    postcodeRequired: true,\n    phonePattern: '^\\\\+?31[-.\\\\s]?\\\\d{1,3}[-.\\\\s]?\\\\d{7}$'\n  }\n};\n\n/**\n * Address management service with dynamic field requirements\n */\nexport class AddressManager {\n  private readonly countryConfigs: Record<string, CountryConfig>;\n\n  constructor(customCountryConfigs?: Record<string, CountryConfig>) {\n    this.countryConfigs = {\n      ...COUNTRY_CONFIGS,\n      ...customCountryConfigs\n    };\n  }\n\n  /**\n   * Validate address with dynamic field requirements\n   */\n  async validateAddressWithContext(\n    address: BaseAddress, \n    context: AddressValidationContext\n  ): Promise<Result<AddressValidation, WooError>> {\n    try {\n      const errors: string[] = [];\n      const warnings: string[] = [];\n\n      // Get country configuration\n      const countryConfig = this.countryConfigs[address.country.toUpperCase()];\n      if (!countryConfig) {\n        errors.push(`Country \"${address.country}\" is not supported`);\n        return Ok({\n          isValid: false,\n          errors,\n          warnings\n        });\n      }\n\n      // Build dynamic field requirements\n      const fieldRequirements = this.buildFieldRequirements(context, countryConfig);\n\n      // Validate fields based on dynamic requirements\n      this.validateRequiredFields(address, fieldRequirements, errors);\n\n      // Validate field formats\n      this.validateFieldFormats(address, countryConfig, errors, warnings);\n\n      return Ok({\n        isValid: errors.length === 0,\n        errors,\n        warnings\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Address validation failed',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get field requirements for address type and context\n   */\n  getFieldRequirements(context: AddressValidationContext): AddressFieldRequirements {\n    const countryCode = context.checkoutRules?.requiredFields?.[0] || 'US';\n    const countryConfig = this.countryConfigs[countryCode] || this.countryConfigs['US'] || {\n      code: 'US',\n      name: 'United States',\n      stateRequired: true,\n      postcodeRequired: true\n    };\n    return this.buildFieldRequirements(context, countryConfig);\n  }\n\n  /**\n   * Check if specific field is required\n   */\n  isFieldRequired(\n    fieldName: keyof AddressFieldRequirements, \n    context: AddressValidationContext\n  ): boolean {\n    const requirements = this.getFieldRequirements(context);\n    return requirements[fieldName];\n  }\n\n  /**\n   * Validate a base address with country-specific rules\n   */\n  async validateAddress(address: BaseAddress): Promise<Result<AddressValidation, WooError>> {\n    // Use default context for backward compatibility\n    const context: AddressValidationContext = {\n      addressType: 'shipping',\n      isGuestCheckout: false\n    };\n    return this.validateAddressWithContext(address, context);\n  }\n\n  /**\n   * Validate a billing address (requires email)\n   */\n  async validateBillingAddress(address: BillingAddress): Promise<Result<AddressValidation, WooError>> {\n    const context: AddressValidationContext = {\n      addressType: 'billing',\n      isGuestCheckout: false,\n      fieldRequirements: { email: true }\n    };\n    return this.validateAddressWithContext(address, context);\n  }\n\n  /**\n   * Validate a shipping address\n   */\n  async validateShippingAddress(address: ShippingAddress): Promise<Result<AddressValidation, WooError>> {\n    const context: AddressValidationContext = {\n      addressType: 'shipping',\n      isGuestCheckout: false\n    };\n    return this.validateAddressWithContext(address, context);\n  }\n\n  /**\n   * Check if addresses are the same (for \"same as billing\" functionality)\n   */\n  addressesEqual(address1: BaseAddress, address2: BaseAddress): boolean {\n    return (\n      address1.firstName === address2.firstName &&\n      address1.lastName === address2.lastName &&\n      address1.company === address2.company &&\n      address1.address1 === address2.address1 &&\n      address1.address2 === address2.address2 &&\n      address1.city === address2.city &&\n      address1.state === address2.state &&\n      address1.postcode === address2.postcode &&\n      address1.country === address2.country &&\n      address1.phone === address2.phone\n    );\n  }\n\n  /**\n   * Suggest address corrections (basic implementation)\n   */\n  async suggestAddressCorrection(address: BaseAddress): Promise<Result<BaseAddress | null, WooError>> {\n    try {\n      const countryConfig = this.countryConfigs[address.country.toUpperCase()];\n      if (!countryConfig) {\n        return Ok(null);\n      }\n\n      // Create a suggested address with basic corrections\n      const suggestedAddress: BaseAddress = {\n        ...address,\n        // Capitalize names\n        firstName: this.capitalizeWords(address.firstName),\n        lastName: this.capitalizeWords(address.lastName),\n        // Capitalize city\n        city: this.capitalizeWords(address.city),\n        // Uppercase country code\n        country: address.country.toUpperCase(),\n        // Format postal code\n        postcode: this.formatPostcode(address.postcode, countryConfig)\n      };\n\n      // Only return suggestion if something changed\n      if (JSON.stringify(address) !== JSON.stringify(suggestedAddress)) {\n        return Ok(suggestedAddress);\n      }\n\n      return Ok(null);\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Address suggestion failed',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get country configuration\n   */\n  getCountryConfig(countryCode: string): CountryConfig | null {\n    return this.countryConfigs[countryCode.toUpperCase()] || null;\n  }\n\n  /**\n   * Get all supported countries\n   */\n  getSupportedCountries(): CountryConfig[] {\n    return Object.values(this.countryConfigs);\n  }\n\n  /**\n   * Add or update country configuration\n   */\n  setCountryConfig(countryCode: string, config: CountryConfig): void {\n    this.countryConfigs[countryCode.toUpperCase()] = config;\n  }\n\n  /**\n   * Parse and validate address from raw data\n   */\n  async parseAddress(rawData: unknown, type: 'base' | 'billing' | 'shipping' = 'base'): Promise<Result<BaseAddress | BillingAddress | ShippingAddress, WooError>> {\n    try {\n      switch (type) {\n        case 'billing':\n          const billingAddress = validateBillingAddress(rawData);\n          const billingValidation = await this.validateBillingAddress(billingAddress);\n          if (isErr(billingValidation)) {\n            return Err(unwrapErr(billingValidation));\n          }\n          if (!unwrap(billingValidation).isValid) {\n            return Err(this.createValidationError([...unwrap(billingValidation).errors]));\n          }\n          return Ok(billingAddress);\n\n        case 'shipping':\n          const shippingAddress = validateShippingAddress(rawData);\n          const shippingValidation = await this.validateShippingAddress(shippingAddress);\n          if (isErr(shippingValidation)) {\n            return Err(unwrapErr(shippingValidation));\n          }\n          if (!unwrap(shippingValidation).isValid) {\n            return Err(this.createValidationError([...unwrap(shippingValidation).errors]));\n          }\n          return Ok(shippingAddress);\n\n        default:\n          const baseAddress = validateBaseAddress(rawData);\n          const baseValidation = await this.validateAddress(baseAddress);\n          if (isErr(baseValidation)) {\n            return Err(unwrapErr(baseValidation));\n          }\n          if (!unwrap(baseValidation).isValid) {\n            return Err(this.createValidationError([...unwrap(baseValidation).errors]));\n          }\n          return Ok(baseAddress);\n      }\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        `Failed to parse ${type} address`,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Convert shipping address to billing address (adds required email)\n   */\n  convertToBillingAddress(shippingAddress: ShippingAddress, email: string): BillingAddress {\n    return {\n      ...shippingAddress,\n      email\n    };\n  }\n\n  /**\n   * Convert billing address to shipping address (removes email)\n   */\n  convertToShippingAddress(billingAddress: BillingAddress): ShippingAddress {\n    const { email, ...shippingAddress } = billingAddress;\n    return shippingAddress;\n  }\n\n  // Private helper methods\n\n  /**\n   * Build field requirements based on context\n   */\n  private buildFieldRequirements(\n    context: AddressValidationContext, \n    countryConfig: CountryConfig\n  ): AddressFieldRequirements {\n    // Start with base requirements\n    const baseRequirements: AddressFieldRequirements = {\n      firstName: true,\n      lastName: true,\n      company: false,\n      address1: true,\n      address2: false,\n      city: true,\n      state: countryConfig.stateRequired,\n      postcode: countryConfig.postcodeRequired,\n      country: true,\n      email: context.addressType === 'billing',\n      phone: false\n    };\n\n    // Apply context-specific overrides and checkout rules\n    const overrides: Partial<AddressFieldRequirements> = {};\n    \n    if (context.fieldRequirements) {\n      Object.assign(overrides, context.fieldRequirements);\n    }\n\n    if (context.checkoutRules) {\n      if (context.checkoutRules.requireCompanyName) {\n        overrides.company = true;\n      }\n      if (context.checkoutRules.requirePhoneNumber) {\n        overrides.phone = true;\n      }\n    }\n\n    // Create final requirements with overrides\n    const finalRequirements: AddressFieldRequirements = {\n      ...baseRequirements,\n      ...overrides\n    };\n\n    return finalRequirements;\n  }\n\n  /**\n   * Validate required fields\n   */\n  private validateRequiredFields(\n    address: BaseAddress, \n    requirements: AddressFieldRequirements, \n    errors: string[]\n  ): void {\n    if (requirements.firstName && (!address.firstName || !address.firstName.trim())) {\n      errors.push('First name is required');\n    }\n\n    if (requirements.lastName && (!address.lastName || !address.lastName.trim())) {\n      errors.push('Last name is required');\n    }\n\n    if (requirements.company && (!address.company || !address.company.trim())) {\n      errors.push('Company name is required');\n    }\n\n    if (requirements.address1 && (!address.address1 || !address.address1.trim())) {\n      errors.push('Street address is required');\n    }\n\n    if (requirements.address2 && (!address.address2 || !address.address2.trim())) {\n      errors.push('Address line 2 is required');\n    }\n\n    if (requirements.city && (!address.city || !address.city.trim())) {\n      errors.push('City is required');\n    }\n\n    if (requirements.state && (!address.state || !address.state.trim())) {\n      errors.push('State/Province is required');\n    }\n\n    if (requirements.postcode && (!address.postcode || !address.postcode.trim())) {\n      errors.push('Postal/ZIP code is required');\n    }\n\n    if (requirements.country && (!address.country || !address.country.trim())) {\n      errors.push('Country is required');\n    }\n\n    if (requirements.email && (!address.email || !address.email.trim())) {\n      errors.push('Email address is required');\n    }\n\n    if (requirements.phone && (!address.phone || !address.phone.trim())) {\n      errors.push('Phone number is required');\n    }\n  }\n\n  /**\n   * Validate field formats\n   */\n  private validateFieldFormats(\n    address: BaseAddress, \n    countryConfig: CountryConfig, \n    errors: string[], \n    warnings: string[]\n  ): void {\n    // Validate postal code format\n    if (address.postcode && countryConfig.postcodePattern) {\n      const postcodeRegex = new RegExp(countryConfig.postcodePattern);\n      if (!postcodeRegex.test(address.postcode)) {\n        errors.push(`Invalid postal/ZIP code format for ${countryConfig.name}`);\n      }\n    }\n\n    // Validate phone number format if provided\n    if (address.phone && countryConfig.phonePattern) {\n      const phoneRegex = new RegExp(countryConfig.phonePattern);\n      if (!phoneRegex.test(address.phone)) {\n        warnings.push(`Phone number format may be invalid for ${countryConfig.name}`);\n      }\n    }\n\n    // Basic field length validation\n    if (address.firstName && address.firstName.length < 2) {\n      errors.push('First name must be at least 2 characters');\n    }\n\n    if (address.lastName && address.lastName.length < 2) {\n      errors.push('Last name must be at least 2 characters');\n    }\n\n    if (address.address1 && address.address1.length < 5) {\n      errors.push('Street address must be at least 5 characters');\n    }\n\n    if (address.city && address.city.length < 2) {\n      errors.push('City must be at least 2 characters');\n    }\n\n    // Email validation\n    if (address.email) {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(address.email)) {\n        errors.push('Invalid email address format');\n      }\n    }\n  }\n\n  /**\n   * Capitalize words in a string\n   */\n  private capitalizeWords(str: string): string {\n    return str.toLowerCase().replace(/\\b\\w/g, char => char.toUpperCase());\n  }\n\n  /**\n   * Format postal code according to country pattern\n   */\n  private formatPostcode(postcode: string, countryConfig: CountryConfig): string {\n    const cleaned = postcode.replace(/\\s+/g, '').toUpperCase();\n    \n    switch (countryConfig.code) {\n      case 'CA':\n        // Format Canadian postal codes: A1A 1A1\n        if (cleaned.length === 6) {\n          return `${cleaned.slice(0, 3)} ${cleaned.slice(3)}`;\n        }\n        return postcode;\n      \n      case 'GB':\n        // Format UK postal codes with space\n        if (cleaned.length >= 5) {\n          return `${cleaned.slice(0, -3)} ${cleaned.slice(-3)}`;\n        }\n        return postcode;\n      \n      case 'NL':\n        // Format Dutch postal codes: 1234 AB\n        if (cleaned.length === 6) {\n          return `${cleaned.slice(0, 4)} ${cleaned.slice(4)}`;\n        }\n        return postcode;\n      \n      default:\n        return postcode;\n    }\n  }\n\n  /**\n   * Create validation error from error messages\n   */\n  private createValidationError(errors: string[]): WooError {\n    return {\n      code: 'VALIDATION_ERROR',\n      message: 'Address validation failed',\n      details: { errors },\n      timestamp: new Date()\n    };\n  }\n}\n\n/**\n * Default address manager instance\n */\nexport const defaultAddressManager = new AddressManager(); ","/**\n * Shipping Service for WooCommerce Headless SDK\n * Backend-calculated shipping rates with frontend display and selection\n * Following the Enhanced Unified 10X Developer Framework\n */\n\nimport { HttpClient } from '../../core/client';\nimport { CacheManager } from '../../core/cache';\nimport { Result, Ok, Err, isErr, isOk, unwrap, unwrapErr } from '../../types/result';\nimport { WooError, ErrorFactory } from '../../types/errors';\nimport { \n  ShippingRate,\n  ShippingZone,\n  ShippingMethodType,\n  SelectedShippingMethod,\n  BaseAddress,\n  OrderTotals\n} from '../../types/checkout';\n\n/**\n * Shipping rate request parameters\n */\nexport interface ShippingRateRequest {\n  readonly destination: BaseAddress;\n  readonly cartItems: readonly {\n    readonly productId: number;\n    readonly variationId?: number;\n    readonly quantity: number;\n    readonly weight?: number;\n    readonly dimensions?: {\n      readonly length: number;\n      readonly width: number;\n      readonly height: number;\n    };\n  }[];\n  readonly cartTotal: number;\n  readonly currency: string;\n}\n\n/**\n * Shipping rate response from backend\n */\nexport interface ShippingRateResponse {\n  readonly rates: readonly ShippingRate[];\n  readonly zones: readonly ShippingZone[];\n  readonly defaultRate?: ShippingRate;\n  readonly freeShippingThreshold?: number;\n  readonly estimatedDelivery?: {\n    readonly minDays: number;\n    readonly maxDays: number;\n  };\n}\n\n/**\n * Shipping calculation for order totals\n */\nexport interface ShippingCalculation {\n  readonly selectedMethod: SelectedShippingMethod;\n  readonly shippingCost: number;\n  readonly shippingTax: number;\n  readonly estimatedDelivery?: string;\n  readonly trackingAvailable: boolean;\n}\n\n/**\n * Shipping service configuration\n */\nexport interface ShippingConfig {\n  readonly enabled: boolean;\n  readonly calculateTax: boolean;\n  readonly freeShippingThreshold?: number;\n  readonly defaultCountry: string;\n  readonly restrictedCountries: readonly string[];\n  readonly cacheTimeout: number; // in minutes\n}\n\n/**\n * Shipping service for fetching rates and managing selections\n */\nexport class ShippingService {\n  private readonly client: HttpClient;\n  private readonly cache: CacheManager;\n  private readonly config: ShippingConfig;\n\n  constructor(\n    client: HttpClient, \n    cache: CacheManager,\n    config: ShippingConfig\n  ) {\n    this.client = client;\n    this.cache = cache;\n    this.config = config;\n  }\n\n  /**\n   * Fetch available shipping rates from backend\n   */\n  async getShippingRates(request: ShippingRateRequest): Promise<Result<ShippingRateResponse, WooError>> {\n    try {\n      // Check if shipping is available for destination\n      if (!this.isShippingAvailable(request.destination.country)) {\n        return Err(ErrorFactory.validationError(\n          'Shipping not available to this destination',\n          { country: request.destination.country }\n        ));\n      }\n\n      // Generate cache key\n      const cacheKey = this.generateCacheKey(request);\n      \n      // Check cache first\n      const cachedRates = await this.cache.get<ShippingRateResponse>(cacheKey);\n      if (cachedRates.success && cachedRates.data) {\n        return Ok(cachedRates.data);\n      }\n\n      // Fetch from backend\n      const response = await this.client.post('/wp-json/wc/v3/shipping/rates', {\n        destination: {\n          country: request.destination.country,\n          state: request.destination.state,\n          postcode: request.destination.postcode,\n          city: request.destination.city\n        },\n        items: request.cartItems,\n        cart_total: request.cartTotal,\n        currency: request.currency\n      });\n\n      if (isErr(response)) {\n        return Err(ErrorFactory.apiError(\n          'Failed to fetch shipping rates',\n          500,\n          unwrapErr(response)\n        ));\n      }\n\n      const responseData = unwrap(response).data as any;\n      const shippingResponse: ShippingRateResponse = {\n        rates: responseData.rates || [],\n        zones: responseData.zones || [],\n        defaultRate: responseData.default_rate,\n        freeShippingThreshold: responseData.free_shipping_threshold,\n        estimatedDelivery: responseData.estimated_delivery\n      };\n\n      // Cache the response\n      await this.cache.set(cacheKey, shippingResponse, this.config.cacheTimeout * 60);\n\n      return Ok(shippingResponse);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Shipping rate calculation failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get shipping zones for a specific country\n   */\n  async getShippingZones(country: string): Promise<Result<ShippingZone[], WooError>> {\n    try {\n      const cacheKey = `shipping-zones:${country}`;\n      \n      // Check cache first\n      const cachedZones = await this.cache.get<ShippingZone[]>(cacheKey);\n      if (cachedZones.success && cachedZones.data) {\n        return Ok(cachedZones.data);\n      }\n\n      // Fetch from backend\n      const response = await this.client.get(`/wp-json/wc/v3/shipping/zones`, {\n        country: country.toUpperCase()\n      });\n\n      if (isErr(response)) {\n        return Err(unwrap(response));\n      }\n\n      const zones = unwrap(response).data || [];\n      \n      // Cache the response\n      await this.cache.set(cacheKey, zones, this.config.cacheTimeout * 60);\n\n      return Ok(zones);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to fetch shipping zones',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Calculate shipping for selected method (backend handles calculation)\n   */\n  async calculateShipping(\n    selectedMethod: SelectedShippingMethod,\n    destination: BaseAddress,\n    cartTotal: number\n  ): Promise<Result<ShippingCalculation, WooError>> {\n    try {\n      // Backend calculates the actual cost and tax\n      const response = await this.client.post('/wp-json/wc/v3/shipping/calculate', {\n        method_id: selectedMethod.methodId,\n        zone_id: selectedMethod.zoneId,\n        destination: {\n          country: destination.country,\n          state: destination.state,\n          postcode: destination.postcode,\n          city: destination.city\n        },\n        cart_total: cartTotal\n      });\n\n      if (isErr(response)) {\n        return Err(unwrap(response));\n      }\n\n      const data = unwrap(response);\n      \n      const calculation: ShippingCalculation = {\n        selectedMethod,\n        shippingCost: data.cost || 0,\n        shippingTax: data.tax || 0,\n        estimatedDelivery: data.estimated_delivery,\n        trackingAvailable: data.tracking_available || false\n      };\n\n      return Ok(calculation);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Shipping calculation failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Check if free shipping is available\n   */\n  checkFreeShipping(cartTotal: number, freeShippingThreshold?: number): boolean {\n    if (!freeShippingThreshold) return false;\n    return cartTotal >= freeShippingThreshold;\n  }\n\n  /**\n   * Get cheapest shipping option\n   */\n  getCheapestRate(rates: readonly ShippingRate[]): ShippingRate | null {\n    if (rates.length === 0) return null;\n    \n    return rates.reduce((cheapest, current) => \n      current.cost < cheapest.cost ? current : cheapest\n    );\n  }\n\n  /**\n   * Get fastest shipping option\n   */\n  getFastestRate(rates: readonly ShippingRate[]): ShippingRate | null {\n    if (rates.length === 0) return null;\n    \n    // Prioritize by shipping method type (expedited, overnight first)\n    const priorityOrder: ShippingMethodType[] = [\n      'overnight',\n      'expedited', \n      'flat_rate',\n      'table_rate',\n      'local_pickup',\n      'free_shipping'\n    ];\n\n    for (const methodType of priorityOrder) {\n      const rate = rates.find(r => r.method === methodType);\n      if (rate) return rate;\n    }\n\n    return rates[0];\n  }\n\n  /**\n   * Filter rates by shipping method type\n   */\n  filterRatesByMethod(rates: readonly ShippingRate[], method: ShippingMethodType): ShippingRate[] {\n    return rates.filter(rate => rate.method === method);\n  }\n\n  /**\n   * Group rates by zone\n   */\n  groupRatesByZone(rates: readonly ShippingRate[], zones: readonly ShippingZone[]): Record<string, ShippingRate[]> {\n    const grouped: Record<string, ShippingRate[]> = {};\n    \n    zones.forEach(zone => {\n      grouped[zone.id] = zone.methods.filter(method => \n        rates.some(rate => rate.id === method.id)\n      );\n    });\n\n    return grouped;\n  }\n\n  /**\n   * Validate shipping selection\n   */\n  validateShippingSelection(\n    selectedMethod: SelectedShippingMethod,\n    availableRates: readonly ShippingRate[]\n  ): boolean {\n    return availableRates.some(rate => \n      rate.id === selectedMethod.methodId\n    );\n  }\n\n  /**\n   * Update order totals with shipping calculation\n   */\n  updateOrderTotalsWithShipping(\n    currentTotals: OrderTotals,\n    shippingCalculation: ShippingCalculation\n  ): OrderTotals {\n    return {\n      ...currentTotals,\n      shipping: shippingCalculation.shippingCost,\n      shippingTax: shippingCalculation.shippingTax,\n      total: currentTotals.subtotal + \n             currentTotals.tax + \n             shippingCalculation.shippingCost + \n             shippingCalculation.shippingTax + \n             currentTotals.fees + \n             currentTotals.feesTax - \n             currentTotals.discount\n    };\n  }\n\n  /**\n   * Estimate delivery date\n   */\n  estimateDeliveryDate(rate: ShippingRate, orderDate: Date = new Date()): Date | null {\n    if (!rate.estimatedDelivery) return null;\n\n    // Parse estimated delivery string (e.g., \"3-5 business days\")\n    const deliveryMatch = rate.estimatedDelivery.match(/(\\d+)-?(\\d+)?\\s*(business\\s+)?days?/i);\n    if (!deliveryMatch) return null;\n\n    const minDays = parseInt(deliveryMatch[1]);\n    const maxDays = deliveryMatch[2] ? parseInt(deliveryMatch[2]) : minDays;\n    const isBusinessDays = !!deliveryMatch[3];\n\n    let deliveryDate = new Date(orderDate);\n    let daysToAdd = maxDays; // Use maximum estimated days\n\n    if (isBusinessDays) {\n      // Add business days (skip weekends)\n      let addedDays = 0;\n      while (addedDays < daysToAdd) {\n        deliveryDate.setDate(deliveryDate.getDate() + 1);\n        if (deliveryDate.getDay() !== 0 && deliveryDate.getDay() !== 6) {\n          addedDays++;\n        }\n      }\n    } else {\n      // Add calendar days\n      deliveryDate.setDate(deliveryDate.getDate() + daysToAdd);\n    }\n\n    return deliveryDate;\n  }\n\n  /**\n   * Clear shipping rate cache\n   */\n  async clearShippingCache(): Promise<Result<void, WooError>> {\n    try {\n      await this.cache.invalidatePattern('shipping-');\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError(\n        'Failed to clear shipping cache',\n        error\n      ));\n    }\n  }\n\n  // Private helper methods\n\n  /**\n   * Check if shipping is available to country\n   */\n  private isShippingAvailable(country: string): boolean {\n    if (!this.config.enabled) return false;\n    if (this.config.restrictedCountries.includes(country.toUpperCase())) return false;\n    return true;\n  }\n\n  /**\n   * Generate cache key for shipping request\n   */\n  private generateCacheKey(request: ShippingRateRequest): string {\n    const keyData = {\n      country: request.destination.country,\n      state: request.destination.state,\n      postcode: request.destination.postcode,\n      itemCount: request.cartItems.length,\n      total: request.cartTotal,\n      currency: request.currency\n    };\n    \n    return `shipping-rates:${Buffer.from(JSON.stringify(keyData)).toString('base64')}`;\n  }\n}\n\n/**\n * Default shipping configuration\n */\nexport const DEFAULT_SHIPPING_CONFIG: ShippingConfig = {\n  enabled: true,\n  calculateTax: true,\n  defaultCountry: 'US',\n  restrictedCountries: [],\n  cacheTimeout: 15 // 15 minutes\n}; ","/**\n * Payment Gateway Framework for WooCommerce Headless SDK\n * Backend WordPress/WooCommerce payment processing with frontend flow management\n * Following the Enhanced Unified 10X Developer Framework\n */\n\nimport { HttpClient } from '../../core/client';\nimport { CacheManager } from '../../core/cache';\nimport { Result, Ok, Err, isErr, isOk, unwrap, unwrapErr } from '../../types/result';\nimport { WooError, ErrorFactory } from '../../types/errors';\nimport { \n  PaymentMethod,\n  PaymentMethodType,\n  PaymentTransaction,\n  CreditCard,\n  Order,\n  OrderTotals,\n  PaymentRequest,\n  PaymentInitRequest,\n  PaymentStatusRequest,\n  PaymentCallbackData,\n  CheckoutSession\n} from '../../types/checkout';\n\n/**\n * Available payment methods response from backend\n */\nexport interface PaymentMethodsResponse {\n  readonly availableMethods: readonly PaymentMethod[];\n  readonly defaultMethod?: PaymentMethod;\n  readonly minimumAmounts: Record<string, number>;\n  readonly currency: string;\n}\n\n/**\n * Payment initialization request\n */\nexport interface PaymentInitResponse {\n  readonly paymentId: string;\n  readonly redirectUrl?: string;\n  readonly requiresRedirect: boolean;\n  readonly clientSecret?: string;\n  readonly paymentIntentId?: string;\n  readonly instructions?: string;\n  readonly expiresAt?: Date;\n}\n\n/**\n * Payment status check response\n */\nexport interface PaymentStatusResponse {\n  readonly paymentId: string;\n  readonly status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';\n  readonly transactionId?: string;\n  readonly failureReason?: string;\n  readonly redirectUrl?: string;\n  readonly nextAction?: {\n    readonly type: 'redirect' | 'authenticate' | 'confirm';\n    readonly url?: string;\n    readonly data?: Record<string, unknown>;\n  };\n}\n\n/**\n * Payment method validation result\n */\nexport interface PaymentValidationResult {\n  readonly isValid: boolean;\n  readonly errors: readonly string[];\n  readonly warnings: readonly string[];\n}\n\n/**\n * Payment service configuration\n */\nexport interface PaymentConfig {\n  readonly enabled: boolean;\n  readonly testMode: boolean;\n  readonly supportedMethods: readonly PaymentMethodType[];\n  readonly minimumAmount: number;\n  readonly maximumAmount?: number;\n  readonly currency: string;\n  readonly returnUrl: string;\n  readonly cancelUrl: string;\n  readonly webhookUrl?: string;\n  readonly cacheTimeout: number; // in minutes\n}\n\n/**\n * Payment gateway service for backend integration\n */\nexport class PaymentService {\n  private readonly client: HttpClient;\n  private readonly cache: CacheManager;\n  private readonly config: PaymentConfig;\n\n  constructor(\n    client: HttpClient,\n    cache: CacheManager,\n    config: PaymentConfig\n  ) {\n    this.client = client;\n    this.cache = cache;\n    this.config = config;\n  }\n\n  /**\n   * Get available payment methods from backend\n   */\n  async getAvailablePaymentMethods(\n    amount: number, \n    currency: string = this.config.currency,\n    country?: string\n  ): Promise<Result<PaymentMethodsResponse, WooError>> {\n    try {\n      const cacheKey = `payment-methods:${amount}:${currency}:${country || 'default'}`;\n      \n      // Check cache first\n      const cached = await this.cache.get<PaymentMethodsResponse>(cacheKey);\n      if (cached.success && cached.data) {\n        return Ok(cached.data);\n      }\n\n      // Fetch from backend\n      const response = await this.client.get('/wp-json/wc/v3/payment_gateways', {\n        amount: amount.toString(),\n        currency,\n        country: country?.toUpperCase()\n      });\n\n      if (isErr(response)) {\n        return Err(unwrapErr(response));\n      }\n\n      const data = unwrap(response).data as any;\n      const paymentResponse: PaymentMethodsResponse = {\n        availableMethods: data.payment_gateways || [],\n        defaultMethod: data.default_gateway,\n        minimumAmounts: data.minimum_amounts || {},\n        currency: data.currency || currency\n      };\n\n      // Cache the response\n      await this.cache.set(cacheKey, paymentResponse, this.config.cacheTimeout * 60);\n\n      return Ok(paymentResponse);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to fetch payment methods',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Initialize payment with selected method\n   */\n  async initializePayment(request: PaymentInitRequest): Promise<Result<PaymentInitResponse, WooError>> {\n    try {\n      // Validate payment method is available\n      const methodsResult = await this.getAvailablePaymentMethods(request.amount, request.currency);\n      if (isErr(methodsResult)) {\n        return Err(unwrapErr(methodsResult));\n      }\n\n      const methods = unwrap(methodsResult);\n      const selectedMethod = methods.availableMethods.find(m => m.id === request.paymentMethodId);\n      if (!selectedMethod || !selectedMethod.enabled) {\n        return Err(ErrorFactory.validationError(\n          'Selected payment method is not available',\n          { methodId: request.paymentMethodId }\n        ));\n      }\n\n      // Initialize payment with backend\n      const response = await this.client.post('/wp-json/wc/v3/payments/initialize', {\n        payment_method: request.paymentMethodId,\n        order_id: request.orderId,\n        amount: request.amount,\n        currency: request.currency,\n        return_url: request.returnUrl,\n        cancel_url: request.cancelUrl,\n        metadata: request.metadata\n      });\n\n      if (isErr(response)) {\n        return Err(unwrapErr(response));\n      }\n\n      const data = unwrap(response).data as any;\n      const initResponse: PaymentInitResponse = {\n        paymentId: data.payment_id,\n        redirectUrl: data.redirect_url,\n        requiresRedirect: data.requires_redirect || false,\n        clientSecret: data.client_secret,\n        paymentIntentId: data.payment_intent_id,\n        instructions: data.instructions,\n        expiresAt: data.expires_at ? new Date(data.expires_at) : undefined\n      };\n\n      return Ok(initResponse);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Payment initialization failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Check payment status\n   */\n  async checkPaymentStatus(paymentId: string): Promise<Result<PaymentStatusResponse, WooError>> {\n    try {\n      const response = await this.client.get(`/wp-json/wc/v3/payments/${paymentId}/status`);\n\n      if (isErr(response)) {\n        return Err(unwrapErr(response));\n      }\n\n      const data = unwrap(response).data as any;\n      const statusResponse: PaymentStatusResponse = {\n        paymentId: data.payment_id,\n        status: data.status,\n        transactionId: data.transaction_id,\n        failureReason: data.failure_reason,\n        redirectUrl: data.redirect_url,\n        nextAction: data.next_action ? {\n          type: data.next_action.type,\n          url: data.next_action.url,\n          data: data.next_action.data\n        } : undefined\n      };\n\n      return Ok(statusResponse);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Payment status check failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Handle payment callback from gateway\n   */\n  async handlePaymentCallback(callbackData: PaymentCallbackData): Promise<Result<PaymentStatusResponse, WooError>> {\n    try {\n      // Verify callback signature if provided\n      if (callbackData.signature) {\n        const isValid = await this.verifyCallbackSignature(callbackData);\n        if (!isValid) {\n          return Err(ErrorFactory.authError(\n            'Invalid payment callback signature'\n          ));\n        }\n      }\n\n      // Process callback with backend\n      const response = await this.client.post('/wp-json/wc/v3/payments/callback', {\n        payment_id: callbackData.paymentId,\n        order_id: callbackData.orderId,\n        status: callbackData.status,\n        transaction_id: callbackData.transactionId,\n        signature: callbackData.signature,\n        metadata: callbackData.metadata\n      });\n\n      if (isErr(response)) {\n        return Err(unwrapErr(response));\n      }\n\n      const data = unwrap(response).data as any;\n      const statusResponse: PaymentStatusResponse = {\n        paymentId: data.payment_id,\n        status: data.status,\n        transactionId: data.transaction_id,\n        failureReason: data.failure_reason,\n        redirectUrl: data.redirect_url\n      };\n\n      return Ok(statusResponse);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Payment callback processing failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Cancel payment\n   */\n  async cancelPayment(paymentId: string, reason?: string): Promise<Result<void, WooError>> {\n    try {\n      const response = await this.client.post(`/wp-json/wc/v3/payments/${paymentId}/cancel`, {\n        reason\n      });\n\n      if (isErr(response)) {\n        return Err(unwrapErr(response));\n      }\n\n      return Ok(undefined);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Payment cancellation failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Validate payment method selection\n   */\n  async validatePaymentMethod(\n    methodId: string,\n    amount: number,\n    currency: string = this.config.currency\n  ): Promise<Result<PaymentValidationResult, WooError>> {\n    try {\n      const errors: string[] = [];\n      const warnings: string[] = [];\n\n      // Check if method is supported\n      if (!this.config.supportedMethods.includes(methodId as PaymentMethodType)) {\n        errors.push(`Payment method \"${methodId}\" is not supported`);\n      }\n\n      // Check amount limits\n      if (amount < this.config.minimumAmount) {\n        errors.push(`Amount is below minimum (${this.config.minimumAmount} ${currency})`);\n      }\n\n      if (this.config.maximumAmount && amount > this.config.maximumAmount) {\n        errors.push(`Amount exceeds maximum (${this.config.maximumAmount} ${currency})`);\n      }\n\n      // Get available methods to validate\n      const methodsResult = await this.getAvailablePaymentMethods(amount, currency);\n      if (isErr(methodsResult)) {\n        return Err(unwrapErr(methodsResult));\n      }\n\n      const methods = unwrap(methodsResult);\n      const method = methods.availableMethods.find(m => m.id === methodId);\n      \n      if (!method) {\n        errors.push(`Payment method \"${methodId}\" is not available`);\n      } else if (!method.enabled) {\n        errors.push(`Payment method \"${methodId}\" is currently disabled`);\n      } else {\n        // Check method-specific minimum amount\n        const methodMinimum = methods.minimumAmounts[methodId];\n        if (methodMinimum && amount < methodMinimum) {\n          errors.push(`Amount is below minimum for ${method.title} (${methodMinimum} ${currency})`);\n        }\n\n        // Add method-specific warnings\n        if (method.description) {\n          warnings.push(method.description);\n        }\n      }\n\n      return Ok({\n        isValid: errors.length === 0,\n        errors,\n        warnings\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Payment method validation failed',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Generate payment redirect URL\n   */\n  generateRedirectUrl(baseUrl: string, params: Record<string, string>): string {\n    const url = new URL(baseUrl);\n    Object.entries(params).forEach(([key, value]) => {\n      url.searchParams.set(key, value);\n    });\n    return url.toString();\n  }\n\n  /**\n   * Parse payment callback URL parameters\n   */\n  parseCallbackUrl(callbackUrl: string): Record<string, string> {\n    const url = new URL(callbackUrl);\n    const params: Record<string, string> = {};\n    \n    url.searchParams.forEach((value, key) => {\n      params[key] = value;\n    });\n\n    return params;\n  }\n\n  /**\n   * Check if payment method requires redirect\n   */\n  requiresRedirect(methodId: string): boolean {\n    const redirectMethods: PaymentMethodType[] = [\n      'paypal',\n      'stripe_checkout',\n      'bank_transfer',\n      'cash_on_delivery'\n    ];\n    \n    return redirectMethods.includes(methodId as PaymentMethodType);\n  }\n\n  /**\n   * Get payment method display information\n   */\n  getPaymentMethodDisplay(method: PaymentMethod): {\n    title: string;\n    description: string;\n    icon?: string;\n    acceptedCards?: string[];\n  } {\n    return {\n      title: method.title || method.id,\n      description: method.description || '',\n      icon: method.icon,\n      acceptedCards: method.acceptedCards\n    };\n  }\n\n  /**\n   * Filter payment methods by criteria\n   */\n  filterPaymentMethods(\n    methods: readonly PaymentMethod[],\n    criteria: {\n      enabled?: boolean;\n      minAmount?: number;\n      country?: string;\n      currency?: string;\n    }\n  ): PaymentMethod[] {\n    return methods.filter(method => {\n      if (criteria.enabled !== undefined && method.enabled !== criteria.enabled) {\n        return false;\n      }\n\n      if (criteria.minAmount && method.minimumAmount && criteria.minAmount < method.minimumAmount) {\n        return false;\n      }\n\n      if (criteria.country && method.supportedCountries && \n          !method.supportedCountries.includes(criteria.country.toUpperCase())) {\n        return false;\n      }\n\n      if (criteria.currency && method.supportedCurrencies && \n          !method.supportedCurrencies.includes(criteria.currency.toUpperCase())) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  /**\n   * Clear payment methods cache\n   */\n  async clearPaymentCache(): Promise<Result<void, WooError>> {\n    try {\n      await this.cache.invalidatePattern('payment-');\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.cacheError(\n        'Failed to clear payment cache',\n        error\n      ));\n    }\n  }\n\n  // Private helper methods\n\n  /**\n   * Verify payment callback signature\n   */\n  private async verifyCallbackSignature(callbackData: PaymentCallbackData): Promise<boolean> {\n    try {\n      // This would implement gateway-specific signature verification\n      // For now, return true as placeholder\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\n/**\n * Payment flow manager for handling multi-step payments\n */\nexport class PaymentFlowManager {\n  private readonly paymentService: PaymentService;\n  private currentPayment: PaymentInitResponse | null = null;\n\n  constructor(paymentService: PaymentService) {\n    this.paymentService = paymentService;\n  }\n\n  /**\n   * Start payment flow\n   */\n  async startPayment(request: PaymentInitRequest): Promise<Result<PaymentInitResponse, WooError>> {\n    const result = await this.paymentService.initializePayment(request);\n    \n    if (isOk(result)) {\n      this.currentPayment = unwrap(result);\n    }\n\n    return result;\n  }\n\n  /**\n   * Handle redirect return\n   */\n  async handleRedirectReturn(returnUrl: string): Promise<Result<PaymentStatusResponse, WooError>> {\n    if (!this.currentPayment) {\n      return Err(ErrorFactory.validationError('No active payment flow'));\n    }\n\n    const params = this.paymentService.parseCallbackUrl(returnUrl);\n    const paymentId = params.payment_id || this.currentPayment.paymentId;\n\n    return this.paymentService.checkPaymentStatus(paymentId);\n  }\n\n  /**\n   * Poll payment status\n   */\n  async pollPaymentStatus(\n    paymentId: string,\n    intervalMs: number = 2000,\n    timeoutMs: number = 30000\n  ): Promise<Result<PaymentStatusResponse, WooError>> {\n    const startTime = Date.now();\n\n    while (Date.now() - startTime < timeoutMs) {\n      const statusResult = await this.paymentService.checkPaymentStatus(paymentId);\n      \n      if (isErr(statusResult)) {\n        return statusResult;\n      }\n\n      const status = unwrap(statusResult);\n      if (status.status === 'completed' || status.status === 'failed') {\n        return Ok(status);\n      }\n\n      // Wait before next poll\n      await new Promise(resolve => setTimeout(resolve, intervalMs));\n    }\n\n    return Err(ErrorFactory.timeoutError('Payment status polling timeout', 30000));\n  }\n\n  /**\n   * Reset current payment flow\n   */\n  resetFlow(): void {\n    this.currentPayment = null;\n  }\n\n  /**\n   * Get current payment info\n   */\n  getCurrentPayment(): PaymentInitResponse | null {\n    return this.currentPayment;\n  }\n}\n\n/**\n * Default payment configuration\n */\nexport const DEFAULT_PAYMENT_CONFIG: PaymentConfig = {\n  enabled: true,\n  testMode: true,\n  supportedMethods: ['stripe', 'paypal', 'bank_transfer', 'cash_on_delivery'],\n  minimumAmount: 1,\n  currency: 'USD',\n  returnUrl: '/checkout/payment/return',\n  cancelUrl: '/checkout/payment/cancel',\n  cacheTimeout: 10 // 10 minutes\n}; ","/**\n * Comprehensive Checkout Validation System for WooCommerce Headless SDK\n * Coordinates all checkout component validations into unified validation framework\n * Following the Enhanced Unified 10X Developer Framework\n */\n\nimport { Result, Ok, Err, isErr, isOk, unwrap, unwrapErr } from '../../types/result';\nimport { WooError, ErrorFactory } from '../../types/errors';\nimport {\n  CheckoutValidationRules,\n  CheckoutValidationResult,\n  CheckoutValidationContext,\n  CheckoutSession\n} from '../../types/checkout';\nimport { Cart, CartItem } from '../../types/cart';\nimport { AddressManager, AddressValidationContext } from './address';\nimport { ShippingService } from './shipping';\nimport { PaymentService } from './payment';\n\n/**\n * Validation result for individual checkout components\n */\nexport interface ValidationResult {\n  readonly component: 'address' | 'shipping' | 'payment' | 'cart' | 'totals';\n  readonly isValid: boolean;\n  readonly errors: readonly string[];\n  readonly warnings: readonly string[];\n  readonly metadata?: Record<string, unknown>;\n}\n\n/**\n * Comprehensive checkout validation result\n */\nexport interface CheckoutValidationResult {\n  readonly isValid: boolean;\n  readonly canProceed: boolean;\n  readonly validationResults: readonly ValidationResult[];\n  readonly criticalErrors: readonly string[];\n  readonly warnings: readonly string[];\n  readonly blockers: readonly string[];\n  readonly recommendations: readonly string[];\n}\n\n/**\n * Validation context for checkout process\n */\nexport interface CheckoutValidationContext {\n  readonly checkoutSession: CheckoutSession;\n  readonly cart: Cart;\n  readonly validationRules: CheckoutValidationRules;\n  readonly isGuestCheckout: boolean;\n  readonly currentStep: number;\n  readonly skipOptionalValidations?: boolean;\n}\n\n/**\n * Stock validation result\n */\nexport interface StockValidationResult {\n  readonly isValid: boolean;\n  readonly outOfStockItems: readonly CartItem[];\n  readonly insufficientStockItems: readonly {\n    readonly item: CartItem;\n    readonly availableQuantity: number;\n  }[];\n  readonly backorderItems: readonly CartItem[];\n}\n\n/**\n * Comprehensive checkout validation service\n */\nexport class CheckoutValidationService {\n  private readonly addressManager: AddressManager;\n  private readonly shippingService: ShippingService;\n  private readonly paymentService: PaymentService;\n\n  constructor(\n    addressManager: AddressManager,\n    shippingService: ShippingService,\n    paymentService: PaymentService\n  ) {\n    this.addressManager = addressManager;\n    this.shippingService = shippingService;\n    this.paymentService = paymentService;\n  }\n\n  /**\n   * Validate entire checkout process\n   */\n  async validateCheckout(context: CheckoutValidationContext): Promise<Result<CheckoutValidationResult, WooError>> {\n    try {\n      const validationResults: ValidationResult[] = [];\n      const criticalErrors: string[] = [];\n      const warnings: string[] = [];\n      const blockers: string[] = [];\n      const recommendations: string[] = [];\n\n      // Validate billing address\n      const billingResult = await this.validateBillingAddress(context);\n      if (isErr(billingResult)) {\n        return Err(unwrapErr(billingResult));\n      }\n      validationResults.push(unwrap(billingResult));\n\n      // Validate shipping address if different from billing\n      if (!context.checkoutSession.useShippingAsBilling) {\n        const shippingResult = await this.validateShippingAddress(context);\n        if (isErr(shippingResult)) {\n          return Err(unwrapErr(shippingResult));\n        }\n        validationResults.push(unwrap(shippingResult));\n      }\n\n      // Validate shipping method\n      if (context.checkoutSession.selectedShippingMethod) {\n        const shippingMethodResult = await this.validateShippingMethod(context);\n        if (isErr(shippingMethodResult)) {\n          return Err(unwrapErr(shippingMethodResult));\n        }\n        validationResults.push(unwrap(shippingMethodResult));\n      }\n\n      // Validate payment method\n      if (context.checkoutSession.selectedPaymentMethod) {\n        const paymentResult = await this.validatePaymentMethod(context);\n        if (isErr(paymentResult)) {\n          return Err(unwrapErr(paymentResult));\n        }\n        validationResults.push(unwrap(paymentResult));\n      }\n\n      // Validate cart and stock\n      const cartResult = await this.validateCart(context);\n      if (isErr(cartResult)) {\n        return Err(unwrapErr(cartResult));\n      }\n      validationResults.push(unwrap(cartResult));\n\n      // Validate order totals\n      const totalsResult = await this.validateOrderTotals(context);\n      if (isErr(totalsResult)) {\n        return Err(unwrapErr(totalsResult));\n      }\n      validationResults.push(unwrap(totalsResult));\n\n      // Aggregate results\n      const allValid = validationResults.every(result => result.isValid);\n      \n      // Collect critical errors and warnings\n      validationResults.forEach(result => {\n        if (!result.isValid) {\n          criticalErrors.push(...result.errors);\n        }\n        warnings.push(...result.warnings);\n      });\n\n      // Determine blockers (issues that prevent checkout completion)\n      const hasAddressErrors = validationResults.some(r => \n        r.component === 'address' && !r.isValid\n      );\n      const hasPaymentErrors = validationResults.some(r => \n        r.component === 'payment' && !r.isValid\n      );\n      const hasStockErrors = validationResults.some(r => \n        r.component === 'cart' && !r.isValid\n      );\n\n      if (hasAddressErrors) {\n        blockers.push('Address information is incomplete or invalid');\n      }\n      if (hasPaymentErrors) {\n        blockers.push('Payment method is not valid or available');\n      }\n      if (hasStockErrors) {\n        blockers.push('Some items are out of stock or unavailable');\n      }\n\n      // Generate recommendations\n      this.generateRecommendations(validationResults, recommendations);\n\n      const canProceed = allValid && blockers.length === 0;\n\n      return Ok({\n        isValid: allValid,\n        canProceed,\n        validationResults,\n        criticalErrors,\n        warnings,\n        blockers,\n        recommendations\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Checkout validation failed',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Validate billing address\n   */\n  async validateBillingAddress(context: CheckoutValidationContext): Promise<Result<ValidationResult, WooError>> {\n    try {\n      const billingAddress = context.checkoutSession.billingAddress;\n      if (!billingAddress) {\n        return Ok({\n          component: 'address',\n          isValid: false,\n          errors: ['Billing address is required'],\n          warnings: []\n        });\n      }\n\n      const addressContext: AddressValidationContext = {\n        addressType: 'billing',\n        isGuestCheckout: context.isGuestCheckout,\n        checkoutRules: context.validationRules,\n        fieldRequirements: {\n          email: context.isGuestCheckout || context.validationRules.requireEmail\n        }\n      };\n\n      const validation = await this.addressManager.validateAddressWithContext(\n        billingAddress,\n        addressContext\n      );\n\n      if (isErr(validation)) {\n        return Err(unwrapErr(validation));\n      }\n\n      const result = unwrap(validation);\n      return Ok({\n        component: 'address',\n        isValid: result.isValid,\n        errors: result.errors,\n        warnings: result.warnings,\n        metadata: { addressType: 'billing' }\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Billing address validation failed',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Validate shipping address\n   */\n  async validateShippingAddress(context: CheckoutValidationContext): Promise<Result<ValidationResult, WooError>> {\n    try {\n      const shippingAddress = context.checkoutSession.shippingAddress;\n      if (!shippingAddress) {\n        return Ok({\n          component: 'address',\n          isValid: false,\n          errors: ['Shipping address is required'],\n          warnings: []\n        });\n      }\n\n      const addressContext: AddressValidationContext = {\n        addressType: 'shipping',\n        isGuestCheckout: context.isGuestCheckout,\n        checkoutRules: context.validationRules\n      };\n\n      const validation = await this.addressManager.validateAddressWithContext(\n        shippingAddress,\n        addressContext\n      );\n\n      if (isErr(validation)) {\n        return Err(unwrapErr(validation));\n      }\n\n      const result = unwrap(validation);\n      return Ok({\n        component: 'address',\n        isValid: result.isValid,\n        errors: result.errors,\n        warnings: result.warnings,\n        metadata: { addressType: 'shipping' }\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Shipping address validation failed',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Validate selected shipping method\n   */\n  async validateShippingMethod(context: CheckoutValidationContext): Promise<Result<ValidationResult, WooError>> {\n    try {\n      const selectedMethod = context.checkoutSession.selectedShippingMethod;\n      const shippingAddress = context.checkoutSession.useShippingAsBilling \n        ? context.checkoutSession.billingAddress \n        : context.checkoutSession.shippingAddress;\n\n      if (!selectedMethod || !shippingAddress) {\n        return Ok({\n          component: 'shipping',\n          isValid: false,\n          errors: ['Shipping method and address are required'],\n          warnings: []\n        });\n      }\n\n      // Get available shipping rates\n      const ratesResult = await this.shippingService.getShippingRates({\n        destination: shippingAddress,\n        cartItems: context.cart.items.map(item => ({\n          productId: item.productId,\n          variationId: item.variationId,\n          quantity: item.quantity,\n          weight: item.weight,\n          dimensions: item.dimensions\n        })),\n        cartTotal: context.cart.totals.total,\n        currency: context.cart.currency\n      });\n\n      if (isErr(ratesResult)) {\n        return Err(unwrapErr(ratesResult));\n      }\n\n      const rates = unwrap(ratesResult);\n      \n      // Check if selected method is available\n      const isValidMethod = this.shippingService.validateShippingSelection(\n        selectedMethod,\n        rates.rates\n      );\n\n      if (!isValidMethod) {\n        return Ok({\n          component: 'shipping',\n          isValid: false,\n          errors: ['Selected shipping method is no longer available'],\n          warnings: []\n        });\n      }\n\n      return Ok({\n        component: 'shipping',\n        isValid: true,\n        errors: [],\n        warnings: [],\n        metadata: { selectedMethod }\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Shipping method validation failed',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Validate selected payment method\n   */\n  async validatePaymentMethod(context: CheckoutValidationContext): Promise<Result<ValidationResult, WooError>> {\n    try {\n      const selectedMethod = context.checkoutSession.selectedPaymentMethod;\n      if (!selectedMethod) {\n        return Ok({\n          component: 'payment',\n          isValid: false,\n          errors: ['Payment method is required'],\n          warnings: []\n        });\n      }\n\n      // Validate payment method availability and constraints\n      const validation = await this.paymentService.validatePaymentMethod(\n        selectedMethod.id,\n        context.cart.totals.total,\n        context.cart.currency\n      );\n\n      if (isErr(validation)) {\n        return Err(unwrapErr(validation));\n      }\n\n      const result = unwrap(validation);\n      return Ok({\n        component: 'payment',\n        isValid: result.isValid,\n        errors: result.errors,\n        warnings: result.warnings,\n        metadata: { selectedMethod }\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Payment method validation failed',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Validate cart and stock availability\n   */\n  async validateCart(context: CheckoutValidationContext): Promise<Result<ValidationResult, WooError>> {\n    try {\n      const cart = context.cart;\n      const errors: string[] = [];\n      const warnings: string[] = [];\n\n      // Basic cart validation\n      if (cart.items.length === 0) {\n        errors.push('Cart is empty');\n      }\n\n      // Validate minimum order amount\n      if (context.validationRules.minimumOrderAmount && \n          cart.totals.total < context.validationRules.minimumOrderAmount) {\n        errors.push(`Minimum order amount is ${context.validationRules.minimumOrderAmount}`);\n      }\n\n      // Validate maximum order amount\n      if (context.validationRules.maximumOrderAmount && \n          cart.totals.total > context.validationRules.maximumOrderAmount) {\n        errors.push(`Maximum order amount is ${context.validationRules.maximumOrderAmount}`);\n      }\n\n      // Stock validation would be handled by existing cart validation\n      // This is a placeholder for additional cart-specific validation\n      \n      const isValid = errors.length === 0;\n\n      return Ok({\n        component: 'cart',\n        isValid,\n        errors,\n        warnings,\n        metadata: { \n          itemCount: cart.items.length,\n          total: cart.totals.total\n        }\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Cart validation failed',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Validate order totals consistency\n   */\n  async validateOrderTotals(context: CheckoutValidationContext): Promise<Result<ValidationResult, WooError>> {\n    try {\n      const totals = context.cart.totals;\n      const errors: string[] = [];\n      const warnings: string[] = [];\n\n      // Basic totals validation\n      if (totals.total < 0) {\n        errors.push('Order total cannot be negative');\n      }\n\n      if (totals.subtotal < 0) {\n        errors.push('Subtotal cannot be negative');\n      }\n\n      if (totals.tax < 0) {\n        errors.push('Tax amount cannot be negative');\n      }\n\n      // Validate total calculation\n      const calculatedTotal = totals.subtotal + totals.tax + totals.shipping + \n                             totals.shippingTax + totals.fees + totals.feesTax - \n                             totals.discount;\n\n      if (Math.abs(calculatedTotal - totals.total) > 0.01) {\n        errors.push('Order total calculation is inconsistent');\n      }\n\n      // Check for reasonable total amounts\n      if (totals.total > 100000) {\n        warnings.push('Order total is unusually high');\n      }\n\n      const isValid = errors.length === 0;\n\n      return Ok({\n        component: 'totals',\n        isValid,\n        errors,\n        warnings,\n        metadata: { \n          calculatedTotal,\n          actualTotal: totals.total\n        }\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Order totals validation failed',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Validate specific checkout step\n   */\n  async validateStep(\n    step: number,\n    context: CheckoutValidationContext\n  ): Promise<Result<CheckoutValidationResult, WooError>> {\n    try {\n      const validationResults: ValidationResult[] = [];\n\n      switch (step) {\n        case 1: // Address information\n          const billingResult = await this.validateBillingAddress(context);\n          if (isErr(billingResult)) return Err(unwrapErr(billingResult));\n          validationResults.push(unwrap(billingResult));\n\n          if (!context.checkoutSession.useShippingAsBilling) {\n            const shippingResult = await this.validateShippingAddress(context);\n            if (isErr(shippingResult)) return Err(unwrapErr(shippingResult));\n            validationResults.push(unwrap(shippingResult));\n          }\n          break;\n\n        case 2: // Shipping method\n          if (context.checkoutSession.selectedShippingMethod) {\n            const shippingResult = await this.validateShippingMethod(context);\n            if (isErr(shippingResult)) return Err(unwrapErr(shippingResult));\n            validationResults.push(unwrap(shippingResult));\n          }\n          break;\n\n        case 3: // Payment method\n          if (context.checkoutSession.selectedPaymentMethod) {\n            const paymentResult = await this.validatePaymentMethod(context);\n            if (isErr(paymentResult)) return Err(unwrapErr(paymentResult));\n            validationResults.push(unwrap(paymentResult));\n          }\n          break;\n\n        case 4: // Final review\n          return this.validateCheckout(context);\n\n        default:\n          return Err(ErrorFactory.validationError(\n            `Invalid checkout step: ${step}`\n          ));\n      }\n\n      const allValid = validationResults.every(result => result.isValid);\n      const criticalErrors = validationResults.flatMap(r => r.errors);\n      const warnings = validationResults.flatMap(r => r.warnings);\n\n      return Ok({\n        isValid: allValid,\n        canProceed: allValid,\n        validationResults,\n        criticalErrors,\n        warnings,\n        blockers: allValid ? [] : ['Step validation failed'],\n        recommendations: []\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Step validation failed',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Quick validation for specific fields\n   */\n  async validateField(\n    fieldName: string,\n    value: unknown,\n    context: CheckoutValidationContext\n  ): Promise<Result<ValidationResult, WooError>> {\n    try {\n      const errors: string[] = [];\n      const warnings: string[] = [];\n\n      switch (fieldName) {\n        case 'email':\n          if (typeof value === 'string') {\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n            if (!emailRegex.test(value)) {\n              errors.push('Invalid email format');\n            }\n          } else {\n            errors.push('Email must be a string');\n          }\n          break;\n\n        case 'phone':\n          if (typeof value === 'string' && value.length > 0) {\n            const phoneRegex = /^[\\+]?[\\d\\s\\-\\(\\)]+$/;\n            if (!phoneRegex.test(value)) {\n              errors.push('Invalid phone number format');\n            }\n          }\n          break;\n\n        case 'postcode':\n          if (typeof value === 'string' && value.length > 0) {\n            const billingCountry = context.checkoutSession.billingAddress?.country;\n            if (billingCountry) {\n              const countryConfig = this.addressManager.getCountryConfig(billingCountry);\n              if (countryConfig?.postcodePattern) {\n                const regex = new RegExp(countryConfig.postcodePattern);\n                if (!regex.test(value)) {\n                  errors.push(`Invalid postal code format for ${countryConfig.name}`);\n                }\n              }\n            }\n          }\n          break;\n\n        default:\n          return Err(ErrorFactory.validationError(\n            `Unknown field: ${fieldName}`\n          ));\n      }\n\n      return Ok({\n        component: 'address',\n        isValid: errors.length === 0,\n        errors,\n        warnings,\n        metadata: { fieldName, value }\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Field validation failed',\n        error\n      ));\n    }\n  }\n\n  // Private helper methods\n\n  /**\n   * Generate recommendations based on validation results\n   */\n  private generateRecommendations(\n    validationResults: readonly ValidationResult[],\n    recommendations: string[]\n  ): void {\n    // Address recommendations\n    const addressResults = validationResults.filter(r => r.component === 'address');\n    if (addressResults.some(r => r.warnings.length > 0)) {\n      recommendations.push('Review address information for accuracy');\n    }\n\n    // Shipping recommendations\n    const shippingResults = validationResults.filter(r => r.component === 'shipping');\n    if (shippingResults.length > 0) {\n      recommendations.push('Consider different shipping options for better rates');\n    }\n\n    // Payment recommendations\n    const paymentResults = validationResults.filter(r => r.component === 'payment');\n    if (paymentResults.some(r => r.warnings.length > 0)) {\n      recommendations.push('Check payment method details');\n    }\n\n    // Cart recommendations\n    const cartResults = validationResults.filter(r => r.component === 'cart');\n    if (cartResults.some(r => r.warnings.length > 0)) {\n      recommendations.push('Review cart items and quantities');\n    }\n  }\n}\n\n/**\n * Validation rule builder for dynamic validation configuration\n */\nexport class ValidationRuleBuilder {\n  private rules: Partial<CheckoutValidationRules> = {};\n\n  /**\n   * Set minimum order amount\n   */\n  minimumOrderAmount(amount: number): ValidationRuleBuilder {\n    this.rules = { ...this.rules, minimumOrderAmount: amount };\n    return this;\n  }\n\n  /**\n   * Set maximum order amount\n   */\n  maximumOrderAmount(amount: number): ValidationRuleBuilder {\n    this.rules = { ...this.rules, maximumOrderAmount: amount };\n    return this;\n  }\n\n  /**\n   * Require email address\n   */\n  requireEmail(required: boolean = true): ValidationRuleBuilder {\n    this.rules = { ...this.rules, requireEmail: required };\n    return this;\n  }\n\n  /**\n   * Require phone number\n   */\n  requirePhoneNumber(required: boolean = true): ValidationRuleBuilder {\n    this.rules = { ...this.rules, requirePhoneNumber: required };\n    return this;\n  }\n\n  /**\n   * Require company name\n   */\n  requireCompanyName(required: boolean = true): ValidationRuleBuilder {\n    this.rules = { ...this.rules, requireCompanyName: required };\n    return this;\n  }\n\n  /**\n   * Set required fields\n   */\n  requiredFields(fields: string[]): ValidationRuleBuilder {\n    this.rules = { ...this.rules, requiredFields: fields };\n    return this;\n  }\n\n  /**\n   * Set return URL\n   */\n  returnUrl(url: string): ValidationRuleBuilder {\n    this.rules = { ...this.rules, returnUrl: url };\n    return this;\n  }\n\n  /**\n   * Set cancel URL\n   */\n  cancelUrl(url: string): ValidationRuleBuilder {\n    this.rules = { ...this.rules, cancelUrl: url };\n    return this;\n  }\n\n  /**\n   * Build the validation rules\n   */\n  build(): CheckoutValidationRules {\n    const rules: CheckoutValidationRules = {\n      requireShippingAddress: this.rules.requireShippingAddress ?? true,\n      requireBillingAddress: this.rules.requireBillingAddress ?? true,\n      requirePhoneNumber: this.rules.requirePhoneNumber ?? false,\n      requireCompanyName: this.rules.requireCompanyName ?? false,\n      allowGuestCheckout: this.rules.allowGuestCheckout ?? true,\n      restrictedCountries: this.rules.restrictedCountries ?? [],\n      requiredFields: this.rules.requiredFields ?? []\n    };\n\n    // Handle optional properties for exactOptionalPropertyTypes\n    if (this.rules.requireEmail !== undefined) {\n      (rules as any).requireEmail = this.rules.requireEmail;\n    }\n    if (this.rules.minimumOrderAmount !== undefined) {\n      (rules as any).minimumOrderAmount = this.rules.minimumOrderAmount;\n    }\n    if (this.rules.maximumOrderAmount !== undefined) {\n      (rules as any).maximumOrderAmount = this.rules.maximumOrderAmount;\n    }\n    if (this.rules.returnUrl !== undefined) {\n      (rules as any).returnUrl = this.rules.returnUrl;\n    }\n    if (this.rules.cancelUrl !== undefined) {\n      (rules as any).cancelUrl = this.rules.cancelUrl;\n    }\n\n    return rules;\n  }\n}\n\n/**\n * Create validation rule builder\n */\nexport function createValidationRules(): ValidationRuleBuilder {\n  return new ValidationRuleBuilder();\n} ","/**\n * Checkout Flow Management System for WooCommerce Headless SDK\n * Multi-step checkout process coordination with state management\n * Following the Enhanced Unified 10X Developer Framework\n */\n\nimport { Result, Ok, Err, isErr, isOk, unwrap, unwrapErr } from '../../types/result';\nimport { WooError, ErrorFactory } from '../../types/errors';\nimport { \n  CheckoutStep,\n  CheckoutStepType,\n  CheckoutSession,\n  CheckoutValidationRules,\n  Order\n} from '../../types/checkout';\nimport { Cart } from '../../types/cart';\nimport { AddressManager } from './address';\nimport { ShippingService } from './shipping';\nimport { PaymentService } from './payment';\nimport { CheckoutValidationService, CheckoutValidationContext, CheckoutValidationResult } from './validation';\n\n/**\n * Checkout flow state\n */\nexport interface CheckoutFlowState {\n  readonly currentStep: number;\n  readonly completedSteps: readonly number[];\n  readonly availableSteps: readonly CheckoutStep[];\n  readonly canProceed: boolean;\n  readonly canGoBack: boolean;\n  readonly session: CheckoutSession;\n  readonly validationResult?: CheckoutValidationResult;\n}\n\n/**\n * Step transition result\n */\nexport interface StepTransitionResult {\n  readonly success: boolean;\n  readonly newStep: number;\n  readonly previousStep: number;\n  readonly validationResult?: CheckoutValidationResult;\n  readonly errors: readonly string[];\n  readonly blockers: readonly string[];\n}\n\n/**\n * Checkout completion result\n */\nexport interface CheckoutCompletionResult {\n  readonly success: boolean;\n  readonly order?: Order;\n  readonly paymentRedirectUrl?: string;\n  readonly requiresPaymentAction: boolean;\n  readonly errors: readonly string[];\n}\n\n/**\n * Checkout flow configuration\n */\nexport interface CheckoutFlowConfig {\n  readonly steps: readonly CheckoutStepType[];\n  readonly allowSkipOptional: boolean;\n  readonly persistSession: boolean;\n  readonly sessionTimeout: number; // in minutes\n  readonly autoAdvance: boolean;\n  readonly validationRules: CheckoutValidationRules;\n}\n\n/**\n * Checkout flow event handlers\n */\nexport interface CheckoutFlowEventHandlers {\n  onStepChange?: (currentStep: number, previousStep: number) => void;\n  onStepComplete?: (step: number) => void;\n  onValidationError?: (errors: readonly string[]) => void;\n  onCheckoutComplete?: (order: Order) => void;\n  onCheckoutError?: (error: WooError) => void;\n}\n\n/**\n * Comprehensive checkout flow manager\n */\nexport class CheckoutFlowManager {\n  private readonly paymentService: PaymentService;\n  private readonly validationService: CheckoutValidationService;\n  private readonly config: CheckoutFlowConfig;\n  private readonly eventHandlers: CheckoutFlowEventHandlers;\n  \n  private flowState: CheckoutFlowState;\n  private sessionId: string;\n\n  constructor(\n    addressManager: AddressManager,\n    shippingService: ShippingService,\n    paymentService: PaymentService,\n    validationService: CheckoutValidationService,\n    config: CheckoutFlowConfig,\n    eventHandlers: CheckoutFlowEventHandlers = {}\n  ) {\n    // Store only the services we actually use\n    this.paymentService = paymentService;\n    this.validationService = validationService;\n    this.config = config;\n    this.eventHandlers = eventHandlers;\n    \n    this.sessionId = this.generateSessionId();\n    this.flowState = this.initializeFlowState();\n  }\n\n  /**\n   * Initialize checkout flow with cart\n   */\n  async initializeCheckout(cart: Cart, isGuestCheckout: boolean = false): Promise<Result<CheckoutFlowState, WooError>> {\n    try {\n      // Create initial checkout session\n      const session: CheckoutSession = {\n        id: this.sessionId,\n        cartId: cart.id,\n        isGuestCheckout,\n        orderTotals: cart.totals,\n        flow: createEmptyCheckoutFlow(),\n        expiresAt: new Date(Date.now() + this.config.sessionTimeout * 60 * 1000),\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      // Initialize flow state\n      this.flowState = {\n        currentStep: 1,\n        completedSteps: [],\n        availableSteps: this.buildAvailableSteps(cart),\n        canProceed: false,\n        canGoBack: false,\n        session\n      };\n\n      // Persist session if configured\n      if (this.config.persistSession) {\n        await this.persistSession();\n      }\n\n      return Ok(this.flowState);\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Failed to initialize checkout flow',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Move to next step\n   */\n  async nextStep(cart: Cart): Promise<Result<StepTransitionResult, WooError>> {\n    try {\n      const currentStep = this.flowState.currentStep;\n      \n      // Validate current step before proceeding\n      const validationResult = await this.validateCurrentStep(cart);\n      if (isErr(validationResult)) {\n        return Err(unwrapErr(validationResult));\n      }\n\n      const validation = unwrap(validationResult);\n      if (!validation.canProceed) {\n        return Ok({\n          success: false,\n          newStep: currentStep,\n          previousStep: currentStep,\n          validationResult: validation,\n          errors: validation.criticalErrors,\n          blockers: validation.blockers\n        });\n      }\n\n      // Move to next step\n      const nextStep = currentStep + 1;\n      const maxStep = this.flowState.availableSteps.length;\n\n      if (nextStep > maxStep) {\n        // Attempt to complete checkout\n        return this.completeCheckout(cart);\n      }\n\n      // Update flow state\n      const previousStep = this.flowState.currentStep;\n      this.flowState = {\n        ...this.flowState,\n        currentStep: nextStep,\n        completedSteps: [...this.flowState.completedSteps, currentStep],\n        canProceed: false, // Will be determined by validation\n        canGoBack: true,\n        validationResult: validation\n      };\n\n      // Persist state\n      if (this.config.persistSession) {\n        await this.persistSession();\n      }\n\n      // Trigger events\n      this.eventHandlers.onStepChange?.(nextStep, previousStep);\n      this.eventHandlers.onStepComplete?.(currentStep);\n\n      return Ok({\n        success: true,\n        newStep: nextStep,\n        previousStep,\n        validationResult: validation,\n        errors: [],\n        blockers: []\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Failed to advance to next step',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Move to previous step\n   */\n  async previousStep(): Promise<Result<StepTransitionResult, WooError>> {\n    try {\n      const currentStep = this.flowState.currentStep;\n      \n      if (currentStep <= 1 || !this.flowState.canGoBack) {\n        return Err(ErrorFactory.validationError(\n          'Cannot go back from current step'\n        ));\n      }\n\n      const previousStep = currentStep - 1;\n      \n      // Update flow state\n      this.flowState = {\n        ...this.flowState,\n        currentStep: previousStep,\n        completedSteps: this.flowState.completedSteps.filter(step => step !== currentStep),\n        canProceed: true, // Previous steps were valid\n        canGoBack: previousStep > 1\n      };\n\n      // Persist state\n      if (this.config.persistSession) {\n        await this.persistSession();\n      }\n\n      // Trigger event\n      this.eventHandlers.onStepChange?.(previousStep, currentStep);\n\n      return Ok({\n        success: true,\n        newStep: previousStep,\n        previousStep: currentStep,\n        errors: [],\n        blockers: []\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Failed to go back to previous step',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Jump to specific step\n   */\n  async goToStep(targetStep: number, cart: Cart): Promise<Result<StepTransitionResult, WooError>> {\n    try {\n      const currentStep = this.flowState.currentStep;\n      \n      if (targetStep < 1 || targetStep > this.flowState.availableSteps.length) {\n        return Err(ErrorFactory.validationError(\n          `Invalid step: ${targetStep}`\n        ));\n      }\n\n      // If going forward, validate all steps in between\n      if (targetStep > currentStep) {\n        for (let step = currentStep; step < targetStep; step++) {\n          const validationResult = await this.validateStep(step, cart);\n          if (isErr(validationResult)) {\n            return Err(unwrapErr(validationResult));\n          }\n\n          const validation = unwrap(validationResult);\n          if (!validation.canProceed) {\n            return Ok({\n              success: false,\n              newStep: step,\n              previousStep: currentStep,\n              validationResult: validation,\n              errors: validation.criticalErrors,\n              blockers: validation.blockers\n            });\n          }\n        }\n      }\n\n      // Update flow state\n      this.flowState = {\n        ...this.flowState,\n        currentStep: targetStep,\n        completedSteps: targetStep > currentStep \n          ? [...this.flowState.completedSteps, ...Array.from({ length: targetStep - currentStep }, (_, i) => currentStep + i)]\n          : this.flowState.completedSteps.filter(step => step < targetStep),\n        canGoBack: targetStep > 1\n      };\n\n      // Persist state\n      if (this.config.persistSession) {\n        await this.persistSession();\n      }\n\n      // Trigger event\n      this.eventHandlers.onStepChange?.(targetStep, currentStep);\n\n      return Ok({\n        success: true,\n        newStep: targetStep,\n        previousStep: currentStep,\n        errors: [],\n        blockers: []\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Failed to jump to step',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Update checkout session data\n   */\n  async updateSession(updates: Partial<CheckoutSession>, cart: Cart): Promise<Result<CheckoutFlowState, WooError>> {\n    try {\n      // Update session\n      this.flowState = {\n        ...this.flowState,\n        session: {\n          ...this.flowState.session,\n          ...updates,\n          updatedAt: new Date()\n        }\n      };\n\n      // Re-validate current step with new data\n      const validationResult = await this.validateCurrentStep(cart);\n      if (isOk(validationResult)) {\n        const validation = unwrap(validationResult);\n        this.flowState = {\n          ...this.flowState,\n          canProceed: validation.canProceed,\n          validationResult: validation\n        };\n      }\n\n      // Persist state\n      if (this.config.persistSession) {\n        await this.persistSession();\n      }\n\n      return Ok(this.flowState);\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Failed to update checkout session',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Validate current step\n   */\n  async validateCurrentStep(cart: Cart): Promise<Result<CheckoutValidationResult, WooError>> {\n    return this.validateStep(this.flowState.currentStep, cart);\n  }\n\n  /**\n   * Validate specific step\n   */\n  async validateStep(step: number, cart: Cart): Promise<Result<CheckoutValidationResult, WooError>> {\n    try {\n      const context: CheckoutValidationContext = {\n        checkoutSession: this.flowState.session,\n        cart,\n        validationRules: this.config.validationRules,\n        isGuestCheckout: this.flowState.session.isGuestCheckout ?? false,\n        currentStep: step,\n        skipOptionalValidations: this.config.allowSkipOptional\n      };\n\n      return this.validationService.validateStep(step, context);\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Step validation failed',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Complete checkout and create order\n   */\n  async completeCheckout(cart: Cart): Promise<Result<StepTransitionResult, WooError>> {\n    try {\n      // Final validation of entire checkout\n      const context: CheckoutValidationContext = {\n        checkoutSession: this.flowState.session,\n        cart,\n        validationRules: this.config.validationRules,\n        isGuestCheckout: this.flowState.session.isGuestCheckout ?? false,\n        currentStep: this.flowState.currentStep\n      };\n\n      const validationResult = await this.validationService.validateCheckout(context);\n      if (isErr(validationResult)) {\n        return Err(unwrapErr(validationResult));\n      }\n\n      const validation = unwrap(validationResult);\n      if (!validation.canProceed) {\n        this.eventHandlers.onValidationError?.(validation.criticalErrors);\n        return Ok({\n          success: false,\n          newStep: this.flowState.currentStep,\n          previousStep: this.flowState.currentStep,\n          validationResult: validation,\n          errors: validation.criticalErrors,\n          blockers: validation.blockers\n        });\n      }\n\n      // Create order (this would integrate with order processing service)\n      const order = await this.createOrder(cart);\n      if (isErr(order)) {\n        return Err(unwrapErr(order));\n      }\n\n      const createdOrder = unwrap(order);\n\n      // Initialize payment if required\n      if (this.flowState.session.selectedPaymentMethod) {\n        const paymentInit = await this.initializePayment(createdOrder);\n        if (isOk(paymentInit)) {\n          const payment = unwrap(paymentInit);\n          return Ok({\n            success: true,\n            orderId: createdOrder.id.toString(),\n            redirectUrl: payment.redirectUrl,\n            paymentStatus: 'pending',\n            requiresRedirect: payment.requiresRedirect,\n            clientSecret: payment.clientSecret,\n            paymentIntentId: payment.paymentIntentId\n          });\n        }\n      }\n\n      // Mark checkout as complete\n      this.flowState = {\n        ...this.flowState,\n        currentStep: this.flowState.availableSteps.length + 1,\n        completedSteps: [...this.flowState.completedSteps, this.flowState.currentStep],\n        canProceed: false,\n        canGoBack: false\n      };\n\n      // Trigger completion event\n      this.eventHandlers.onCheckoutComplete?.(createdOrder);\n\n      return Ok({\n        success: true,\n        newStep: this.flowState.currentStep,\n        previousStep: this.flowState.currentStep - 1,\n        errors: [],\n        blockers: []\n      });\n\n    } catch (error) {\n      const woError = ErrorFactory.validationError(\n        'Checkout completion failed',\n        error\n      );\n      this.eventHandlers.onCheckoutError?.(woError);\n      return Err(woError);\n    }\n  }\n\n  /**\n   * Get current flow state\n   */\n  getFlowState(): CheckoutFlowState {\n    return this.flowState;\n  }\n\n  /**\n   * Get current step information\n   */\n  getCurrentStep(): CheckoutStep | null {\n    const stepIndex = this.flowState.currentStep - 1;\n    return this.flowState.availableSteps[stepIndex] || null;\n  }\n\n  /**\n   * Check if step is completed\n   */\n  isStepCompleted(step: number): boolean {\n    return this.flowState.completedSteps.includes(step);\n  }\n\n  /**\n   * Reset checkout flow\n   */\n  async resetFlow(): Promise<Result<void, WooError>> {\n    try {\n      this.flowState = this.initializeFlowState();\n      this.sessionId = this.generateSessionId();\n      \n      if (this.config.persistSession) {\n        await this.clearPersistedSession();\n      }\n\n      return Ok(undefined);\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Failed to reset checkout flow',\n        error\n      ));\n    }\n  }\n\n  // Private helper methods\n\n  /**\n   * Initialize empty flow state\n   */\n  private initializeFlowState(): CheckoutFlowState {\n    return {\n      currentStep: 1,\n      completedSteps: [],\n      availableSteps: [],\n      canProceed: false,\n      canGoBack: false,\n      session: {\n        id: this.sessionId,\n        cartId: '',\n        isGuestCheckout: false,\n        useShippingAsBilling: true,\n        orderNotes: '',\n        termsAccepted: false,\n        newsletterOptIn: false,\n        orderTotals: {\n          subtotal: 0,\n          tax: 0,\n          shipping: 0,\n          shippingTax: 0,\n          discount: 0,\n          fees: 0,\n          feesTax: 0,\n          total: 0,\n          currency: 'USD'\n        },\n        flow: {\n          steps: [],\n          currentStep: 'cart_review',\n          canProceed: false,\n          canGoBack: false,\n          progress: {\n            current: 1,\n            total: 4,\n            percentage: 25\n          }\n        },\n        expiresAt: new Date(Date.now() + 60 * 60 * 1000), // 1 hour\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    };\n  }\n\n  /**\n   * Build available steps based on cart contents\n   */\n  private buildAvailableSteps(cart: Cart): CheckoutStep[] {\n    const steps: CheckoutStep[] = [];\n\n    // Always include address step\n    steps.push({\n      type: 'address',\n      title: 'Billing & Shipping',\n      description: 'Enter your billing and shipping information',\n      completed: false,\n      valid: false,\n      errors: []\n    });\n\n    // Add shipping step if cart has physical items (simplified check without item.type)\n    const hasPhysicalItems = cart.items.length > 0; // Simplified - assume physical items need shipping\n    \n    if (hasPhysicalItems) {\n      steps.push({\n        type: 'shipping',\n        title: 'Shipping Method',\n        description: 'Choose your shipping method',\n        completed: false,\n        valid: false,\n        errors: []\n      });\n    }\n\n    // Always include payment step\n    steps.push({\n      type: 'payment',\n      title: 'Payment',\n      description: 'Choose your payment method',\n      completed: false,\n      valid: false,\n      errors: []\n    });\n\n    // Add review step\n    steps.push({\n      type: 'review',\n      title: 'Review Order',\n      description: 'Review your order before placing it',\n      completed: false,\n      valid: false,\n      errors: []\n    });\n\n    return steps;\n  }\n\n  /**\n   * Create order (placeholder - would integrate with order service)\n   */\n  private async createOrder(cart: Cart): Promise<Result<Order, WooError>> {\n    try {\n      // This would integrate with the order processing service\n      // For now, return a mock order\n      const order: Order = {\n        id: this.generateOrderId(),\n        number: `ORDER-${Date.now()}`,\n        status: 'pending',\n        currency: cart.currency,\n        total: cart.totals.total,\n        subtotal: cart.totals.subtotal,\n        totalTax: cart.totals.tax,\n        shippingTotal: cart.totals.shipping,\n        shippingTax: cart.totals.shippingTax,\n        discountTotal: cart.totals.discount,\n        feeTotal: cart.totals.fees,\n        feeTax: cart.totals.feeTax,\n        billingAddress: this.flowState.session.billingAddress!,\n        shippingAddress: this.flowState.session.useShippingAsBilling \n          ? this.flowState.session.billingAddress!\n          : this.flowState.session.shippingAddress!,\n        paymentMethod: this.flowState.session.selectedPaymentMethod?.id || '',\n        shippingMethod: this.flowState.session.selectedShippingMethod?.methodId || '',\n        orderNotes: this.flowState.session.orderNotes,\n        lineItems: cart.items.map((item, index) => ({\n          id: index + 1, // Use index as numeric ID\n          productId: item.productId,\n          variationId: item.variationId,\n          quantity: item.quantity,\n          price: item.price,\n          total: item.total,\n          subtotal: item.price * item.quantity,\n          totalTax: 0, // Default to 0 - would be calculated properly in real implementation\n          subtotalTax: 0, // Default to 0 - would be calculated properly in real implementation\n          name: item.name,\n          sku: item.sku,\n          meta: [] // Empty meta array for now\n        })),\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      return Ok(order);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Order creation failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Initialize payment for order\n   */\n  private async initializePayment(order: Order): Promise<Result<{ redirectUrl?: string }, WooError>> {\n    try {\n      if (!this.flowState.session.selectedPaymentMethod) {\n        return Ok({});\n      }\n\n      const paymentRequest = {\n        paymentMethodId: this.flowState.session.selectedPaymentMethod.id,\n        orderId: order.id,\n        amount: order.total,\n        currency: order.currency,\n        returnUrl: this.config.validationRules.returnUrl || '/checkout/success',\n        cancelUrl: this.config.validationRules.cancelUrl || '/checkout/cancel'\n      };\n\n      const result = await this.paymentService.initializePayment(paymentRequest);\n      if (isErr(result)) {\n        return Err(unwrapErr(result));\n      }\n\n      const payment = unwrap(result);\n      return Ok({\n        redirectUrl: payment.redirectUrl\n      });\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Payment initialization failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Persist session (placeholder implementation)\n   */\n  private async persistSession(): Promise<void> {\n    // This would integrate with session storage (localStorage, database, etc.)\n    // For now, just store in localStorage\n    if (typeof window !== 'undefined') {\n      localStorage.setItem(`woo-checkout-session-${this.sessionId}`, JSON.stringify(this.flowState));\n    }\n  }\n\n  /**\n   * Clear persisted session\n   */\n  private async clearPersistedSession(): Promise<void> {\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem(`woo-checkout-session-${this.sessionId}`);\n    }\n  }\n\n  /**\n   * Generate session ID\n   */\n  private generateSessionId(): string {\n    return `checkout-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Generate order ID\n   */\n  private generateOrderId(): number {\n    return Date.now(); // Simple numeric ID based on timestamp\n  }\n}\n\n/**\n * Default checkout flow configuration\n */\nexport const DEFAULT_CHECKOUT_FLOW_CONFIG: CheckoutFlowConfig = {\n  steps: ['address', 'shipping', 'payment', 'review'],\n  allowSkipOptional: false,\n  persistSession: true,\n  sessionTimeout: 30, // 30 minutes\n  autoAdvance: false,\n  validationRules: {\n    minimumOrderAmount: 0,\n    requireEmail: true,\n    requirePhoneNumber: false,\n    requireCompanyName: false,\n    requiredFields: []\n  }\n}; ","/**\n * Order Processing System for WooCommerce Headless SDK\n * Handles order creation, confirmation, status tracking, and inventory management\n * Following the Enhanced Unified 10X Developer Framework\n */\n\nimport { HttpClient } from '../../core/client';\nimport { CacheManager } from '../../core/cache';\nimport { Result, Ok, Err, isErr, unwrap, unwrapErr } from '../../types/result';\nimport { WooError, ErrorFactory } from '../../types/errors';\nimport { \n  Order,\n  OrderStatus,\n  CheckoutSession,\n  BillingAddress,\n  ShippingAddress\n} from '../../types/checkout';\nimport { Cart } from '../../types/cart';\n\n/**\n * Order creation request\n */\nexport interface OrderCreateRequest {\n  readonly cart: Cart;\n  readonly checkoutSession: CheckoutSession;\n  readonly customerNotes?: string;\n  readonly metadata?: Record<string, unknown>;\n}\n\n/**\n * Order creation response\n */\nexport interface OrderCreateResponse {\n  readonly order: Order;\n  readonly requiresPayment: boolean;\n  readonly paymentUrl?: string;\n  readonly confirmationUrl: string;\n}\n\n/**\n * Order confirmation request\n */\nexport interface OrderConfirmationRequest {\n  readonly orderId: string;\n  readonly paymentId?: string;\n  readonly transactionId?: string;\n  readonly paymentStatus?: 'completed' | 'failed' | 'pending';\n}\n\n/**\n * Order status update request\n */\nexport interface OrderStatusUpdateRequest {\n  readonly orderId: string;\n  readonly status: OrderStatus;\n  readonly note?: string;\n  readonly notifyCustomer?: boolean;\n}\n\n/**\n * Inventory update request\n */\nexport interface InventoryUpdateRequest {\n  readonly orderId: string;\n  readonly items: readonly {\n    readonly productId: number;\n    readonly variationId?: number;\n    readonly quantity: number;\n    readonly operation: 'decrease' | 'increase' | 'reserve';\n  }[];\n}\n\n/**\n * Order search criteria\n */\nexport interface OrderSearchCriteria {\n  readonly status?: OrderStatus;\n  readonly customerId?: string;\n  readonly customerEmail?: string;\n  readonly dateFrom?: Date;\n  readonly dateTo?: Date;\n  readonly minAmount?: number;\n  readonly maxAmount?: number;\n  readonly paymentMethod?: string;\n  readonly limit?: number;\n  readonly offset?: number;\n}\n\n/**\n * Order processing configuration\n */\nexport interface OrderProcessingConfig {\n  readonly autoUpdateInventory: boolean;\n  readonly sendConfirmationEmail: boolean;\n  readonly requirePaymentConfirmation: boolean;\n  readonly orderNumberPrefix: string;\n  readonly orderNumberSuffix?: string;\n  readonly defaultStatus: OrderStatus;\n  readonly inventoryHoldMinutes: number;\n  readonly cacheTimeout: number;\n}\n\n/**\n * Order processing service for backend integration\n */\nexport class OrderProcessingService {\n  private readonly client: HttpClient;\n  private readonly cache: CacheManager;\n  private readonly config: OrderProcessingConfig;\n\n  constructor(\n    client: HttpClient,\n    cache: CacheManager,\n    config: OrderProcessingConfig\n  ) {\n    this.client = client;\n    this.cache = cache;\n    this.config = config;\n  }\n\n  /**\n   * Create new order from checkout session\n   */\n  async createOrder(request: OrderCreateRequest): Promise<Result<OrderCreateResponse, WooError>> {\n    try {\n      // Validate cart and checkout session\n      const validationResult = await this.validateOrderCreation(request);\n      if (isErr(validationResult)) {\n        return Err(unwrapErr(validationResult));\n      }\n\n      // Reserve inventory if configured\n      if (this.config.autoUpdateInventory) {\n        const inventoryResult = await this.reserveInventory(request.cart);\n        if (isErr(inventoryResult)) {\n          return Err(unwrapErr(inventoryResult));\n        }\n      }\n\n      // Create order with backend\n      const orderData = this.buildOrderData(request);\n      const response = await this.client.post('/wp-json/wc/v3/orders', orderData);\n\n      if (isErr(response)) {\n        // Release reserved inventory on failure\n        if (this.config.autoUpdateInventory) {\n          await this.releaseInventory(request.cart);\n        }\n        return Err(unwrapErr(response));\n      }\n\n      const data = unwrap(response).data as any;\n      const order = this.mapOrderResponse(data);\n\n      // Update inventory\n      if (this.config.autoUpdateInventory) {\n        await this.updateInventory({\n          orderId: order.id.toString(),\n          items: request.cart.items.map(item => ({\n            productId: item.productId,\n            variationId: item.variationId,\n            quantity: item.quantity,\n            operation: 'decrease'\n          }))\n        });\n      }\n\n      // Cache the order\n      await this.cache.set(`order:${order.id}`, order, this.config.cacheTimeout * 60);\n\n      const orderResponse: OrderCreateResponse = {\n        order,\n        requiresPayment: order.total > 0 && order.status === 'pending',\n        paymentUrl: data.payment_url,\n        confirmationUrl: `/order-confirmation/${order.id}`\n      };\n\n      return Ok(orderResponse);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Order creation failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get order by ID\n   */\n  async getOrder(orderId: string): Promise<Result<Order, WooError>> {\n    try {\n      // Check cache first\n      const cached = await this.cache.get<Order>(`order:${orderId}`);\n      if (cached.success && cached.data) {\n        return Ok(cached.data);\n      }\n\n      // Fetch from backend\n      const response = await this.client.get(`/wp-json/wc/v3/orders/${orderId}`);\n\n      if (isErr(response)) {\n        return Err(unwrapErr(response));\n      }\n\n      const data = unwrap(response).data as any;\n      const order = this.mapOrderResponse(data);\n\n      // Cache the order\n      await this.cache.set(`order:${orderId}`, order, this.config.cacheTimeout * 60);\n\n      return Ok(order);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to fetch order',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Update order status\n   */\n  async updateOrderStatus(request: OrderStatusUpdateRequest): Promise<Result<Order, WooError>> {\n    try {\n      const response = await this.client.put(`/wp-json/wc/v3/orders/${request.orderId}`, {\n        status: request.status,\n        customer_note: request.note,\n        notify_customer: request.notifyCustomer || false\n      });\n\n      if (isErr(response)) {\n        return Err(unwrapErr(response));\n      }\n\n      const data = unwrap(response).data as any;\n      const order = this.mapOrderResponse(data);\n\n      // Update cache\n      await this.cache.set(`order:${order.id}`, order, this.config.cacheTimeout * 60);\n\n      return Ok(order);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to update order status',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Confirm order completion\n   */\n  async confirmOrder(request: OrderConfirmationRequest): Promise<Result<Order, WooError>> {\n    try {\n      // Get current order\n      const orderResult = await this.getOrder(request.orderId);\n      if (isErr(orderResult)) {\n        return Err(unwrapErr(orderResult));\n      }\n\n      const order = unwrap(orderResult);\n\n      // Update order with confirmation details\n      const updateData: any = {\n        status: 'processing',\n        transaction_id: request.transactionId,\n        date_paid: new Date().toISOString()\n      };\n\n      if (request.paymentStatus) {\n        updateData.payment_status = request.paymentStatus;\n      }\n\n      const response = await this.client.put(`/wp-json/wc/v3/orders/${request.orderId}`, updateData);\n\n      if (isErr(response)) {\n        return Err(unwrapErr(response));\n      }\n\n      const data = unwrap(response).data as any;\n      const confirmedOrder = this.mapOrderResponse(data);\n\n      // Update cache\n      await this.cache.set(`order:${confirmedOrder.id}`, confirmedOrder, this.config.cacheTimeout * 60);\n\n      // Send confirmation email if configured\n      if (this.config.sendConfirmationEmail) {\n        await this.sendOrderConfirmationEmail(confirmedOrder);\n      }\n\n      return Ok(confirmedOrder);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Order confirmation failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Cancel order\n   */\n  async cancelOrder(orderId: string, reason?: string): Promise<Result<Order, WooError>> {\n    try {\n      // Get current order\n      const orderResult = await this.getOrder(orderId);\n      if (isErr(orderResult)) {\n        return Err(unwrapErr(orderResult));\n      }\n\n      const order = unwrap(orderResult);\n\n      // Only allow cancellation of pending/processing orders\n      if (!['pending', 'processing', 'on-hold'].includes(order.status)) {\n        return Err(ErrorFactory.validationError(\n          `Cannot cancel order with status: ${order.status}`\n        ));\n      }\n\n      // Update order status to cancelled\n      const response = await this.client.put(`/wp-json/wc/v3/orders/${orderId}`, {\n        status: 'cancelled',\n        customer_note: reason || 'Order cancelled by customer'\n      });\n\n      if (isErr(response)) {\n        return Err(unwrapErr(response));\n      }\n\n      const data = unwrap(response).data as any;\n      const cancelledOrder = this.mapOrderResponse(data);\n\n      // Restore inventory if configured\n      if (this.config.autoUpdateInventory) {\n        await this.updateInventory({\n          orderId: cancelledOrder.id,\n          items: cancelledOrder.lineItems.map(item => ({\n            productId: item.productId,\n            variationId: item.variationId,\n            quantity: item.quantity,\n            operation: 'increase'\n          }))\n        });\n      }\n\n      // Update cache\n      await this.cache.set(`order:${cancelledOrder.id}`, cancelledOrder, this.config.cacheTimeout * 60);\n\n      return Ok(cancelledOrder);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Order cancellation failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Search orders by criteria\n   */\n  async searchOrders(criteria: OrderSearchCriteria): Promise<Result<Order[], WooError>> {\n    try {\n      const params: Record<string, string> = {};\n\n      if (criteria.status) params.status = criteria.status;\n      if (criteria.customerId) params.customer = criteria.customerId;\n      if (criteria.customerEmail) params.customer_email = criteria.customerEmail;\n      if (criteria.dateFrom) params.after = criteria.dateFrom.toISOString();\n      if (criteria.dateTo) params.before = criteria.dateTo.toISOString();\n      if (criteria.paymentMethod) params.payment_method = criteria.paymentMethod;\n      if (criteria.limit) params.per_page = criteria.limit.toString();\n      if (criteria.offset) params.offset = criteria.offset.toString();\n\n      const response = await this.client.get('/wp-json/wc/v3/orders', params);\n\n      if (isErr(response)) {\n        return Err(unwrapErr(response));\n      }\n\n      const data = unwrap(response).data as any[];\n      const orders = data.map(orderData => this.mapOrderResponse(orderData));\n\n      // Filter by amount if specified\n      let filteredOrders = orders;\n      if (criteria.minAmount || criteria.maxAmount) {\n        filteredOrders = orders.filter(order => {\n          if (criteria.minAmount && order.total < criteria.minAmount) return false;\n          if (criteria.maxAmount && order.total > criteria.maxAmount) return false;\n          return true;\n        });\n      }\n\n      return Ok(filteredOrders);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Order search failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Get order notes\n   */\n  async getOrderNotes(orderId: string): Promise<Result<string[], WooError>> {\n    try {\n      const response = await this.client.get(`/wp-json/wc/v3/orders/${orderId}/notes`);\n\n      if (isErr(response)) {\n        return Err(unwrapErr(response));\n      }\n\n      const data = unwrap(response).data as any[];\n      const notes = data.map(note => note.note);\n\n      return Ok(notes);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to fetch order notes',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Add note to order\n   */\n  async addOrderNote(orderId: string, note: string, customerNote: boolean = false): Promise<Result<void, WooError>> {\n    try {\n      const response = await this.client.post(`/wp-json/wc/v3/orders/${orderId}/notes`, {\n        note,\n        customer_note: customerNote\n      });\n\n      if (isErr(response)) {\n        return Err(unwrapErr(response));\n      }\n\n      return Ok(undefined);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Failed to add order note',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Generate order number\n   */\n  generateOrderNumber(): string {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substr(2, 4).toUpperCase();\n    return `${this.config.orderNumberPrefix}${timestamp}${random}${this.config.orderNumberSuffix || ''}`;\n  }\n\n  /**\n   * Validate order creation request\n   */\n  async validateOrderCreation(request: OrderCreateRequest): Promise<Result<void, WooError>> {\n    try {\n      const { cart, checkoutSession } = request;\n\n      // Validate cart\n      if (cart.items.length === 0) {\n        return Err(ErrorFactory.validationError('Cart is empty'));\n      }\n\n      if (cart.totals.total < 0) {\n        return Err(ErrorFactory.validationError('Order total cannot be negative'));\n      }\n\n      // Validate addresses\n      if (!checkoutSession.billingAddress) {\n        return Err(ErrorFactory.validationError('Billing address is required'));\n      }\n\n      if (!checkoutSession.useShippingAsBilling && !checkoutSession.shippingAddress) {\n        return Err(ErrorFactory.validationError('Shipping address is required'));\n      }\n\n      // Validate payment method for non-zero totals\n      if (cart.totals.total > 0 && !checkoutSession.selectedPaymentMethod) {\n        return Err(ErrorFactory.validationError('Payment method is required'));\n      }\n\n      // Validate terms acceptance\n      if (!checkoutSession.termsAccepted) {\n        return Err(ErrorFactory.validationError('Terms and conditions must be accepted'));\n      }\n\n      return Ok(undefined);\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Order validation failed',\n        error\n      ));\n    }\n  }\n\n  // Private helper methods\n\n  /**\n   * Build order data for API request\n   */\n  private buildOrderData(request: OrderCreateRequest): any {\n    const { cart, checkoutSession } = request;\n\n    return {\n      payment_method: checkoutSession.selectedPaymentMethod?.id || '',\n      payment_method_title: checkoutSession.selectedPaymentMethod?.title || '',\n      set_paid: false,\n      billing: this.mapAddressForAPI(checkoutSession.billingAddress!),\n      shipping: checkoutSession.useShippingAsBilling \n        ? this.mapAddressForAPI(checkoutSession.billingAddress!)\n        : this.mapAddressForAPI(checkoutSession.shippingAddress!),\n      line_items: cart.items.map(item => ({\n        product_id: item.productId,\n        variation_id: item.variationId || 0,\n        quantity: item.quantity,\n        price: item.price,\n        total: item.total.toString()\n      })),\n      shipping_lines: checkoutSession.selectedShippingMethod ? [{\n        method_id: checkoutSession.selectedShippingMethod.methodId,\n        method_title: checkoutSession.selectedShippingMethod.title,\n        total: checkoutSession.selectedShippingMethod.cost.toString()\n      }] : [],\n      customer_note: checkoutSession.orderNotes || '',\n      status: this.config.defaultStatus,\n      currency: cart.currency,\n      customer_id: checkoutSession.isGuestCheckout ? 0 : undefined,\n      meta_data: [\n        {\n          key: '_woo_headless_checkout_session',\n          value: checkoutSession.id\n        },\n        {\n          key: '_woo_headless_created',\n          value: new Date().toISOString()\n        }\n      ]\n    };\n  }\n\n  /**\n   * Map address for API\n   */\n  private mapAddressForAPI(address: BillingAddress | ShippingAddress): any {\n    return {\n      first_name: address.firstName,\n      last_name: address.lastName,\n      company: address.company || '',\n      address_1: address.address1,\n      address_2: address.address2 || '',\n      city: address.city,\n      state: address.state,\n      postcode: address.postcode,\n      country: address.country,\n      email: address.email || '',\n      phone: address.phone || ''\n    };\n  }\n\n  /**\n   * Map order response from API\n   */\n  private mapOrderResponse(data: any): Order {\n    return {\n      id: data.id.toString(),\n      number: data.number,\n      status: data.status,\n      currency: data.currency,\n      total: parseFloat(data.total),\n      subtotal: parseFloat(data.line_items_subtotal || '0'),\n      totalTax: parseFloat(data.total_tax),\n      shippingTotal: parseFloat(data.shipping_total),\n      shippingTax: parseFloat(data.shipping_tax),\n      discountTotal: parseFloat(data.discount_total),\n      feeTotal: parseFloat(data.fee_total || '0'),\n      feeTax: parseFloat(data.fee_tax || '0'),\n      billingAddress: this.mapAddressFromAPI(data.billing),\n      shippingAddress: this.mapAddressFromAPI(data.shipping),\n      paymentMethod: data.payment_method,\n      shippingMethod: data.shipping_lines[0]?.method_id || '',\n      orderNotes: data.customer_note || '',\n      lineItems: data.line_items.map((item: any) => ({\n        id: item.id.toString(),\n        productId: item.product_id,\n        variationId: item.variation_id || undefined,\n        quantity: item.quantity,\n        price: parseFloat(item.price),\n        total: parseFloat(item.total),\n        name: item.name,\n        sku: item.sku || ''\n      })),\n      createdAt: new Date(data.date_created),\n      updatedAt: new Date(data.date_modified)\n    };\n  }\n\n  /**\n   * Map address from API response\n   */\n  private mapAddressFromAPI(data: any): BillingAddress {\n    return {\n      firstName: data.first_name,\n      lastName: data.last_name,\n      company: data.company,\n      address1: data.address_1,\n      address2: data.address_2,\n      city: data.city,\n      state: data.state,\n      postcode: data.postcode,\n      country: data.country,\n      email: data.email,\n      phone: data.phone\n    };\n  }\n\n  /**\n   * Reserve inventory for cart items\n   */\n  private async reserveInventory(cart: Cart): Promise<Result<void, WooError>> {\n    try {\n      // This would implement inventory reservation logic\n      // For now, return success as placeholder\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Inventory reservation failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Release reserved inventory\n   */\n  private async releaseInventory(cart: Cart): Promise<Result<void, WooError>> {\n    try {\n      // This would implement inventory release logic\n      // For now, return success as placeholder\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Inventory release failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Update inventory\n   */\n  private async updateInventory(request: InventoryUpdateRequest): Promise<Result<void, WooError>> {\n    try {\n      // This would implement inventory update logic\n      // For now, return success as placeholder\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Inventory update failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  /**\n   * Send order confirmation email\n   */\n  private async sendOrderConfirmationEmail(order: Order): Promise<Result<void, WooError>> {\n    try {\n      // This would integrate with email service\n      // For now, return success as placeholder\n      return Ok(undefined);\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Confirmation email failed',\n        500,\n        error\n      ));\n    }\n  }\n}\n\n/**\n * Default order processing configuration\n */\nexport const DEFAULT_ORDER_PROCESSING_CONFIG: OrderProcessingConfig = {\n  autoUpdateInventory: true,\n  sendConfirmationEmail: true,\n  requirePaymentConfirmation: true,\n  orderNumberPrefix: 'WOO-',\n  defaultStatus: 'pending',\n  inventoryHoldMinutes: 15,\n  cacheTimeout: 30 // 30 minutes\n}; ","/**\n * Main Checkout Service for WooCommerce Headless SDK\n * Unified API integrating all checkout components\n * Following the Enhanced Unified 10X Developer Framework\n */\n\nimport { HttpClient } from '../../core/client';\nimport { CacheManager } from '../../core/cache';\nimport { Result, Ok, Err, isErr, isOk, unwrap, unwrapErr } from '../../types/result';\nimport { WooError, ErrorFactory } from '../../types/errors';\nimport { \n  CheckoutSession,\n  CheckoutValidationRules,\n  CheckoutStep,\n  BillingAddress,\n  ShippingAddress,\n  SelectedShippingMethod,\n  PaymentMethod,\n  Order\n} from '../../types/checkout';\nimport { Cart } from '../../types/cart';\n\n// Import all checkout services\nimport { \n  AddressManager, \n  AddressFieldRequirements, \n  AddressValidationContext\n} from './address';\nimport { \n  ShippingService, \n  ShippingRateRequest, \n  ShippingRateResponse,\n  ShippingCalculation,\n  ShippingConfig,\n  DEFAULT_SHIPPING_CONFIG \n} from './shipping';\nimport { \n  PaymentService, \n  PaymentInitRequest,\n  PaymentConfig,\n  DEFAULT_PAYMENT_CONFIG \n} from './payment';\nimport { \n  CheckoutValidationService,\n  CheckoutValidationContext,\n  CheckoutValidationResult,\n  ValidationResult,\n  createValidationRules \n} from './validation';\nimport { \n  CheckoutFlowManager,\n  CheckoutFlowState,\n  CheckoutFlowConfig,\n  CheckoutFlowEventHandlers,\n  StepTransitionResult,\n  DEFAULT_CHECKOUT_FLOW_CONFIG \n} from './flow';\nimport { \n  OrderProcessingService,\n  OrderCreateRequest,\n  OrderCreateResponse,\n  OrderConfirmationRequest,\n  OrderSearchCriteria,\n  OrderProcessingConfig,\n  DEFAULT_ORDER_PROCESSING_CONFIG \n} from './order';\n\n/**\n * Comprehensive checkout configuration\n */\nexport interface CheckoutConfig {\n  readonly address?: Partial<AddressFieldRequirements>;\n  readonly shipping?: Partial<ShippingConfig>;\n  readonly payment?: Partial<PaymentConfig>;\n  readonly flow?: Partial<CheckoutFlowConfig>;\n  readonly order?: Partial<OrderProcessingConfig>;\n  readonly validation?: Partial<CheckoutValidationRules>;\n}\n\n/**\n * Checkout session update options\n */\nexport interface CheckoutSessionUpdateOptions {\n  readonly billingAddress?: BillingAddress;\n  readonly shippingAddress?: ShippingAddress;\n  readonly useShippingAsBilling?: boolean;\n  readonly selectedShippingMethod?: SelectedShippingMethod;\n  readonly selectedPaymentMethod?: PaymentMethod;\n  readonly orderNotes?: string;\n  readonly termsAccepted?: boolean;\n  readonly newsletterOptIn?: boolean;\n}\n\n/**\n * Checkout initialization options\n */\nexport interface CheckoutInitOptions {\n  readonly isGuestCheckout?: boolean;\n  readonly skipValidation?: boolean;\n  readonly startStep?: number;\n}\n\n/**\n * Main checkout service integrating all components\n */\nclass CheckoutService {\n  private readonly config: CheckoutConfig;\n\n  // Service instances\n  private readonly addressManager: AddressManager;\n  private readonly shippingService: ShippingService;\n  private readonly paymentService: PaymentService;\n  private readonly validationService: CheckoutValidationService;\n  private readonly orderProcessingService: OrderProcessingService;\n  \n  // Flow manager (created per checkout session)\n  private flowManager: CheckoutFlowManager | null = null;\n  private currentCart: Cart | null = null;\n\n  constructor(\n    client: HttpClient,\n    cache: CacheManager,\n    config: CheckoutConfig = {}\n  ) {\n    this.config = config;\n\n    // Initialize service instances\n    this.addressManager = new AddressManager();\n    \n    this.shippingService = new ShippingService(\n      client,\n      cache,\n      { ...DEFAULT_SHIPPING_CONFIG, ...config.shipping }\n    );\n    \n    this.paymentService = new PaymentService(\n      client,\n      cache,\n      { ...DEFAULT_PAYMENT_CONFIG, ...config.payment }\n    );\n    \n    this.validationService = new CheckoutValidationService(\n      this.addressManager,\n      this.shippingService,\n      this.paymentService\n    );\n    \n    this.orderProcessingService = new OrderProcessingService(\n      client,\n      cache,\n      { ...DEFAULT_ORDER_PROCESSING_CONFIG, ...config.order }\n    );\n  }\n\n  /**\n   * Initialize checkout with cart\n   */\n  async initializeCheckout(\n    cart: Cart, \n    options: CheckoutInitOptions = {},\n    eventHandlers: CheckoutFlowEventHandlers = {}\n  ): Promise<Result<CheckoutFlowState, WooError>> {\n    try {\n      this.currentCart = cart;\n\n      // Create flow manager\n      const flowConfig: CheckoutFlowConfig = {\n        ...DEFAULT_CHECKOUT_FLOW_CONFIG,\n        ...this.config.flow,\n        validationRules: {\n          ...DEFAULT_CHECKOUT_FLOW_CONFIG.validationRules,\n          ...this.config.validation\n        }\n      };\n\n      this.flowManager = new CheckoutFlowManager(\n        this.addressManager,\n        this.shippingService,\n        this.paymentService,\n        this.validationService,\n        flowConfig,\n        eventHandlers\n      );\n\n      // Initialize the flow\n      const result = await this.flowManager.initializeCheckout(\n        cart, \n        options.isGuestCheckout || false\n      );\n\n      if (isOk(result) && options.startStep && options.startStep > 1) {\n        // Jump to specific step if requested\n        return this.flowManager.goToStep(options.startStep, cart);\n      }\n\n      return result;\n\n    } catch (error) {\n      return Err(ErrorFactory.validationError(\n        'Checkout initialization failed',\n        error\n      ));\n    }\n  }\n\n  /**\n   * Update checkout session\n   */\n  async updateSession(updates: CheckoutSessionUpdateOptions): Promise<Result<CheckoutFlowState, WooError>> {\n    if (!this.flowManager || !this.currentCart) {\n      return Err(ErrorFactory.validationError('Checkout not initialized'));\n    }\n\n    return this.flowManager.updateSession(updates, this.currentCart);\n  }\n\n  /**\n   * Move to next step\n   */\n  async nextStep(): Promise<Result<StepTransitionResult, WooError>> {\n    if (!this.flowManager || !this.currentCart) {\n      return Err(ErrorFactory.validationError('Checkout not initialized'));\n    }\n\n    return this.flowManager.nextStep(this.currentCart);\n  }\n\n  /**\n   * Move to previous step\n   */\n  async previousStep(): Promise<Result<StepTransitionResult, WooError>> {\n    if (!this.flowManager) {\n      return Err(ErrorFactory.validationError('Checkout not initialized'));\n    }\n\n    return this.flowManager.previousStep();\n  }\n\n  /**\n   * Jump to specific step\n   */\n  async goToStep(step: number): Promise<Result<StepTransitionResult, WooError>> {\n    if (!this.flowManager || !this.currentCart) {\n      return Err(ErrorFactory.validationError('Checkout not initialized'));\n    }\n\n    return this.flowManager.goToStep(step, this.currentCart);\n  }\n\n  /**\n   * Get current checkout state\n   */\n  getCurrentState(): CheckoutFlowState | null {\n    return this.flowManager?.getFlowState() || null;\n  }\n\n  /**\n   * Validate current step\n   */\n  async validateCurrentStep(): Promise<Result<CheckoutValidationResult, WooError>> {\n    if (!this.flowManager || !this.currentCart) {\n      return Err(ErrorFactory.validationError('Checkout not initialized'));\n    }\n\n    return this.flowManager.validateCurrentStep(this.currentCart);\n  }\n\n  /**\n   * Complete checkout and create order\n   */\n  async completeCheckout(): Promise<Result<OrderCreateResponse, WooError>> {\n    try {\n      if (!this.flowManager || !this.currentCart) {\n        return Err(ErrorFactory.validationError('Checkout not initialized'));\n      }\n\n      const currentState = this.flowManager.getFlowState();\n      \n      // Create order request\n      const orderRequest: OrderCreateRequest = {\n        cart: this.currentCart,\n        checkoutSession: currentState.session\n      };\n\n      // Create the order\n      const orderResult = await this.orderProcessingService.createOrder(orderRequest);\n      if (isErr(orderResult)) {\n        return Err(unwrapErr(orderResult));\n      }\n\n      const orderResponse = unwrap(orderResult);\n\n      // If payment is required and we have a payment method, initialize payment\n      if (orderResponse.requiresPayment && currentState.session.selectedPaymentMethod) {\n        const paymentRequest: PaymentInitRequest = {\n          paymentMethodId: currentState.session.selectedPaymentMethod.id,\n          orderId: orderResponse.order.id,\n          amount: orderResponse.order.total,\n          currency: orderResponse.order.currency,\n          returnUrl: '/checkout/payment/return',\n          cancelUrl: '/checkout/payment/cancel'\n        };\n\n        const paymentResult = await this.paymentService.initializePayment(paymentRequest);\n        if (isOk(paymentResult)) {\n          const payment = unwrap(paymentResult);\n          return Ok({\n            ...orderResponse,\n            paymentUrl: payment.redirectUrl\n          });\n        }\n      }\n\n      return Ok(orderResponse);\n\n    } catch (error) {\n      return Err(ErrorFactory.apiError(\n        'Checkout completion failed',\n        500,\n        error\n      ));\n    }\n  }\n\n  // Address Management Methods\n\n  /**\n   * Get field requirements for address\n   */\n  getAddressFieldRequirements(addressType: 'billing' | 'shipping'): AddressFieldRequirements {\n    const context: AddressValidationContext = {\n      addressType,\n      isGuestCheckout: this.getCurrentState()?.session.isGuestCheckout || false,\n      fieldRequirements: this.config.address,\n      checkoutRules: this.config.validation\n    };\n\n    return this.addressManager.getFieldRequirements(context);\n  }\n\n  /**\n   * Validate address\n   */\n  async validateAddress(\n    address: BillingAddress | ShippingAddress, \n    type: 'billing' | 'shipping'\n  ): Promise<Result<ValidationResult, WooError>> {\n    if (!this.currentCart) {\n      return Err(ErrorFactory.validationError('Checkout not initialized'));\n    }\n\n    const context: CheckoutValidationContext = {\n      checkoutSession: this.getCurrentState()?.session || {} as CheckoutSession,\n      cart: this.currentCart,\n      validationRules: { ...this.config.validation } as CheckoutValidationRules,\n      isGuestCheckout: this.getCurrentState()?.session.isGuestCheckout || false,\n      currentStep: this.getCurrentState()?.currentStep || 1\n    };\n\n    if (type === 'billing') {\n      return this.validationService.validateBillingAddress(context);\n    } else {\n      return this.validationService.validateShippingAddress(context);\n    }\n  }\n\n  /**\n   * Get address suggestions\n   */\n  async getAddressSuggestions(address: BillingAddress | ShippingAddress): Promise<Result<BillingAddress | ShippingAddress | null, WooError>> {\n    return this.addressManager.suggestAddressCorrection(address);\n  }\n\n  // Shipping Methods\n\n  /**\n   * Get available shipping rates\n   */\n  async getShippingRates(destination?: BillingAddress | ShippingAddress): Promise<Result<ShippingRateResponse, WooError>> {\n    if (!this.currentCart) {\n      return Err(ErrorFactory.validationError('Checkout not initialized'));\n    }\n\n    const currentState = this.getCurrentState();\n    const shippingDestination = destination || \n      (currentState?.session.useShippingAsBilling \n        ? currentState?.session.billingAddress \n        : currentState?.session.shippingAddress);\n\n    if (!shippingDestination) {\n      return Err(ErrorFactory.validationError('Shipping address is required'));\n    }\n\n    const request: ShippingRateRequest = {\n      destination: shippingDestination,\n      cartItems: this.currentCart.items.map(item => ({\n        productId: item.productId,\n        variationId: item.variationId,\n        quantity: item.quantity,\n        weight: item.weight,\n        dimensions: item.dimensions\n      })),\n      cartTotal: this.currentCart.totals.total,\n      currency: this.currentCart.currency\n    };\n\n    return this.shippingService.getShippingRates(request);\n  }\n\n  /**\n   * Calculate shipping for selected method\n   */\n  async calculateShipping(\n    selectedMethod: SelectedShippingMethod,\n    destination?: BillingAddress | ShippingAddress\n  ): Promise<Result<ShippingCalculation, WooError>> {\n    if (!this.currentCart) {\n      return Err(ErrorFactory.validationError('Checkout not initialized'));\n    }\n\n    const currentState = this.getCurrentState();\n    const shippingDestination = destination || \n      (currentState?.session.useShippingAsBilling \n        ? currentState?.session.billingAddress \n        : currentState?.session.shippingAddress);\n\n    if (!shippingDestination) {\n      return Err(ErrorFactory.validationError('Shipping address is required'));\n    }\n\n    return this.shippingService.calculateShipping(\n      selectedMethod,\n      shippingDestination,\n      this.currentCart.totals.total\n    );\n  }\n\n  // Payment Methods\n\n  /**\n   * Get available payment methods\n   */\n  async getPaymentMethods(): Promise<Result<PaymentMethod[], WooError>> {\n    if (!this.currentCart) {\n      return Err(ErrorFactory.validationError('Checkout not initialized'));\n    }\n\n    return this.paymentService.getAvailablePaymentMethods(\n      this.currentCart.totals.total,\n      this.currentCart.currency\n    );\n  }\n\n  /**\n   * Validate payment method\n   */\n  async validatePaymentMethod(methodId: string): Promise<Result<boolean, WooError>> {\n    if (!this.currentCart) {\n      return Err(ErrorFactory.validationError('Checkout not initialized'));\n    }\n\n    const validationResult = await this.paymentService.validatePaymentMethod(\n      methodId,\n      this.currentCart.totals.total,\n      this.currentCart.currency\n    );\n\n    if (isErr(validationResult)) {\n      return Err(unwrapErr(validationResult));\n    }\n\n    return Ok(unwrap(validationResult).isValid);\n  }\n\n  // Order Management\n\n  /**\n   * Get order by ID\n   */\n  async getOrder(orderId: string): Promise<Result<Order, WooError>> {\n    return this.orderProcessingService.getOrder(orderId);\n  }\n\n  /**\n   * Confirm order payment\n   */\n  async confirmOrderPayment(request: OrderConfirmationRequest): Promise<Result<Order, WooError>> {\n    return this.orderProcessingService.confirmOrder(request);\n  }\n\n  /**\n   * Cancel order\n   */\n  async cancelOrder(orderId: string, reason?: string): Promise<Result<Order, WooError>> {\n    return this.orderProcessingService.cancelOrder(orderId, reason);\n  }\n\n  /**\n   * Search orders\n   */\n  async searchOrders(criteria: OrderSearchCriteria): Promise<Result<Order[], WooError>> {\n    return this.orderProcessingService.searchOrders(criteria);\n  }\n\n  // Utility Methods\n\n  /**\n   * Reset checkout session\n   */\n  async resetCheckout(): Promise<Result<void, WooError>> {\n    if (this.flowManager) {\n      const resetResult = await this.flowManager.resetFlow();\n      this.flowManager = null;\n      this.currentCart = null;\n      return resetResult;\n    }\n    return Ok(undefined);\n  }\n\n  /**\n   * Check if checkout can proceed\n   */\n  canProceedToNextStep(): boolean {\n    const state = this.getCurrentState();\n    return state?.canProceed || false;\n  }\n\n  /**\n   * Get current step information\n   */\n  getCurrentStep(): CheckoutStep | null {\n    return this.flowManager?.getCurrentStep() || null;\n  }\n\n  /**\n   * Check if step is completed\n   */\n  isStepCompleted(step: number): boolean {\n    return this.flowManager?.isStepCompleted(step) || false;\n  }\n\n  /**\n   * Generate order number\n   */\n  generateOrderNumber(): string {\n    return this.orderProcessingService.generateOrderNumber();\n  }\n\n  /**\n   * Get checkout configuration\n   */\n  getConfiguration(): CheckoutConfig {\n    return this.config;\n  }\n\n  /**\n   * Update checkout configuration\n   */\n  updateConfiguration(updates: Partial<CheckoutConfig>): void {\n    Object.assign(this.config, updates);\n  }\n}\n\n/**\n * Default checkout configuration\n */\nexport const DEFAULT_CHECKOUT_CONFIG: CheckoutConfig = {\n  address: {\n    firstName: true,\n    lastName: true,\n    company: false,\n    address1: true,\n    address2: false,\n    city: true,\n    state: true,\n    postcode: true,\n    country: true,\n    email: true,\n    phone: false\n  },\n  shipping: DEFAULT_SHIPPING_CONFIG,\n  payment: DEFAULT_PAYMENT_CONFIG,\n  flow: DEFAULT_CHECKOUT_FLOW_CONFIG,\n  order: DEFAULT_ORDER_PROCESSING_CONFIG,\n  validation: createValidationRules().build()\n};\n\n// Export all types and services for advanced usage\nexport * from './address';\nexport * from './shipping';\nexport * from './payment';\nexport * from './validation';\nexport * from './flow';\nexport * from './order';\n\nexport { CheckoutService }; ","/**\n * WooCommerce Headless SDK - Main Export\n * Following the enhanced unified-10x-dev framework\n */\n\n// Core types\nexport * from './types/result';\nexport * from './types/errors';\nexport * from './types/commerce';\nexport * from './types/config';\n\n// Additional cart types (avoiding conflicts with config)\nexport type { \n  CartItem, \n  Cart, \n  CartTotals, \n  CartValidationResult,\n  CartUpdateRequest,\n  CartAddItemRequest,\n  CartQuantityLimits,\n  CartItemMeta,\n  AppliedCoupon,\n  ShippingMethod,\n  CartFee\n} from './types/cart';\n\n// Additional search types (avoiding conflicts with config)\nexport type {\n  SearchQuery,\n  SearchResults,\n  SearchResultItem,\n  SearchFilter,\n  SearchFacet,\n  SearchSuggestion,\n  SearchAggregation,\n  SearchPagination,\n  SearchAnalyticsEvent,\n  SearchHistoryEntry,\n  SearchQueryBuilder,\n  QuickSearchParams,\n  AutoCompleteRequest,\n  AutoCompleteResponse,\n  SearchOperator,\n  SortDirection\n} from './types/search';\n\n// Additional user types\nexport type {\n  UserProfile,\n  CustomerData,\n  UserAddress,\n  UserPreferences,\n  UserOrderSummary,\n  UserWishlist,\n  WishlistItem,\n  UserActivity,\n  UserAuthContext,\n  UserSyncRequest,\n  UserSyncResponse,\n  UserUpdateRequest,\n  AddressValidationResult,\n  UserListParams,\n  UserListResponse,\n  UserStats,\n  UserRole,\n  UserStatus,\n  Gender,\n  AddressType\n} from './types/user';\n\n// Review and rating types\nexport type {\n  ProductReview,\n  ReviewStatus,\n  ReviewImage,\n  CreateReviewRequest,\n  UpdateReviewRequest,\n  ReviewListParams,\n  ReviewListResponse,\n  RatingDistribution,\n  ReviewAnalytics,\n  ReviewVote,\n  ReviewModeration,\n  ReviewValidationResult,\n  ReviewFilter,\n  ReviewSort,\n  ReviewSearchConfig,\n  ReviewNotificationSettings,\n  ReviewExportOptions,\n  ReviewImportOptions,\n  ReviewRateLimit\n} from './types/review';\n\n// Core classes\nexport { HttpClient } from './core/client';\nexport { AuthManager } from './core/auth';\nexport { ConfigManager } from './core/config';\nexport { CacheManager, MemoryCache, LocalStorageCache, IndexedDBCache } from './core/cache';\nexport type { CacheEntry, CacheStorage } from './core/cache';\n\n// Modules\nexport { ProductService } from './modules/products';\nexport type { ProductListParams, ProductListResponse, VariationListParams } from './modules/products';\nexport { CartService } from './modules/cart';\nexport { SearchService } from './modules/search';\nexport { UserService } from './modules/user';\nexport { ReviewService } from './modules/reviews';\n\n// Main SDK class\nexport { WooHeadless } from './woo-headless';\n\n// Version\nexport const VERSION = '1.0.0';\n\n// Export commerce types\nexport {\n  // Types\n  type ProductStatus,\n  type ProductCatalogVisibility,\n  type ProductType,\n  type OrderStatus,\n  type ImageDimensions,\n  type ProductImage,\n  type ProductCategory,\n  type ProductTag,\n  type ProductAttribute,\n  type PriceRange,\n  type ProductDimensions,\n  type MetaData,\n  type WooCommerceProduct,\n  type ProductVariation,\n  type BillingAddress,\n  type ShippingAddress,\n  type OrderLineItem,\n  type WooCommerceOrder,\n  type WooCommerceCustomer,\n  type WooCommerceCoupon,\n  \n  // Schemas\n  ProductSchema,\n  OrderSchema,\n  \n  // Type guards\n  isWooCommerceProduct,\n  isWooCommerceOrder,\n  isWooCommerceCoupon\n} from './types/commerce'; ","/**\n * Main WooHeadless SDK class\n * Following the enhanced unified-10x-dev framework\n */\n\nimport { HttpClient } from './core/client';\nimport { AuthManager } from './core/auth';\nimport { ConfigManager } from './core/config';\nimport { CacheManager } from './core/cache';\nimport { ProductService } from './modules/products';\nimport { CartService } from './modules/cart';\nimport { SearchService } from './modules/search';\nimport { UserService } from './modules/user';\nimport { CheckoutService } from './modules/checkout';\nimport { ReviewService } from './modules/reviews';\nimport { WooConfig, ResolvedWooConfig } from './types/config';\nimport { Result } from './types/result';\nimport { ConfigurationError, WooError } from './types/errors';\n\n/**\n * Main SDK class that provides access to all WooCommerce functionality\n */\nexport class WooHeadless {\n  private config: ResolvedWooConfig;\n  private readonly httpClient: HttpClient;\n  private readonly authManager: AuthManager;\n  private cacheManager: CacheManager;\n  \n  // Public services\n  public readonly products: ProductService;\n  public readonly cart: CartService;\n  public readonly search: SearchService;\n  public readonly user: UserService;\n  public readonly checkout: CheckoutService;\n  public readonly reviews: ReviewService;\n\n  constructor(config: WooConfig) {\n    // Validate and resolve configuration\n    const configResult = ConfigManager.resolveConfig(config);\n    if (!configResult.success) {\n      throw configResult.error;\n    }\n    this.config = configResult.data;\n\n    // Initialize core components\n    this.httpClient = new HttpClient(this.config);\n    this.authManager = new AuthManager(this.config);\n    this.cacheManager = new CacheManager(this.config.cache);\n\n    // Set up authentication interceptor if enabled\n    if (this.config.auth.enabled) {\n      this.httpClient.addRequestInterceptor((options) => {\n        const authHeaders = this.authManager.getAuthorizationHeader();\n        if (authHeaders) {\n          return {\n            ...options,\n            headers: {\n              ...options.headers,\n              ...authHeaders\n            }\n          };\n        }\n        return options;\n      });\n    } else {\n      // Use basic auth with consumer key/secret\n      const basicAuth = AuthManager.generateBasicAuth(\n        this.config.consumerKey,\n        this.config.consumerSecret\n      );\n      this.httpClient.addRequestInterceptor((options) => ({\n        ...options,\n        headers: {\n          ...options.headers,\n          'Authorization': basicAuth\n        }\n      }));\n    }\n\n    // Initialize services\n    this.products = new ProductService(this.httpClient, this.cacheManager);\n    this.cart = new CartService(this.httpClient, this.cacheManager, this.config.cart);\n    this.search = new SearchService(this.httpClient, this.cacheManager, this.config.advancedSearch);\n    this.user = new UserService(this.httpClient, this.cacheManager, this.config.userSync);\n    this.checkout = new CheckoutService(this.httpClient, this.cacheManager, this.config.checkout);\n    this.reviews = new ReviewService(this.httpClient, this.cacheManager);\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): ResolvedWooConfig {\n    return this.config;\n  }\n\n  /**\n   * Get authentication manager\n   */\n  getAuth(): AuthManager {\n    return this.authManager;\n  }\n\n  /**\n   * Get cache manager\n   */\n  getCache(): CacheManager {\n    return this.cacheManager;\n  }\n\n  /**\n   * Get HTTP client for custom requests\n   */\n  getHttpClient(): HttpClient {\n    return this.httpClient;\n  }\n\n  /**\n   * Clear all caches\n   */\n  async clearCache(): Promise<Result<void, WooError>> {\n    return this.cacheManager.clear();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  async getCacheStats(): Promise<Result<Record<string, number>, WooError>> {\n    return this.cacheManager.getStats();\n  }\n\n  /**\n   * Update configuration at runtime\n   */\n  updateConfig(updates: Partial<WooConfig>): Result<void, ConfigurationError> {\n    const newConfig = { ...this.config, ...updates };\n    const validationResult = ConfigManager.resolveConfig(newConfig);\n    \n    if (!validationResult.success) {\n      return validationResult;\n    }\n\n    // Apply updates\n    Object.assign(this.config, validationResult.data);\n    \n    // Reinitialize components if needed\n    if (updates.cache) {\n      this.cacheManager = new CacheManager(this.config.cache);\n    }\n    \n    return { success: true, data: undefined };\n  }\n\n  /**\n   * Health check to verify API connectivity\n   */\n  async healthCheck(): Promise<Result<boolean, WooError>> {\n    const result = await this.httpClient.get('/');\n    return result.success ? { success: true, data: true } : result;\n  }\n} "],"names":["Ok","data","success","Err","error","isOk","result","isErr","unwrap","Error","JSON","stringify","unwrapErr","NetworkError","constructor","message","details","statusCode","super","this","code","retryable","name","timestamp","Date","AuthError","ValidationError","ApiError","RateLimitError","retryAfter","TimeoutError","timeout","ConfigurationError","ProductNotFoundError","productId","CartError","CheckoutError","PaymentError","ErrorFactory","networkError","authError","validationError","apiError","rateLimitError","timeoutError","configurationError","productNotFoundError","cartError","checkoutError","paymentError","cacheError","CacheError","notImplementedError","persistenceError","ProductSchema","z","object","id","number","string","slug","status","enum","featured","boolean","catalog_visibility","description","short_description","price","regular_price","sale_price","on_sale","stock_status","manage_stock","stock_quantity","optional","categories","array","images","src","alt","OrderSchema","currency","total","customer_id","billing","first_name","last_name","email","phone","line_items","product_id","quantity","DEFAULT_CONFIG","version","environment","cache","enabled","ttl","storage","maxSize","prefix","auth","expiresIn","autoRefresh","refreshThreshold","http","retries","retryDelay","maxRetryDelay","retryCondition","includes","search","fuzzyThreshold","maxResults","enableHighlight","enableSuggestions","cacheResults","enableAnalytics","advancedSearch","fuzzy","threshold","distance","minMatchCharLength","includeScore","highlighting","preTag","postTag","fragmentSize","maxFragments","suggestions","maxSuggestions","minQueryLength","showPopular","showRecent","facets","maxFacets","maxFacetValues","minDocumentCount","analytics","trackQueries","trackFilters","trackClicks","trackConversions","sessionTimeout","caching","maxCacheSize","cacheKey","performance","searchTimeout","debounceDelay","prefetchResults","trackPageViews","trackSearches","i18n","locale","timezone","dateFormat","numberFormat","style","minimumFractionDigits","maximumFractionDigits","debug","logLevel","performanceMonitoring","errorReporting","apiLogging","cart","persistence","strategy","key","encryption","expirationDays","syncToServer","sync","syncIntervalMs","conflictResolution","maxRetries","retryDelayMs","syncOnAuth","syncOnCartChange","backgroundSync","offlineQueueSize","autoCalculateTotals","validateStock","allowBackorders","maxItems","maxQuantityPerItem","enableCoupons","enableShipping","enableFees","enableCrossSells","taxCalculation","pricesIncludeTax","displayMode","roundAtSubtotal","userSync","syncInterval","syncOnLogin","syncProfile","syncAddresses","syncPreferences","syncOrderHistory","syncWishlist","maxOrderHistory","cacheUserData","cacheTtl","checkout","address","firstName","lastName","company","address1","address2","city","state","postcode","country","shipping","calculateTax","defaultCountry","restrictedCountries","cacheTimeout","payment","testMode","supportedMethods","minimumAmount","returnUrl","cancelUrl","flow","steps","allowSkipOptional","persistSession","autoAdvance","validationRules","requireShippingAddress","requireBillingAddress","requirePhoneNumber","requireCompanyName","allowGuestCheckout","minimumOrderAmount","requiredFields","order","autoUpdateInventory","sendConfirmationEmail","requirePaymentConfirmation","orderNumberPrefix","defaultStatus","inventoryHoldMinutes","validation","validateBaseURL","url","URL","validateConsumerCredentials","secret","trim","length","validateCacheConfig","config","HttpClient","requestInterceptors","responseInterceptors","errorInterceptors","abortControllers","Map","baseURL","addRequestInterceptor","interceptor","push","addResponseInterceptor","addErrorInterceptor","request","options","requestId","generateRequestId","processedOptions","attemptRequest","response","createErrorFromException","delete","get","headers","method","post","body","put","patch","cancelRequest","controller","abort","cancelAllRequests","values","clear","lastError","attempt","executeRequest","shouldRetry","delay","calculateRetryDelay","abortController","AbortController","set","buildURL","timeoutId","setTimeout","fetchOptions","buildHeaders","signal","buildBody","fetch","clearTimeout","ok","createErrorFromResponse","parseResponse","responseHeaders","extractHeaders","statusText","aborted","path","cleanPath","startsWith","slice","Accept","contentType","json","text","forEach","value","parseInt","jitteredDelay","Math","pow","random","min","ms","Promise","resolve","now","toString","substr","LocalTokenStorage","localStorage","getItem","setItem","remove","removeItem","keys","Object","MemoryTokenStorage","store","Array","from","AuthManager","currentToken","refreshTimer","window","initializeToken","tokenData","parsed","parse","isTokenValid","scheduleRefresh","clearToken","setToken","getToken","token","isAuthenticated","validateToken","clearRefreshTimer","logout","createTokenFromAuthResponse","authResponse","expiresAt","expires","issuedAt","getAuthorizationHeader","Authorization","refreshTime","getTime","handleTokenRefresh","generateBasicAuth","consumerKey","consumerSecret","btoa","createOAuthSignature","parameters","floor","oauthParams","oauth_consumer_key","oauth_nonce","substring","oauth_signature_method","oauth_timestamp","oauth_version","sortedParams","sort","map","encodeURIComponent","join","signatureBase","toUpperCase","signingKey","signature","oauth_signature","ConfigManager","resolveConfig","validateConfig","hasConsumerKey","Boolean","hasConsumerSecret","getEnvironmentConfig","fromEnvironment","process","env","WOO_BASE_URL","WOO_CONSUMER_KEY","WOO_CONSUMER_SECRET","WOO_VERSION","NODE_ENV","envConfig","assign","mergeConfigs","configs","merged","MemoryCache","maxSizeMB","entry","size","estimateSize","evictIfNeeded","has","requiredSize","currentSize","entries","sortedEntries","a","b","LocalStorageCache","item","serialized","e","evictOldest","count","removeCount","ceil","i","IndexedDBCache","dbName","storeName","db","initDB","indexedDB","open","onerror","onsuccess","onupgradeneeded","event","target","objectStoreNames","contains","createObjectStore","keyPath","dbResult","transaction","objectStore","CacheManager","layers","initializeLayers","layerName","layer","promote","finalTtl","errors","getStats","stats","sizeResult","foundLayer","layerOrder","foundIndex","indexOf","ProductService","client","list","params","validationResult","validateListParams","queryParams","buildQueryParams","cachedResult","URLSearchParams","totalProducts","totalPages","products","product","validated","currentPage","page","perPage","limit","getBySlug","find","p","getVariations","buildVariationQueryParams","query","getByCategory","categoryId","category","getFeatured","getOnSale","onSale","minPrice","maxPrice","per_page","tag","orderby","offset","inStock","min_price","max_price","include","exclude","parent","CartItemMetaSchema","displayKey","displayValue","CartQuantityLimitsSchema","max","step","CartItemSchema","positive","variationId","regularPrice","salePrice","totalPrice","sku","weight","dimensions","width","height","image","stockQuantity","stockStatus","backorders","quantityLimits","meta","attributes","record","addedAt","date","updatedAt","CartTotalsSchema","subtotal","subtotalTax","shippingTotal","shippingTax","discountTotal","discountTax","cartContentsTotal","cartContentsTax","feeTotal","feeTax","totalTax","AppliedCouponSchema","discountType","amount","freeShipping","expiryDate","usageLimit","usageCount","individualUse","productIds","excludedProductIds","categoryIds","excludedCategoryIds","maximumAmount","CartSchema","items","itemCount","totals","appliedCoupons","shippingMethods","any","chosenShippingMethods","fees","needsShipping","needsPayment","hasCalculatedShipping","currencySymbol","taxDisplayMode","crossSells","isEmpty","createdAt","customerId","sessionId","CartAddItemRequestSchema","replace","isCart","obj","generateId","CartSyncManager","httpClient","deviceId","syncStatus","backgroundSyncTimer","isOnline","syncQueue","eventHandlers","generateDeviceId","setupNetworkMonitoring","setupBackgroundSync","getStatus","getLastSyncAt","lastSyncAt","addEventHandler","handler","removeEventHandler","index","splice","syncCart","localCart","authContext","conflicts","syncedAt","changes","itemsAdded","itemsUpdated","itemsRemoved","couponsAdded","couponsRemoved","userId","context","setSyncStatus","notifyEventHandlers","serverCartResult","fetchServerCart","serverCartData","uploadResult","uploadCart","mergedCart","mergeResult","mergeCarts","resolveResult","resolveConflicts","queueAction","action","queueItem","retryCount","shift","processQueue","failedItems","processQueueItem","enable","disable","stopBackgroundSync","destroy","metadata","syncVersion","source","serverCart","itemMergeResult","mergeCartItems","mergedItems","itemConflicts","filter","some","local","localItem","couponMergeResult","mergeCoupons","mergedCoupons","reduce","sum","localItems","serverItems","processedKeys","Set","serverItem","add","conflict","type","itemKey","localValue","serverValue","suggestion","getQuantityMergeSuggestion","resolvedQuantity","resolveQuantityConflict","localCoupons","serverCoupons","processedCodes","localCoupon","serverCoupon","coupon","localQuantity","serverQuantity","console","warn","args","onSyncStart","onSyncComplete","onSyncError","onConflictDetected","navigator","onLine","addEventListener","setInterval","clearInterval","crypto","randomUUID","CartPersistenceManager","save","toISOString","getStorageKey","sessionStorage","saveToIndexedDB","saveToServer","load","loadFromIndexedDB","loadFromServer","test","clearFromIndexedDB","clearFromServer","openIndexedDB","reject","close","createIndex","unique","cartData","log","CartTotalsCalculator","calculate","customerData","calculateSubtotal","calculateSubtotalTax","calculateDiscounts","calculateShipping","calculateFees","calculateFinalTotal","roundTotal","tax","discount","taxRate","getDefaultTaxRate","itemSubtotal","coupons","calculateSingleCouponDiscount","applicableItems","couponAppliesToItem","applicableSubtotal","percentDiscount","cartTotal","selectedMethod","cost","taxable","taxes","fee","taxSum","US","CA","GB","DE","FR","AU","round","CartService","currentCart","calculator","syncManager","getCart","loadResult","createEmptyCart","addItem","validateAddItemRequest","cartResult","productResult","fetchProductData","stockValidation","generateCartItemKey","existingItemIndex","findIndex","updatedItems","createCartItem","existingItem","newQuantity","updatedItem","backordersAllowed","soldIndividually","downloadable","virtual","newItem","updatedCart","updateCartWithItems","saveResult","updateItem","removeResult","itemIndex","_","newTotals","clearCart","emptyCart","validateCart","mutableErrors","mutableWarnings","validateCartItem","constraintErrors","constraintWarnings","validateCartConstraints","w","couponErrors","couponWarnings","validateAppliedCoupons","totalsWarnings","validateCartTotals","isValid","warnings","currentStock","requestedQuantity","stockErrors","stockWarnings","validateItemStock","quantityErrors","quantityWarnings","validateItemQuantityLimits","priceWarnings","validateItemPriceChanges","variationErrors","validateProductVariation","currentProduct","availableStock","lowStockThreshold","backorderNotify","currentRegularPrice","parseFloat","currentSalePrice","abs","toFixed","previousPrice","currentPrice","priceIncrease","itemSalePrice","previousSalePrice","attributeName","attributeValue","totalQuantity","maxTotalQuantity","maxRecommended","couponCode","recalculatedTotals","tolerance","storedTotal","calculatedTotal","difference","applyCoupon","validateCoupon","valid","reason","couponToApply","discount_type","free_shipping","minimum_amount","maximum_amount","usage_count","usage_limit","date_expires","individual_use","excludeSaleItems","exclude_sale_items","updatedTotals","removeCoupon","normalizedCode","c","updatedAppliedCoupons","getAvailableCoupons","availableCoupons","isCouponEligibleForCart","couponResult","fetchCouponData","couponData","validateCouponEligibility","minAmount","maxAmount","product_ids","excluded_product_ids","k","backorders_allowed","sold_individually","setAuthContext","syncCartWithServer","catch","getAuthContext","getSyncStatus","addSyncEventHandler","removeSyncEventHandler","syncResult","enableSync","disableSync","processOfflineQueue","SearchFilterSchema","field","operator","unknown","label","RangeFilterSchema","union","SearchSortSchema","direction","SearchPaginationSchema","SearchQuerySchema","filters","rangeFilters","tagIds","excludeProductIds","minRating","pagination","highlight","resultPosition","SearchAnalyticsManager","searchHistory","trackEvent","eventKey","updateSearchHistory","getSearchHistory","cachedHistory","resultCount","clickedResults","conversions","unshift","getSessionId","SearchQueryBuilderImpl","queryText","range","rangeFilter","isArray","tagId","rating","attribute","pageNum","limitNum","build","reset","SearchService","fuseInstance","productsIndex","initializeFuseInstance","cachedIndex","createFuseInstance","refreshSearchIndex","fuseOptions","includeMatches","Fuse","allProducts","hasMore","quickSearch","builder","createQueryBuilder","split","startTime","validateSearchQuery","generateCacheKey","searchResults","score","highlights","extractHighlights","matchedFields","extractMatchedFields","applyFilters","applySorting","totalHits","maxScore","r","paginatedResults","applyPagination","generateFacets","aggregations","generateAggregations","generateSuggestions","processingTime","results","parsedQuery","executionStats","indexSize","cacheHit","autoComplete","includeProducts","fuseResults","trackResultClick","position","keyData","fuseResult","matches","match","indices","filteredResults","cat","minOk","maxOk","applyCustomFilter","applyRangeFilter","sorts","aValue","bValue","date_created","average_rating","total_sales","prices","avg","historyResult","toLowerCase","isDefault","language","timeFormat","emailNotifications","orderUpdates","promotions","newsletter","wishlistReminders","backInStock","priceDrops","privacy","profileVisibility","showPurchaseHistory","allowRecommendations","dataSharing","wordpressUserId","username","displayName","avatar","bio","website","dateOfBirth","gender","roles","dateRegistered","lastLogin","isEmailVerified","isPhoneVerified","UserSyncRequestSchema","externalUserId","forceRefresh","UserAuthContextSchema","accessToken","refreshToken","tokenExpiry","permissions","EmailVerificationService","sendVerification","rateLimitResult","checkRateLimit","generateVerificationToken","tokenExpiryMinutes","isUsed","attempts","storeVerificationToken","emailResult","sendVerificationEmail","updateRateLimit","tokenId","removeVerificationToken","confirmVerification","tokenResult","getVerificationToken","verificationResult","markEmailAsVerified","markTokenAsUsed","clearRateLimit","verifiedAt","getVerificationStatus","userResponse","isVerified","verificationDate","getVerificationDate","pendingTokens","getPendingTokens","pendingVerification","lastTokenSent","rateLimitInfo","getRateLimitInfo","attemptsRemaining","maxResendAttempts","resendVerification","invalidateUserTokens","templateType","isVerificationRequired","requireVerificationForPurchase","simpleHash","str","hash","charCodeAt","metaKey","updatedTokens","getUserTokens","cached","verificationData","emailVerifiedAt","verifiedEmail","_email_verified","_email_verified_at","_verified_email","template","getEmailTemplate","verificationUrl","buildVerificationUrl","emailData","to","subject","html","processTemplate","htmlBody","expiryMinutes","textBody","fromEmail","fromName","sendEmail","baseUrl","verificationPath","templates","variables","processed","placeholder","RegExp","String","cooldownEnd","lastAttempt","resendCooldownMinutes","updatedInfo","tokensJson","_email_verification_tokens","allTokens","updatedToken","tokens","DEFAULT_EMAIL_VERIFICATION_CONFIG","maxAttemptsPerDay","autoVerifyOnRegistration","emailService","provider","welcome","changeEmail","resend","DownloadManagementService","getCustomerDownloads","downloads","customerDownloads","download","customerDownload","mapToCustomerDownload","orderDate","generateDownloadLink","validateDownloadPermission","permission","rateLimiting","ipAddress","generateSecureToken","security","fileInfo","getFileInformation","downloadId","file","secureUrl","generateSecureUrl","cacheDownloadToken","orderId","downloadUrl","downloadsRemaining","fileSize","fileName","permissionResponse","permissionId","permissionData","mapToDownloadPermission","validateOwnership","isActive","accessExpires","ipValidation","validateCustomerIP","trackDownload","trackAnalytics","analyticsData","download_id","downloaded_at","downloadedAt","ip_address","user_agent","userAgent","file_size","download_duration","downloadDuration","successful","error_message","errorMessage","bandwidth","serveFile","downloadToken","tokenValidation","validateDownloadToken","updateDownloadCount","fileStream","createFileStream","filePath","getDownloadStatistics","startDate","endDate","start_date","end_date","totalDownloads","total_downloads","totalBandwidth","total_bandwidth","popularProducts","popular_products","productName","product_name","downloadCount","download_count","downloadsByDate","downloads_by_date","d","averageFileSize","average_file_size","successRate","success_rate","cleanupExpiredDownloads","downloadData","access_expires","isExpired","canDownload","downloads_remaining","permission_id","order_id","order_date","file_name","accessGranted","access_granted","orderKey","order_key","is_active","basePath","mimeType","stream","ReadableStream","start","enqueue","Uint8Array","getMimeType","extension","pop","pdf","zip","exe","dmg","mp4","mp3","jpg","jpeg","png","txt","hourlyKey","getHours","currentCount","maxDownloadsPerHour","DEFAULT_DOWNLOAD_CONFIG","maxDownloadsPerProduct","defaultExpiryDays","maxFileSize","allowedFileTypes","secureDownloads","maxBandwidthPerHour","checksumValidation","encryptFiles","secureBasePath","UserCacheManager","getUserProfile","cacheUserProfile","profile","clearUserCache","AddressValidator","validateAddress","isValidEmail","isValidPhone","isValidPostalCode","pattern","UserService","emailVerificationConfig","downloadConfig","currentAuthContext","userCache","emailVerification","isUserAuthContext","syncRequest","syncUserData","getCurrentAuthContext","clearAuthContext","validateSyncRequest","syncErrors","addresses","preferences","orderHistory","wishlist","profileResult","syncUserProfile","addressResult","syncUserAddresses","prefResult","syncUserPreferences","orderResult","syncUserOrderHistory","wishlistResult","syncUserWishlist","useCache","userData","display_name","avatar_urls","updateUserProfile","updates","updateData","getCustomerData","role","transformWooAddressToUserAddress","isPayingCustomer","is_paying_customer","ordersCount","orders_count","totalSpent","total_spent","avatarUrl","avatar_url","dateCreated","dateModified","date_modified","metaData","meta_data","sendEmailVerification","confirmEmailVerification","getEmailVerificationStatus","resendEmailVerification","isEmailVerificationRequired","getUserOrderHistory","orderNumber","total_tax","shipping_total","paymentMethod","payment_method","paymentMethodTitle","payment_method_title","logUserActivity","activity","activityEntry","customerResult","customer","isPublic","wooAddress","address_1","address_2","CreateReviewSchema","review","reviewer","reviewer_email","parent_id","ReviewService","rateLimitStore","totalReviews","reviews","ratingDistribution","calculateRatingDistribution","averageRating","average","reviewId","create","reviewData","validateReview","rateLimitCheck","processedImages","imageResult","processReviewImages","reviewPayload","sanitizeContent","requiresModeration","createdReview","attachImagesToReview","invalidateReviewCaches","trackReviewEvent","hasImages","update","existingReview","updatePayload","updatedReview","updateReviewImages","force","getProductReviews","getAnalytics","period","reviewsResult","verifiedReviews","verified","reviewsWithReplies","replies","totalHelpfulVotes","helpful_votes","previousPeriodData","getPreviousPeriodData","verifiedPurchaseRatio","responseRate","helpfulnessRatio","recentTrend","reviewCount","ratingChange","topKeywords","extractTopKeywords","voteHelpful","voteType","userEmail","getUserVote","votePayload","review_id","vote_type","user_email","voted_at","moderate","updateResult","moderation","moderated_at","automated","applyFilterToParams","primarySort","ratings","after","before","distribution","percentage","ZodError","spamScore","calculateSpamScore","containsProfanity","canSubmit","userKey","userLimit","hourInMs","resetTime","content","suspiciousPatterns","lowerContent","word","cacheKeys","deletePattern","BaseAddressSchema","BillingAddressSchema","extend","ShippingAddressSchema","regex","expiryMonth","int","expiryYear","getFullYear","cvv","holderName","feesTax","validate","COUNTRY_CONFIGS","postcodePattern","stateRequired","postcodeRequired","phonePattern","JP","BR","IN","NL","AddressManager","customCountryConfigs","countryConfigs","validateAddressWithContext","countryConfig","fieldRequirements","buildFieldRequirements","validateRequiredFields","validateFieldFormats","getFieldRequirements","countryCode","checkoutRules","isFieldRequired","fieldName","addressType","isGuestCheckout","validateBillingAddress","validateShippingAddress","addressesEqual","suggestAddressCorrection","suggestedAddress","capitalizeWords","formatPostcode","getCountryConfig","getSupportedCountries","setCountryConfig","parseAddress","rawData","billingAddress","billingValidation","createValidationError","shippingAddress","shippingValidation","baseAddress","validateBaseAddress","baseValidation","convertToBillingAddress","convertToShippingAddress","baseRequirements","overrides","requirements","char","cleaned","ShippingService","getShippingRates","isShippingAvailable","destination","cachedRates","cartItems","cart_total","responseData","shippingResponse","rates","zones","defaultRate","default_rate","freeShippingThreshold","free_shipping_threshold","estimatedDelivery","estimated_delivery","getShippingZones","cachedZones","method_id","methodId","zone_id","zoneId","shippingCost","trackingAvailable","tracking_available","checkFreeShipping","getCheapestRate","cheapest","current","getFastestRate","priorityOrder","methodType","rate","filterRatesByMethod","groupRatesByZone","grouped","zone","methods","validateShippingSelection","availableRates","updateOrderTotalsWithShipping","currentTotals","shippingCalculation","estimateDeliveryDate","deliveryMatch","minDays","maxDays","isBusinessDays","deliveryDate","daysToAdd","addedDays","setDate","getDate","getDay","clearShippingCache","invalidatePattern","Buffer","DEFAULT_SHIPPING_CONFIG","PaymentService","getAvailablePaymentMethods","paymentResponse","availableMethods","payment_gateways","defaultMethod","default_gateway","minimumAmounts","minimum_amounts","initializePayment","methodsResult","m","paymentMethodId","return_url","cancel_url","paymentId","payment_id","redirectUrl","redirect_url","requiresRedirect","requires_redirect","clientSecret","client_secret","paymentIntentId","payment_intent_id","instructions","expires_at","checkPaymentStatus","transactionId","transaction_id","failureReason","failure_reason","nextAction","next_action","handlePaymentCallback","callbackData","verifyCallbackSignature","cancelPayment","validatePaymentMethod","methodMinimum","title","generateRedirectUrl","searchParams","parseCallbackUrl","callbackUrl","getPaymentMethodDisplay","icon","acceptedCards","filterPaymentMethods","criteria","supportedCountries","supportedCurrencies","clearPaymentCache","DEFAULT_PAYMENT_CONFIG","CheckoutValidationService","addressManager","shippingService","paymentService","validateCheckout","validationResults","criticalErrors","blockers","recommendations","billingResult","checkoutSession","useShippingAsBilling","shippingResult","selectedShippingMethod","shippingMethodResult","validateShippingMethod","selectedPaymentMethod","paymentResult","totalsResult","validateOrderTotals","allValid","every","hasAddressErrors","component","hasPaymentErrors","hasStockErrors","generateRecommendations","canProceed","addressContext","requireEmail","ratesResult","maximumOrderAmount","actualTotal","validateStep","flatMap","validateField","billingCountry","ValidationRuleBuilder","rules","required","fields","CheckoutFlowManager","validationService","generateSessionId","flowState","initializeFlowState","initializeCheckout","session","cartId","orderTotals","createEmptyCheckoutFlow","currentStep","completedSteps","availableSteps","buildAvailableSteps","canGoBack","nextStep","validateCurrentStep","newStep","previousStep","completeCheckout","onStepChange","onStepComplete","goToStep","targetStep","updateSession","skipOptionalValidations","onValidationError","createOrder","createdOrder","paymentInit","paymentStatus","onCheckoutComplete","woError","onCheckoutError","getFlowState","getCurrentStep","stepIndex","isStepCompleted","resetFlow","clearPersistedSession","orderNotes","termsAccepted","newsletterOptIn","progress","completed","generateOrderId","shippingMethod","lineItems","paymentRequest","DEFAULT_CHECKOUT_FLOW_CONFIG","OrderProcessingService","validateOrderCreation","inventoryResult","reserveInventory","orderData","buildOrderData","releaseInventory","mapOrderResponse","updateInventory","operation","requiresPayment","paymentUrl","payment_url","confirmationUrl","getOrder","updateOrderStatus","customer_note","note","notify_customer","notifyCustomer","confirmOrder","date_paid","payment_status","confirmedOrder","sendOrderConfirmationEmail","cancelOrder","cancelledOrder","searchOrders","customerEmail","customer_email","dateFrom","dateTo","orders","filteredOrders","getOrderNotes","addOrderNote","customerNote","generateOrderNumber","orderNumberSuffix","set_paid","mapAddressForAPI","variation_id","shipping_lines","method_title","line_items_subtotal","shipping_tax","discount_total","fee_total","fee_tax","mapAddressFromAPI","DEFAULT_ORDER_PROCESSING_CONFIG","CheckoutService","flowManager","orderProcessingService","flowConfig","startStep","getCurrentState","currentState","orderRequest","orderResponse","getAddressFieldRequirements","getAddressSuggestions","shippingDestination","getPaymentMethods","confirmOrderPayment","resetCheckout","resetResult","canProceedToNextStep","getConfiguration","updateConfiguration","configResult","authManager","cacheManager","authHeaders","basicAuth","user","getConfig","getAuth","getCache","getHttpClient","clearCache","getCacheStats","updateConfig","newConfig","healthCheck","fn","defaultValue"],"mappings":"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"}